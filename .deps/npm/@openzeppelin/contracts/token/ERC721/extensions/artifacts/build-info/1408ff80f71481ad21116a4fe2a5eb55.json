{
	"id": "1408ff80f71481ad21116a4fe2a5eb55",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol": {
				"ERC721": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":628:16955  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1390:1503  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1464:1469  name_ */\n  dup2\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1456:1461  _name */\n  0x00\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1456:1469  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_6\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1489:1496  symbol_ */\n  dup1\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1479:1486  _symbol */\n  0x01\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1479:1496  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1390:1503  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":628:16955  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n  jump(tag_9)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_12)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_12)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_12\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\ntag_12:\n  pop\n  swap1\n  pop\n  tag_17\n  swap2\n  swap1\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_20\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_19)\ntag_20:\n  pop\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:361   */\ntag_22:\n    /* \"#utility.yul\":96:101   */\n  0x00\n    /* \"#utility.yul\":121:187   */\n  tag_24\n    /* \"#utility.yul\":137:186   */\n  tag_25\n    /* \"#utility.yul\":179:185   */\n  dup5\n    /* \"#utility.yul\":137:186   */\n  tag_26\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":121:187   */\n  tag_27\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":112:187   */\n  swap1\n  pop\n    /* \"#utility.yul\":210:216   */\n  dup3\n    /* \"#utility.yul\":203:208   */\n  dup2\n    /* \"#utility.yul\":196:217   */\n  mstore\n    /* \"#utility.yul\":248:252   */\n  0x20\n    /* \"#utility.yul\":241:246   */\n  dup2\n    /* \"#utility.yul\":237:253   */\n  add\n    /* \"#utility.yul\":286:289   */\n  dup5\n    /* \"#utility.yul\":277:283   */\n  dup5\n    /* \"#utility.yul\":272:275   */\n  dup5\n    /* \"#utility.yul\":268:284   */\n  add\n    /* \"#utility.yul\":265:290   */\n  gt\n    /* \"#utility.yul\":262:264   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":303:304   */\n  0x00\n    /* \"#utility.yul\":300:301   */\n  dup1\n    /* \"#utility.yul\":293:305   */\n  revert\n    /* \"#utility.yul\":262:264   */\ntag_28:\n    /* \"#utility.yul\":316:355   */\n  tag_29\n    /* \"#utility.yul\":348:354   */\n  dup5\n    /* \"#utility.yul\":343:346   */\n  dup3\n    /* \"#utility.yul\":338:341   */\n  dup6\n    /* \"#utility.yul\":316:355   */\n  tag_30\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":102:361   */\n  pop\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":381:669   */\ntag_31:\n    /* \"#utility.yul\":448:453   */\n  0x00\n    /* \"#utility.yul\":497:500   */\n  dup3\n    /* \"#utility.yul\":490:494   */\n  0x1f\n    /* \"#utility.yul\":482:488   */\n  dup4\n    /* \"#utility.yul\":478:495   */\n  add\n    /* \"#utility.yul\":474:501   */\n  slt\n    /* \"#utility.yul\":464:466   */\n  tag_33\n  jumpi\n    /* \"#utility.yul\":515:516   */\n  0x00\n    /* \"#utility.yul\":512:513   */\n  dup1\n    /* \"#utility.yul\":505:517   */\n  revert\n    /* \"#utility.yul\":464:466   */\ntag_33:\n    /* \"#utility.yul\":548:554   */\n  dup2\n    /* \"#utility.yul\":542:555   */\n  mload\n    /* \"#utility.yul\":573:663   */\n  tag_34\n    /* \"#utility.yul\":659:662   */\n  dup5\n    /* \"#utility.yul\":651:657   */\n  dup3\n    /* \"#utility.yul\":644:648   */\n  0x20\n    /* \"#utility.yul\":636:642   */\n  dup7\n    /* \"#utility.yul\":632:649   */\n  add\n    /* \"#utility.yul\":573:663   */\n  tag_22\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":564:663   */\n  swap2\n  pop\n    /* \"#utility.yul\":454:669   */\n  pop\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":675:1327   */\ntag_3:\n    /* \"#utility.yul\":774:780   */\n  0x00\n    /* \"#utility.yul\":782:788   */\n  dup1\n    /* \"#utility.yul\":831:833   */\n  0x40\n    /* \"#utility.yul\":819:828   */\n  dup4\n    /* \"#utility.yul\":810:817   */\n  dup6\n    /* \"#utility.yul\":806:829   */\n  sub\n    /* \"#utility.yul\":802:834   */\n  slt\n    /* \"#utility.yul\":799:801   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":847:848   */\n  0x00\n    /* \"#utility.yul\":844:845   */\n  dup1\n    /* \"#utility.yul\":837:849   */\n  revert\n    /* \"#utility.yul\":799:801   */\ntag_36:\n    /* \"#utility.yul\":911:912   */\n  0x00\n    /* \"#utility.yul\":900:909   */\n  dup4\n    /* \"#utility.yul\":896:913   */\n  add\n    /* \"#utility.yul\":890:914   */\n  mload\n    /* \"#utility.yul\":941:959   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":933:939   */\n  dup2\n    /* \"#utility.yul\":930:960   */\n  gt\n    /* \"#utility.yul\":927:929   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":973:974   */\n  0x00\n    /* \"#utility.yul\":970:971   */\n  dup1\n    /* \"#utility.yul\":963:975   */\n  revert\n    /* \"#utility.yul\":927:929   */\ntag_37:\n    /* \"#utility.yul\":1001:1075   */\n  tag_38\n    /* \"#utility.yul\":1067:1074   */\n  dup6\n    /* \"#utility.yul\":1058:1064   */\n  dup3\n    /* \"#utility.yul\":1047:1056   */\n  dup7\n    /* \"#utility.yul\":1043:1065   */\n  add\n    /* \"#utility.yul\":1001:1075   */\n  tag_31\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":991:1075   */\n  swap3\n  pop\n    /* \"#utility.yul\":861:1085   */\n  pop\n    /* \"#utility.yul\":1145:1147   */\n  0x20\n    /* \"#utility.yul\":1134:1143   */\n  dup4\n    /* \"#utility.yul\":1130:1148   */\n  add\n    /* \"#utility.yul\":1124:1149   */\n  mload\n    /* \"#utility.yul\":1176:1194   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1168:1174   */\n  dup2\n    /* \"#utility.yul\":1165:1195   */\n  gt\n    /* \"#utility.yul\":1162:1164   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1208:1209   */\n  0x00\n    /* \"#utility.yul\":1205:1206   */\n  dup1\n    /* \"#utility.yul\":1198:1210   */\n  revert\n    /* \"#utility.yul\":1162:1164   */\ntag_39:\n    /* \"#utility.yul\":1236:1310   */\n  tag_40\n    /* \"#utility.yul\":1302:1309   */\n  dup6\n    /* \"#utility.yul\":1293:1299   */\n  dup3\n    /* \"#utility.yul\":1282:1291   */\n  dup7\n    /* \"#utility.yul\":1278:1300   */\n  add\n    /* \"#utility.yul\":1236:1310   */\n  tag_31\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1226:1310   */\n  swap2\n  pop\n    /* \"#utility.yul\":1095:1320   */\n  pop\n    /* \"#utility.yul\":789:1327   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1333:1462   */\ntag_27:\n    /* \"#utility.yul\":1367:1373   */\n  0x00\n    /* \"#utility.yul\":1394:1414   */\n  tag_42\n  tag_43\n  jump\t// in\ntag_42:\n    /* \"#utility.yul\":1384:1414   */\n  swap1\n  pop\n    /* \"#utility.yul\":1423:1456   */\n  tag_44\n    /* \"#utility.yul\":1451:1455   */\n  dup3\n    /* \"#utility.yul\":1443:1449   */\n  dup3\n    /* \"#utility.yul\":1423:1456   */\n  tag_45\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1374:1462   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1468:1543   */\ntag_43:\n    /* \"#utility.yul\":1501:1507   */\n  0x00\n    /* \"#utility.yul\":1534:1536   */\n  0x40\n    /* \"#utility.yul\":1528:1537   */\n  mload\n    /* \"#utility.yul\":1518:1537   */\n  swap1\n  pop\n    /* \"#utility.yul\":1508:1543   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":1549:1857   */\ntag_26:\n    /* \"#utility.yul\":1611:1615   */\n  0x00\n    /* \"#utility.yul\":1701:1719   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1693:1699   */\n  dup3\n    /* \"#utility.yul\":1690:1720   */\n  gt\n    /* \"#utility.yul\":1687:1689   */\n  iszero\n  tag_48\n  jumpi\n    /* \"#utility.yul\":1723:1741   */\n  tag_49\n  tag_50\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":1687:1689   */\ntag_48:\n    /* \"#utility.yul\":1761:1790   */\n  tag_51\n    /* \"#utility.yul\":1783:1789   */\n  dup3\n    /* \"#utility.yul\":1761:1790   */\n  tag_52\n  jump\t// in\ntag_51:\n    /* \"#utility.yul\":1753:1790   */\n  swap1\n  pop\n    /* \"#utility.yul\":1845:1849   */\n  0x20\n    /* \"#utility.yul\":1839:1843   */\n  dup2\n    /* \"#utility.yul\":1835:1850   */\n  add\n    /* \"#utility.yul\":1827:1850   */\n  swap1\n  pop\n    /* \"#utility.yul\":1616:1857   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1863:2170   */\ntag_30:\n    /* \"#utility.yul\":1931:1932   */\n  0x00\n    /* \"#utility.yul\":1941:2054   */\ntag_54:\n    /* \"#utility.yul\":1955:1961   */\n  dup4\n    /* \"#utility.yul\":1952:1953   */\n  dup2\n    /* \"#utility.yul\":1949:1962   */\n  lt\n    /* \"#utility.yul\":1941:2054   */\n  iszero\n  tag_56\n  jumpi\n    /* \"#utility.yul\":2040:2041   */\n  dup1\n    /* \"#utility.yul\":2035:2038   */\n  dup3\n    /* \"#utility.yul\":2031:2042   */\n  add\n    /* \"#utility.yul\":2025:2043   */\n  mload\n    /* \"#utility.yul\":2021:2022   */\n  dup2\n    /* \"#utility.yul\":2016:2019   */\n  dup5\n    /* \"#utility.yul\":2012:2023   */\n  add\n    /* \"#utility.yul\":2005:2044   */\n  mstore\n    /* \"#utility.yul\":1977:1979   */\n  0x20\n    /* \"#utility.yul\":1974:1975   */\n  dup2\n    /* \"#utility.yul\":1970:1980   */\n  add\n    /* \"#utility.yul\":1965:1980   */\n  swap1\n  pop\n    /* \"#utility.yul\":1941:2054   */\n  jump(tag_54)\ntag_56:\n    /* \"#utility.yul\":2072:2078   */\n  dup4\n    /* \"#utility.yul\":2069:2070   */\n  dup2\n    /* \"#utility.yul\":2066:2079   */\n  gt\n    /* \"#utility.yul\":2063:2065   */\n  iszero\n  tag_57\n  jumpi\n    /* \"#utility.yul\":2152:2153   */\n  0x00\n    /* \"#utility.yul\":2143:2149   */\n  dup5\n    /* \"#utility.yul\":2138:2141   */\n  dup5\n    /* \"#utility.yul\":2134:2150   */\n  add\n    /* \"#utility.yul\":2127:2154   */\n  mstore\n    /* \"#utility.yul\":2063:2065   */\ntag_57:\n    /* \"#utility.yul\":1912:2170   */\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2176:2496   */\ntag_11:\n    /* \"#utility.yul\":2220:2226   */\n  0x00\n    /* \"#utility.yul\":2257:2258   */\n  0x02\n    /* \"#utility.yul\":2251:2255   */\n  dup3\n    /* \"#utility.yul\":2247:2259   */\n  div\n    /* \"#utility.yul\":2237:2259   */\n  swap1\n  pop\n    /* \"#utility.yul\":2304:2305   */\n  0x01\n    /* \"#utility.yul\":2298:2302   */\n  dup3\n    /* \"#utility.yul\":2294:2306   */\n  and\n    /* \"#utility.yul\":2325:2343   */\n  dup1\n    /* \"#utility.yul\":2315:2317   */\n  tag_59\n  jumpi\n    /* \"#utility.yul\":2381:2385   */\n  0x7f\n    /* \"#utility.yul\":2373:2379   */\n  dup3\n    /* \"#utility.yul\":2369:2386   */\n  and\n    /* \"#utility.yul\":2359:2386   */\n  swap2\n  pop\n    /* \"#utility.yul\":2315:2317   */\ntag_59:\n    /* \"#utility.yul\":2443:2445   */\n  0x20\n    /* \"#utility.yul\":2435:2441   */\n  dup3\n    /* \"#utility.yul\":2432:2446   */\n  lt\n    /* \"#utility.yul\":2412:2430   */\n  dup2\n    /* \"#utility.yul\":2409:2447   */\n  eq\n    /* \"#utility.yul\":2406:2408   */\n  iszero\n  tag_60\n  jumpi\n    /* \"#utility.yul\":2462:2480   */\n  tag_61\n  tag_62\n  jump\t// in\ntag_61:\n    /* \"#utility.yul\":2406:2408   */\ntag_60:\n    /* \"#utility.yul\":2227:2496   */\n  pop\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2502:2783   */\ntag_45:\n    /* \"#utility.yul\":2585:2612   */\n  tag_64\n    /* \"#utility.yul\":2607:2611   */\n  dup3\n    /* \"#utility.yul\":2585:2612   */\n  tag_52\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":2577:2583   */\n  dup2\n    /* \"#utility.yul\":2573:2613   */\n  add\n    /* \"#utility.yul\":2715:2721   */\n  dup2\n    /* \"#utility.yul\":2703:2713   */\n  dup2\n    /* \"#utility.yul\":2700:2722   */\n  lt\n    /* \"#utility.yul\":2679:2697   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":2667:2677   */\n  dup3\n    /* \"#utility.yul\":2664:2698   */\n  gt\n    /* \"#utility.yul\":2661:2723   */\n  or\n    /* \"#utility.yul\":2658:2660   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2726:2744   */\n  tag_66\n  tag_50\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":2658:2660   */\ntag_65:\n    /* \"#utility.yul\":2766:2776   */\n  dup1\n    /* \"#utility.yul\":2762:2764   */\n  0x40\n    /* \"#utility.yul\":2755:2777   */\n  mstore\n    /* \"#utility.yul\":2545:2783   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2789:2969   */\ntag_62:\n    /* \"#utility.yul\":2837:2914   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":2834:2835   */\n  0x00\n    /* \"#utility.yul\":2827:2915   */\n  mstore\n    /* \"#utility.yul\":2934:2938   */\n  0x22\n    /* \"#utility.yul\":2931:2932   */\n  0x04\n    /* \"#utility.yul\":2924:2939   */\n  mstore\n    /* \"#utility.yul\":2958:2962   */\n  0x24\n    /* \"#utility.yul\":2955:2956   */\n  0x00\n    /* \"#utility.yul\":2948:2963   */\n  revert\n    /* \"#utility.yul\":2975:3155   */\ntag_50:\n    /* \"#utility.yul\":3023:3100   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3020:3021   */\n  0x00\n    /* \"#utility.yul\":3013:3101   */\n  mstore\n    /* \"#utility.yul\":3120:3124   */\n  0x41\n    /* \"#utility.yul\":3117:3118   */\n  0x04\n    /* \"#utility.yul\":3110:3125   */\n  mstore\n    /* \"#utility.yul\":3144:3148   */\n  0x24\n    /* \"#utility.yul\":3141:3142   */\n  0x00\n    /* \"#utility.yul\":3134:3149   */\n  revert\n    /* \"#utility.yul\":3161:3263   */\ntag_52:\n    /* \"#utility.yul\":3202:3208   */\n  0x00\n    /* \"#utility.yul\":3253:3255   */\n  0x1f\n    /* \"#utility.yul\":3249:3256   */\n  not\n    /* \"#utility.yul\":3244:3246   */\n  0x1f\n    /* \"#utility.yul\":3237:3242   */\n  dup4\n    /* \"#utility.yul\":3233:3247   */\n  add\n    /* \"#utility.yul\":3229:3257   */\n  and\n    /* \"#utility.yul\":3219:3257   */\n  swap1\n  pop\n    /* \"#utility.yul\":3209:3263   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":628:16955  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":628:16955  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x6352211e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_5:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_6:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n    tag_34:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n    tag_7:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n    tag_8:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_43:\n      tag_44\n      jump\t// in\n    tag_42:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_9:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_10:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n    tag_11:\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_12:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n    tag_13:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n    tag_62:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_14:\n      tag_66\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_67\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_67:\n      tag_68\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_69\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_15:\n      tag_70\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_71\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      tag_73\n      jump\t// in\n    tag_70:\n      mload(0x40)\n      tag_74\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_21:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1672:1676  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1722:1747  type(IERC721).interfaceId */\n      0x80ac58cd00000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1747  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1718  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1747  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1811  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_76\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1778:1811  type(IERC721Metadata).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1763:1811  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1763:1774  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1763:1811  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1811  interfaceId == type(IERC721).interfaceId ||... */\n    tag_76:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1863  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_77\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1827:1863  super.supportsInterface(interfaceId) */\n      tag_78\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1851:1862  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1827:1850  super.supportsInterface */\n      tag_79\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1827:1863  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_78:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1707:1863  interfaceId == type(IERC721).interfaceId ||... */\n    tag_77:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1688:1863  return... */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n    tag_25:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2525:2538  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2557:2562  _name */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2550:2562  return _name */\n      dup1\n      sload\n      tag_81\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_83\n      swap1\n      tag_82\n      jump\t// in\n    tag_83:\n      dup1\n      iszero\n      tag_84\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_85\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_84)\n    tag_85:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_86:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_86\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_84:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_31:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4011:4018  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4030:4053  _requireMinted(tokenId) */\n      tag_88\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4045:4052  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4030:4044  _requireMinted */\n      tag_89\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4030:4053  _requireMinted(tokenId) */\n      jump\t// in\n    tag_88:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4071:4086  _tokenApprovals */\n      0x04\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4071:4095  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4087:4094  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4071:4095  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4064:4095  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_37:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3548:3561  address owner */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3564:3587  ERC721.ownerOf(tokenId) */\n      tag_91\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3579:3586  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3564:3578  ERC721.ownerOf */\n      tag_47\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3564:3587  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_91:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3548:3587  address owner = ERC721.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3611:3616  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3605:3616  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3605:3607  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3605:3616  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3597:3654  require(to != owner, \"ERC721: approval to current owner\") */\n      tag_92\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_93\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_92:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3702:3707  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3707  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3698  _msgSender() */\n      tag_95\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3696  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3698  _msgSender() */\n      jump\t// in\n    tag_95:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3707  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3748  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n      dup1\n      tag_97\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3711:3748  isApprovedForAll(owner, _msgSender()) */\n      tag_98\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3728:3733  owner */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3735:3747  _msgSender() */\n      tag_99\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3735:3745  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3735:3747  _msgSender() */\n      jump\t// in\n    tag_99:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3711:3727  isApprovedForAll */\n      tag_73\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3711:3748  isApprovedForAll(owner, _msgSender()) */\n      jump\t// in\n    tag_98:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3686:3748  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n    tag_97:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3665:3835  require(... */\n      tag_100\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_101\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_100:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3846:3867  _approve(to, tokenId) */\n      tag_103\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3855:3857  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3859:3866  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3846:3854  _approve */\n      tag_104\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3846:3867  _approve(to, tokenId) */\n      jump\t// in\n    tag_103:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n    tag_41:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4801:4842  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_106\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4820:4832  _msgSender() */\n      tag_107\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4820:4830  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4820:4832  _msgSender() */\n      jump\t// in\n    tag_107:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4834:4841  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4801:4819  _isApprovedOrOwner */\n      tag_108\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4801:4842  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_106:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4793:4892  require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4903:4931  _transfer(from, to, tokenId) */\n      tag_112\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4913:4917  from */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4919:4921  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4923:4930  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4903:4912  _transfer */\n      tag_113\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4903:4931  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_112:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n    tag_44:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_115\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5154:5158  from */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5160:5162  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5164:5171  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5137:5153  safeTransferFrom */\n      tag_65\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n    tag_115:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_47:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2262:2269  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2281:2294  address owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2297:2314  _ownerOf(tokenId) */\n      tag_117\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2306:2313  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2297:2305  _ownerOf */\n      tag_118\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2297:2314  _ownerOf(tokenId) */\n      jump\t// in\n    tag_117:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2281:2314  address owner = _ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2349:2350  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2332:2351  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2332:2337  owner */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2332:2351  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2324:2380  require(owner != address(0), \"ERC721: invalid token ID\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2397:2402  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2390:2402  return owner */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_52:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2001:2008  uint256 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2045:2046  0 */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2028:2047  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2028:2033  owner */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2028:2047  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2020:2093  require(owner != address(0), \"ERC721: address zero is not a valid owner\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2110:2119  _balances */\n      0x03\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2110:2126  _balances[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2120:2125  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2110:2126  _balances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2103:2126  return _balances[owner] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n    tag_56:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2689:2702  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2721:2728  _symbol */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2714:2728  return _symbol */\n      dup1\n      sload\n      tag_127\n      swap1\n      tag_82\n      jump\t// in\n    tag_127:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_128\n      swap1\n      tag_82\n      jump\t// in\n    tag_128:\n      dup1\n      iszero\n      tag_129\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_130\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_129)\n    tag_130:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_131:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_131\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_61:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4263:4315  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_133\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4282:4294  _msgSender() */\n      tag_134\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4282:4292  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4282:4294  _msgSender() */\n      jump\t// in\n    tag_134:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4296:4304  operator */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4306:4314  approved */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4263:4281  _setApprovalForAll */\n      tag_135\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4263:4315  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n    tag_133:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n    tag_65:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5417:5458  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_137\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5436:5448  _msgSender() */\n      tag_138\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5436:5446  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5436:5448  _msgSender() */\n      jump\t// in\n    tag_138:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5450:5457  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5417:5435  _isApprovedOrOwner */\n      tag_108\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5417:5458  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_137:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5409:5508  require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_111\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_139:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5518:5556  _safeTransfer(from, to, tokenId, data) */\n      tag_141\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5532:5536  from */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5538:5540  to */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5542:5549  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5551:5555  data */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5518:5531  _safeTransfer */\n      tag_142\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5518:5556  _safeTransfer(from, to, tokenId, data) */\n      jump\t// in\n    tag_141:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_68:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2874:2887  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2899:2922  _requireMinted(tokenId) */\n      tag_144\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2914:2921  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2899:2913  _requireMinted */\n      tag_89\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2899:2922  _requireMinted(tokenId) */\n      jump\t// in\n    tag_144:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2933:2954  string memory baseURI */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2957:2967  _baseURI() */\n      tag_145\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2957:2965  _baseURI */\n      tag_146\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2957:2967  _baseURI() */\n      jump\t// in\n    tag_145:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2933:2967  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3008:3009  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2990:2997  baseURI */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2984:3005  bytes(baseURI).length */\n      mload\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2984:3009  bytes(baseURI).length > 0 */\n      gt\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2984:3070  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      tag_147\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_148)\n    tag_147:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3036:3043  baseURI */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3045:3063  tokenId.toString() */\n      tag_149\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3045:3052  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3045:3061  tokenId.toString */\n      tag_150\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3045:3063  tokenId.toString() */\n      jump\t// in\n    tag_149:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3019:3064  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_151\n      swap3\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2984:3070  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n    tag_148:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2977:3070  return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_73:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4485:4489  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4508:4526  _operatorApprovals */\n      0x05\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4508:4533  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4527:4532  owner */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4508:4533  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4508:4543  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4534:4542  operator */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4508:4543  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4501:4543  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_79:\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":914:918  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":952:977  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:948  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":930:977  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13466:13599  function _requireMinted(uint256 tokenId) internal view virtual {... */\n    tag_89:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13547:13563  _exists(tokenId) */\n      tag_156\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13555:13562  tokenId */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13547:13554  _exists */\n      tag_157\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13547:13563  _exists(tokenId) */\n      jump\t// in\n    tag_156:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13539:13592  require(_exists(tokenId), \"ERC721: invalid token ID\") */\n      tag_158\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_159\n      swap1\n      tag_121\n      jump\t// in\n    tag_159:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_158:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13466:13599  function _requireMinted(uint256 tokenId) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_96:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \".deps/npm/@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12768:12939  function _approve(address to, uint256 tokenId) internal virtual {... */\n    tag_104:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12869:12871  to */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12842:12857  _tokenApprovals */\n      0x04\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12842:12866  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12858:12865  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12842:12866  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12842:12871  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12924:12931  tokenId */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12920:12922  to */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12886:12932  Approval(ERC721.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12895:12918  ERC721.ownerOf(tokenId) */\n      tag_162\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12910:12917  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12895:12909  ERC721.ownerOf */\n      tag_47\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12895:12918  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_162:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12886:12932  Approval(ERC721.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12768:12939  function _approve(address to, uint256 tokenId) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7540:7801  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_108:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7633:7637  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7649:7662  address owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7665:7688  ERC721.ownerOf(tokenId) */\n      tag_164\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7680:7687  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7665:7679  ERC721.ownerOf */\n      tag_47\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7665:7688  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_164:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7649:7688  address owner = ERC721.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7717:7722  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7722  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7713  spender */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7722  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7758  spender == owner || isApprovedForAll(owner, spender) */\n      dup1\n      tag_165\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7726:7758  isApprovedForAll(owner, spender) */\n      tag_166\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7743:7748  owner */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7750:7757  spender */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7726:7742  isApprovedForAll */\n      tag_73\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7726:7758  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_166:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7758  spender == owner || isApprovedForAll(owner, spender) */\n    tag_165:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7793  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n      dup1\n      tag_167\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7786:7793  spender */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7762:7793  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7762:7782  getApproved(tokenId) */\n      tag_168\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7774:7781  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7762:7773  getApproved */\n      tag_31\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7762:7782  getApproved(tokenId) */\n      jump\t// in\n    tag_168:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7762:7793  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7706:7793  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n    tag_167:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7698:7794  return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender) */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7540:7801  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11423:12656  function _transfer(... */\n    tag_113:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11577:11581  from */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11550:11581  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11550:11573  ERC721.ownerOf(tokenId) */\n      tag_170\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11565:11572  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11550:11564  ERC721.ownerOf */\n      tag_47\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11550:11573  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_170:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11550:11581  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11542:11623  require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_171\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_172\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_171:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11655:11656  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11641:11657  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11641:11643  to */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11641:11657  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11633:11698  require(to != address(0), \"ERC721: transfer to the zero address\") */\n      tag_174\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_175\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_174:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11709:11751  _beforeTokenTransfer(from, to, tokenId, 1) */\n      tag_177\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11730:11734  from */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11736:11738  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11740:11747  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11749:11750  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11709:11729  _beforeTokenTransfer */\n      tag_178\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11709:11751  _beforeTokenTransfer(from, to, tokenId, 1) */\n      jump\t// in\n    tag_177:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11878:11882  from */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11851:11882  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11851:11874  ERC721.ownerOf(tokenId) */\n      tag_179\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11866:11873  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11851:11865  ERC721.ownerOf */\n      tag_47\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11851:11874  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_179:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11851:11882  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11843:11924  require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_181\n      swap1\n      tag_173\n      jump\t// in\n    tag_181:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_180:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11993:12008  _tokenApprovals */\n      0x04\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11993:12017  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12009:12016  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11993:12017  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11986:12017  delete _tokenApprovals[tokenId] */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12480:12481  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12461:12470  _balances */\n      0x03\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12461:12476  _balances[from] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12471:12475  from */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12461:12476  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12461:12481  _balances[from] -= 1 */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12512:12513  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12495:12504  _balances */\n      0x03\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12495:12508  _balances[to] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12505:12507  to */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12495:12508  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12495:12513  _balances[to] += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12552:12554  to */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12533:12540  _owners */\n      0x02\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12533:12549  _owners[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12541:12548  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12533:12549  _owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12533:12554  _owners[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12589:12596  tokenId */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12585:12587  to */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12570:12597  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12579:12583  from */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12570:12597  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12608:12649  _afterTokenTransfer(from, to, tokenId, 1) */\n      tag_182\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12628:12632  from */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12634:12636  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12638:12645  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12647:12648  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12608:12627  _afterTokenTransfer */\n      tag_183\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":12608:12649  _afterTokenTransfer(from, to, tokenId, 1) */\n      jump\t// in\n    tag_182:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":11423:12656  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6838:6953  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_118:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6904:6911  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6930:6937  _owners */\n      0x02\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6930:6946  _owners[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6938:6945  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6930:6946  _owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6923:6946  return _owners[tokenId] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6838:6953  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13075:13382  function _setApprovalForAll(... */\n    tag_135:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13225:13233  operator */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13216:13233  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13216:13221  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13216:13233  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13208:13263  require(owner != operator, \"ERC721: approve to caller\") */\n      tag_186\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_187\n      swap1\n      tag_188\n      jump\t// in\n    tag_187:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_186:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13311:13319  approved */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13291  _operatorApprovals */\n      0x05\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13298  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13292:13297  owner */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13298  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13308  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13299:13307  operator */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13308  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13273:13319  _operatorApprovals[owner][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13356:13364  operator */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13334:13375  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13349:13354  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13334:13375  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13366:13374  approved */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13334:13375  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      tag_189\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_189:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":13075:13382  function _setApprovalForAll(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6424:6729  function _safeTransfer(... */\n    tag_142:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6574:6602  _transfer(from, to, tokenId) */\n      tag_191\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6584:6588  from */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6590:6592  to */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6594:6601  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6574:6583  _transfer */\n      tag_113\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6574:6602  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_191:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6620:6667  _checkOnERC721Received(from, to, tokenId, data) */\n      tag_192\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6643:6647  from */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6649:6651  to */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6653:6660  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6662:6666  data */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6620:6642  _checkOnERC721Received */\n      tag_193\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6620:6667  _checkOnERC721Received(from, to, tokenId, data) */\n      jump\t// in\n    tag_192:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6612:6722  require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\") */\n      tag_194\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_195\n      swap1\n      tag_196\n      jump\t// in\n    tag_195:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_194:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":6424:6729  function _safeTransfer(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3319:3411  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_146:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3370:3383  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3395:3404  return \"\" */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":3319:3411  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_150:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":471:484  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":520:534  uint256 length */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":557:558  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      tag_199\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":548:553  value */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":537:547  Math.log10 */\n      tag_200\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      jump\t// in\n    tag_199:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":537:558  Math.log10(value) + 1 */\n      add\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":520:558  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":572:592  string memory buffer */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":606:612  length */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":595:613  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_201\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_201:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_202\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_202:\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":572:613  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":627:638  uint256 ptr */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":753:759  length */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":749:751  32 */\n      0x20\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":745:760  add(32, length) */\n      add\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":737:743  buffer */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":733:761  add(buffer, add(32, length)) */\n      add\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":726:761  ptr := add(buffer, add(32, length)) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n    tag_203:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":795:799  true */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n      iszero\n      tag_204\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":819:824  ptr-- */\n      dup1\n      dup1\n      0x01\n      swap1\n      sub\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":958:966  _SYMBOLS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":946:951  value */\n      dup7\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":942:956  mod(value, 10) */\n      mod\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":937:967  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":932:935  ptr */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":924:968  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1012:1014  10 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1003:1014  value /= 10 */\n      dup6\n      dup2\n      tag_205\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_205:\n      div\n      swap5\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1045:1046  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1036:1041  value */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1036:1046  value == 0 */\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n      iszero\n      tag_206\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1048:1053  break */\n      jump(tag_204)\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n    tag_206:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n      jump(tag_203)\n    tag_204:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1088:1094  buffer */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":1081:1094  return buffer */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7256:7382  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_157:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7321:7325  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7373:7374  0 */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7344:7375  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7344:7361  _ownerOf(tokenId) */\n      tag_208\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7353:7360  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7344:7352  _ownerOf */\n      tag_118\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7344:7361  _ownerOf(tokenId) */\n      jump\t// in\n    tag_208:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7344:7375  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7337:7375  return _ownerOf(tokenId) != address(0) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":7256:7382  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15698:16094  function _beforeTokenTransfer(... */\n    tag_178:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15882:15883  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15870:15879  batchSize */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15870:15883  batchSize > 1 */\n      gt\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15866:16088  if (batchSize > 1) {... */\n      iszero\n      tag_210\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15919:15920  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15903:15921  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15903:15907  from */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15903:15921  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15899:15984  if (from != address(0)) {... */\n      tag_211\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15960:15969  batchSize */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15941:15950  _balances */\n      0x03\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15941:15956  _balances[from] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15951:15955  from */\n      dup7\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15941:15956  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15941:15969  _balances[from] -= batchSize */\n      dup3\n      dup3\n      sload\n      tag_212\n      swap2\n      swap1\n      tag_213\n      jump\t// in\n    tag_212:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15899:15984  if (from != address(0)) {... */\n    tag_211:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16015:16016  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16001:16017  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16001:16003  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16001:16017  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15997:16078  if (to != address(0)) {... */\n      tag_214\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16054:16063  batchSize */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16037:16046  _balances */\n      0x03\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16037:16050  _balances[to] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16047:16049  to */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16037:16050  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16037:16063  _balances[to] += batchSize */\n      dup3\n      dup3\n      sload\n      tag_215\n      swap2\n      swap1\n      tag_216\n      jump\t// in\n    tag_215:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15997:16078  if (to != address(0)) {... */\n    tag_214:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15866:16088  if (batchSize > 1) {... */\n    tag_210:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":15698:16094  function _beforeTokenTransfer(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":16800:16953  function _afterTokenTransfer(... */\n    tag_183:\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14151:14982  function _checkOnERC721Received(... */\n    tag_193:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14300:14304  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14320:14335  to.isContract() */\n      tag_219\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14320:14322  to */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14320:14333  to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_220\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14320:14335  to.isContract() */\n      jump\t// in\n    tag_219:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14316:14976  if (to.isContract()) {... */\n      iszero\n      tag_221\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14371:14373  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14355:14391  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14392:14404  _msgSender() */\n      tag_222\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14392:14402  _msgSender */\n      tag_96\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14392:14404  _msgSender() */\n      jump\t// in\n    tag_222:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14406:14410  from */\n      dup8\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14412:14419  tokenId */\n      dup7\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14421:14425  data */\n      dup7\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14355:14426  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_223\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_223:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_225\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_225:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_226\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_227\n      swap2\n      swap1\n      tag_228\n      jump\t// in\n    tag_227:\n      0x01\n    tag_226:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14351:14924  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n      tag_229\n      jumpi\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_234\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_233)\n    tag_234:\n      0x60\n      swap2\n      pop\n    tag_233:\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14610:14611  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14593:14599  reason */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14593:14606  reason.length */\n      mload\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14593:14611  reason.length == 0 */\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14589:14910  if (reason.length == 0) {... */\n      iszero\n      tag_235\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14635:14695  revert(\"ERC721: transfer to non ERC721Receiver implementer\") */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_236\n      swap1\n      tag_196\n      jump\t// in\n    tag_236:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14589:14910  if (reason.length == 0) {... */\n    tag_235:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14862:14868  reason */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14856:14869  mload(reason) */\n      mload\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14847:14853  reason */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14843:14845  32 */\n      0x20\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14839:14854  add(32, reason) */\n      add\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14832:14870  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14351:14924  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n    tag_229:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14486:14527  IERC721Receiver.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14476:14527  retval == IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14476:14482  retval */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14476:14527  retval == IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14469:14527  return retval == IERC721Receiver.onERC721Received.selector */\n      swap2\n      pop\n      pop\n      jump(tag_218)\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14316:14976  if (to.isContract()) {... */\n    tag_221:\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14961:14965  true */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14954:14965  return true */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":14151:14982  function _checkOnERC721Received(... */\n    tag_218:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_200:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9942:9949  uint256 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9961:9975  uint256 result */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9978:9979  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9961:9979  uint256 result = 0 */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10026:10032  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10017:10022  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10017:10032  value >= 10**64 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n      tag_241\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10061:10067  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10052:10067  value /= 10**64 */\n      dup4\n      dup2\n      tag_242\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_242:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10095:10097  64 */\n      0x40\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10085:10097  result += 64 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n    tag_241:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10138:10144  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10129:10134  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10129:10144  value >= 10**32 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n      tag_243\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10173:10179  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10164:10179  value /= 10**32 */\n      dup4\n      dup2\n      tag_244\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_244:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10207:10209  32 */\n      0x20\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10197:10209  result += 32 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n    tag_243:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10250:10256  10**16 */\n      0x2386f26fc10000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10241:10246  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10241:10256  value >= 10**16 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n      tag_245\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10285:10291  10**16 */\n      0x2386f26fc10000\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10276:10291  value /= 10**16 */\n      dup4\n      dup2\n      tag_246\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_246:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10319:10321  16 */\n      0x10\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10309:10321  result += 16 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n    tag_245:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10362:10367  10**8 */\n      0x05f5e100\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10353:10358  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10353:10367  value >= 10**8 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n      tag_247\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10396:10401  10**8 */\n      0x05f5e100\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10387:10401  value /= 10**8 */\n      dup4\n      dup2\n      tag_248\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_248:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10429:10430  8 */\n      0x08\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10419:10430  result += 8 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n    tag_247:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10471:10476  10**4 */\n      0x2710\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10462:10467  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10462:10476  value >= 10**4 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n      tag_249\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10505:10510  10**4 */\n      0x2710\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10496:10510  value /= 10**4 */\n      dup4\n      dup2\n      tag_250\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_250:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10538:10539  4 */\n      0x04\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10528:10539  result += 4 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n    tag_249:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10580:10585  10**2 */\n      0x64\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10571:10576  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10571:10585  value >= 10**2 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n      tag_251\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10614:10619  10**2 */\n      0x64\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10605:10619  value /= 10**2 */\n      dup4\n      dup2\n      tag_252\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_252:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10647:10648  2 */\n      0x02\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10637:10648  result += 2 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n    tag_251:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10689:10694  10**1 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10680:10685  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10680:10694  value >= 10**1 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10676:10740  if (value >= 10**1) {... */\n      tag_253\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10724:10725  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10714:10725  result += 1 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10676:10740  if (value >= 10**1) {... */\n    tag_253:\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10766:10772  result */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":10759:10772  return result */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_220:\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:350   */\n    tag_256:\n        /* \"#utility.yul\":84:89   */\n      0x00\n        /* \"#utility.yul\":109:174   */\n      tag_258\n        /* \"#utility.yul\":125:173   */\n      tag_259\n        /* \"#utility.yul\":166:172   */\n      dup5\n        /* \"#utility.yul\":125:173   */\n      tag_260\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":109:174   */\n      tag_261\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":100:174   */\n      swap1\n      pop\n        /* \"#utility.yul\":197:203   */\n      dup3\n        /* \"#utility.yul\":190:195   */\n      dup2\n        /* \"#utility.yul\":183:204   */\n      mstore\n        /* \"#utility.yul\":235:239   */\n      0x20\n        /* \"#utility.yul\":228:233   */\n      dup2\n        /* \"#utility.yul\":224:240   */\n      add\n        /* \"#utility.yul\":273:276   */\n      dup5\n        /* \"#utility.yul\":264:270   */\n      dup5\n        /* \"#utility.yul\":259:262   */\n      dup5\n        /* \"#utility.yul\":255:271   */\n      add\n        /* \"#utility.yul\":252:277   */\n      gt\n        /* \"#utility.yul\":249:251   */\n      iszero\n      tag_262\n      jumpi\n        /* \"#utility.yul\":290:291   */\n      0x00\n        /* \"#utility.yul\":287:288   */\n      dup1\n        /* \"#utility.yul\":280:292   */\n      revert\n        /* \"#utility.yul\":249:251   */\n    tag_262:\n        /* \"#utility.yul\":303:344   */\n      tag_263\n        /* \"#utility.yul\":337:343   */\n      dup5\n        /* \"#utility.yul\":332:335   */\n      dup3\n        /* \"#utility.yul\":327:330   */\n      dup6\n        /* \"#utility.yul\":303:344   */\n      tag_264\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":90:350   */\n      pop\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":356:495   */\n    tag_265:\n        /* \"#utility.yul\":402:407   */\n      0x00\n        /* \"#utility.yul\":440:446   */\n      dup2\n        /* \"#utility.yul\":427:447   */\n      calldataload\n        /* \"#utility.yul\":418:447   */\n      swap1\n      pop\n        /* \"#utility.yul\":456:489   */\n      tag_267\n        /* \"#utility.yul\":483:488   */\n      dup2\n        /* \"#utility.yul\":456:489   */\n      tag_268\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":408:495   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":501:634   */\n    tag_269:\n        /* \"#utility.yul\":544:549   */\n      0x00\n        /* \"#utility.yul\":582:588   */\n      dup2\n        /* \"#utility.yul\":569:589   */\n      calldataload\n        /* \"#utility.yul\":560:589   */\n      swap1\n      pop\n        /* \"#utility.yul\":598:628   */\n      tag_271\n        /* \"#utility.yul\":622:627   */\n      dup2\n        /* \"#utility.yul\":598:628   */\n      tag_272\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":550:634   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":640:777   */\n    tag_273:\n        /* \"#utility.yul\":685:690   */\n      0x00\n        /* \"#utility.yul\":723:729   */\n      dup2\n        /* \"#utility.yul\":710:730   */\n      calldataload\n        /* \"#utility.yul\":701:730   */\n      swap1\n      pop\n        /* \"#utility.yul\":739:771   */\n      tag_275\n        /* \"#utility.yul\":765:770   */\n      dup2\n        /* \"#utility.yul\":739:771   */\n      tag_276\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":691:777   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":783:924   */\n    tag_277:\n        /* \"#utility.yul\":839:844   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup2\n        /* \"#utility.yul\":864:877   */\n      mload\n        /* \"#utility.yul\":855:877   */\n      swap1\n      pop\n        /* \"#utility.yul\":886:918   */\n      tag_279\n        /* \"#utility.yul\":912:917   */\n      dup2\n        /* \"#utility.yul\":886:918   */\n      tag_276\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":845:924   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":943:1214   */\n    tag_280:\n        /* \"#utility.yul\":998:1003   */\n      0x00\n        /* \"#utility.yul\":1047:1050   */\n      dup3\n        /* \"#utility.yul\":1040:1044   */\n      0x1f\n        /* \"#utility.yul\":1032:1038   */\n      dup4\n        /* \"#utility.yul\":1028:1045   */\n      add\n        /* \"#utility.yul\":1024:1051   */\n      slt\n        /* \"#utility.yul\":1014:1016   */\n      tag_282\n      jumpi\n        /* \"#utility.yul\":1065:1066   */\n      0x00\n        /* \"#utility.yul\":1062:1063   */\n      dup1\n        /* \"#utility.yul\":1055:1067   */\n      revert\n        /* \"#utility.yul\":1014:1016   */\n    tag_282:\n        /* \"#utility.yul\":1105:1111   */\n      dup2\n        /* \"#utility.yul\":1092:1112   */\n      calldataload\n        /* \"#utility.yul\":1130:1208   */\n      tag_283\n        /* \"#utility.yul\":1204:1207   */\n      dup5\n        /* \"#utility.yul\":1196:1202   */\n      dup3\n        /* \"#utility.yul\":1189:1193   */\n      0x20\n        /* \"#utility.yul\":1181:1187   */\n      dup7\n        /* \"#utility.yul\":1177:1194   */\n      add\n        /* \"#utility.yul\":1130:1208   */\n      tag_256\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":1121:1208   */\n      swap2\n      pop\n        /* \"#utility.yul\":1004:1214   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1220:1359   */\n    tag_284:\n        /* \"#utility.yul\":1266:1271   */\n      0x00\n        /* \"#utility.yul\":1304:1310   */\n      dup2\n        /* \"#utility.yul\":1291:1311   */\n      calldataload\n        /* \"#utility.yul\":1282:1311   */\n      swap1\n      pop\n        /* \"#utility.yul\":1320:1353   */\n      tag_286\n        /* \"#utility.yul\":1347:1352   */\n      dup2\n        /* \"#utility.yul\":1320:1353   */\n      tag_287\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":1272:1359   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1365:1627   */\n    tag_51:\n        /* \"#utility.yul\":1424:1430   */\n      0x00\n        /* \"#utility.yul\":1473:1475   */\n      0x20\n        /* \"#utility.yul\":1461:1470   */\n      dup3\n        /* \"#utility.yul\":1452:1459   */\n      dup5\n        /* \"#utility.yul\":1448:1471   */\n      sub\n        /* \"#utility.yul\":1444:1476   */\n      slt\n        /* \"#utility.yul\":1441:1443   */\n      iszero\n      tag_289\n      jumpi\n        /* \"#utility.yul\":1489:1490   */\n      0x00\n        /* \"#utility.yul\":1486:1487   */\n      dup1\n        /* \"#utility.yul\":1479:1491   */\n      revert\n        /* \"#utility.yul\":1441:1443   */\n    tag_289:\n        /* \"#utility.yul\":1532:1533   */\n      0x00\n        /* \"#utility.yul\":1557:1610   */\n      tag_290\n        /* \"#utility.yul\":1602:1609   */\n      dup5\n        /* \"#utility.yul\":1593:1599   */\n      dup3\n        /* \"#utility.yul\":1582:1591   */\n      dup6\n        /* \"#utility.yul\":1578:1600   */\n      add\n        /* \"#utility.yul\":1557:1610   */\n      tag_265\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":1547:1610   */\n      swap2\n      pop\n        /* \"#utility.yul\":1503:1620   */\n      pop\n        /* \"#utility.yul\":1431:1627   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1633:2040   */\n    tag_72:\n        /* \"#utility.yul\":1701:1707   */\n      0x00\n        /* \"#utility.yul\":1709:1715   */\n      dup1\n        /* \"#utility.yul\":1758:1760   */\n      0x40\n        /* \"#utility.yul\":1746:1755   */\n      dup4\n        /* \"#utility.yul\":1737:1744   */\n      dup6\n        /* \"#utility.yul\":1733:1756   */\n      sub\n        /* \"#utility.yul\":1729:1761   */\n      slt\n        /* \"#utility.yul\":1726:1728   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":1774:1775   */\n      0x00\n        /* \"#utility.yul\":1771:1772   */\n      dup1\n        /* \"#utility.yul\":1764:1776   */\n      revert\n        /* \"#utility.yul\":1726:1728   */\n    tag_292:\n        /* \"#utility.yul\":1817:1818   */\n      0x00\n        /* \"#utility.yul\":1842:1895   */\n      tag_293\n        /* \"#utility.yul\":1887:1894   */\n      dup6\n        /* \"#utility.yul\":1878:1884   */\n      dup3\n        /* \"#utility.yul\":1867:1876   */\n      dup7\n        /* \"#utility.yul\":1863:1885   */\n      add\n        /* \"#utility.yul\":1842:1895   */\n      tag_265\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":1832:1895   */\n      swap3\n      pop\n        /* \"#utility.yul\":1788:1905   */\n      pop\n        /* \"#utility.yul\":1944:1946   */\n      0x20\n        /* \"#utility.yul\":1970:2023   */\n      tag_294\n        /* \"#utility.yul\":2015:2022   */\n      dup6\n        /* \"#utility.yul\":2006:2012   */\n      dup3\n        /* \"#utility.yul\":1995:2004   */\n      dup7\n        /* \"#utility.yul\":1991:2013   */\n      add\n        /* \"#utility.yul\":1970:2023   */\n      tag_265\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":1960:2023   */\n      swap2\n      pop\n        /* \"#utility.yul\":1915:2033   */\n      pop\n        /* \"#utility.yul\":1716:2040   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2046:2598   */\n    tag_40:\n        /* \"#utility.yul\":2123:2129   */\n      0x00\n        /* \"#utility.yul\":2131:2137   */\n      dup1\n        /* \"#utility.yul\":2139:2145   */\n      0x00\n        /* \"#utility.yul\":2188:2190   */\n      0x60\n        /* \"#utility.yul\":2176:2185   */\n      dup5\n        /* \"#utility.yul\":2167:2174   */\n      dup7\n        /* \"#utility.yul\":2163:2186   */\n      sub\n        /* \"#utility.yul\":2159:2191   */\n      slt\n        /* \"#utility.yul\":2156:2158   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":2204:2205   */\n      0x00\n        /* \"#utility.yul\":2201:2202   */\n      dup1\n        /* \"#utility.yul\":2194:2206   */\n      revert\n        /* \"#utility.yul\":2156:2158   */\n    tag_296:\n        /* \"#utility.yul\":2247:2248   */\n      0x00\n        /* \"#utility.yul\":2272:2325   */\n      tag_297\n        /* \"#utility.yul\":2317:2324   */\n      dup7\n        /* \"#utility.yul\":2308:2314   */\n      dup3\n        /* \"#utility.yul\":2297:2306   */\n      dup8\n        /* \"#utility.yul\":2293:2315   */\n      add\n        /* \"#utility.yul\":2272:2325   */\n      tag_265\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":2262:2325   */\n      swap4\n      pop\n        /* \"#utility.yul\":2218:2335   */\n      pop\n        /* \"#utility.yul\":2374:2376   */\n      0x20\n        /* \"#utility.yul\":2400:2453   */\n      tag_298\n        /* \"#utility.yul\":2445:2452   */\n      dup7\n        /* \"#utility.yul\":2436:2442   */\n      dup3\n        /* \"#utility.yul\":2425:2434   */\n      dup8\n        /* \"#utility.yul\":2421:2443   */\n      add\n        /* \"#utility.yul\":2400:2453   */\n      tag_265\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":2390:2453   */\n      swap3\n      pop\n        /* \"#utility.yul\":2345:2463   */\n      pop\n        /* \"#utility.yul\":2502:2504   */\n      0x40\n        /* \"#utility.yul\":2528:2581   */\n      tag_299\n        /* \"#utility.yul\":2573:2580   */\n      dup7\n        /* \"#utility.yul\":2564:2570   */\n      dup3\n        /* \"#utility.yul\":2553:2562   */\n      dup8\n        /* \"#utility.yul\":2549:2571   */\n      add\n        /* \"#utility.yul\":2528:2581   */\n      tag_284\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":2518:2581   */\n      swap2\n      pop\n        /* \"#utility.yul\":2473:2591   */\n      pop\n        /* \"#utility.yul\":2146:2598   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2604:3413   */\n    tag_64:\n        /* \"#utility.yul\":2699:2705   */\n      0x00\n        /* \"#utility.yul\":2707:2713   */\n      dup1\n        /* \"#utility.yul\":2715:2721   */\n      0x00\n        /* \"#utility.yul\":2723:2729   */\n      dup1\n        /* \"#utility.yul\":2772:2775   */\n      0x80\n        /* \"#utility.yul\":2760:2769   */\n      dup6\n        /* \"#utility.yul\":2751:2758   */\n      dup8\n        /* \"#utility.yul\":2747:2770   */\n      sub\n        /* \"#utility.yul\":2743:2776   */\n      slt\n        /* \"#utility.yul\":2740:2742   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":2789:2790   */\n      0x00\n        /* \"#utility.yul\":2786:2787   */\n      dup1\n        /* \"#utility.yul\":2779:2791   */\n      revert\n        /* \"#utility.yul\":2740:2742   */\n    tag_301:\n        /* \"#utility.yul\":2832:2833   */\n      0x00\n        /* \"#utility.yul\":2857:2910   */\n      tag_302\n        /* \"#utility.yul\":2902:2909   */\n      dup8\n        /* \"#utility.yul\":2893:2899   */\n      dup3\n        /* \"#utility.yul\":2882:2891   */\n      dup9\n        /* \"#utility.yul\":2878:2900   */\n      add\n        /* \"#utility.yul\":2857:2910   */\n      tag_265\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":2847:2910   */\n      swap5\n      pop\n        /* \"#utility.yul\":2803:2920   */\n      pop\n        /* \"#utility.yul\":2959:2961   */\n      0x20\n        /* \"#utility.yul\":2985:3038   */\n      tag_303\n        /* \"#utility.yul\":3030:3037   */\n      dup8\n        /* \"#utility.yul\":3021:3027   */\n      dup3\n        /* \"#utility.yul\":3010:3019   */\n      dup9\n        /* \"#utility.yul\":3006:3028   */\n      add\n        /* \"#utility.yul\":2985:3038   */\n      tag_265\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":2975:3038   */\n      swap4\n      pop\n        /* \"#utility.yul\":2930:3048   */\n      pop\n        /* \"#utility.yul\":3087:3089   */\n      0x40\n        /* \"#utility.yul\":3113:3166   */\n      tag_304\n        /* \"#utility.yul\":3158:3165   */\n      dup8\n        /* \"#utility.yul\":3149:3155   */\n      dup3\n        /* \"#utility.yul\":3138:3147   */\n      dup9\n        /* \"#utility.yul\":3134:3156   */\n      add\n        /* \"#utility.yul\":3113:3166   */\n      tag_284\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":3103:3166   */\n      swap3\n      pop\n        /* \"#utility.yul\":3058:3176   */\n      pop\n        /* \"#utility.yul\":3243:3245   */\n      0x60\n        /* \"#utility.yul\":3232:3241   */\n      dup6\n        /* \"#utility.yul\":3228:3246   */\n      add\n        /* \"#utility.yul\":3215:3247   */\n      calldataload\n        /* \"#utility.yul\":3274:3292   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3266:3272   */\n      dup2\n        /* \"#utility.yul\":3263:3293   */\n      gt\n        /* \"#utility.yul\":3260:3262   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":3306:3307   */\n      0x00\n        /* \"#utility.yul\":3303:3304   */\n      dup1\n        /* \"#utility.yul\":3296:3308   */\n      revert\n        /* \"#utility.yul\":3260:3262   */\n    tag_305:\n        /* \"#utility.yul\":3334:3396   */\n      tag_306\n        /* \"#utility.yul\":3388:3395   */\n      dup8\n        /* \"#utility.yul\":3379:3385   */\n      dup3\n        /* \"#utility.yul\":3368:3377   */\n      dup9\n        /* \"#utility.yul\":3364:3386   */\n      add\n        /* \"#utility.yul\":3334:3396   */\n      tag_280\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":3324:3396   */\n      swap2\n      pop\n        /* \"#utility.yul\":3186:3406   */\n      pop\n        /* \"#utility.yul\":2730:3413   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3419:3820   */\n    tag_60:\n        /* \"#utility.yul\":3484:3490   */\n      0x00\n        /* \"#utility.yul\":3492:3498   */\n      dup1\n        /* \"#utility.yul\":3541:3543   */\n      0x40\n        /* \"#utility.yul\":3529:3538   */\n      dup4\n        /* \"#utility.yul\":3520:3527   */\n      dup6\n        /* \"#utility.yul\":3516:3539   */\n      sub\n        /* \"#utility.yul\":3512:3544   */\n      slt\n        /* \"#utility.yul\":3509:3511   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":3557:3558   */\n      0x00\n        /* \"#utility.yul\":3554:3555   */\n      dup1\n        /* \"#utility.yul\":3547:3559   */\n      revert\n        /* \"#utility.yul\":3509:3511   */\n    tag_308:\n        /* \"#utility.yul\":3600:3601   */\n      0x00\n        /* \"#utility.yul\":3625:3678   */\n      tag_309\n        /* \"#utility.yul\":3670:3677   */\n      dup6\n        /* \"#utility.yul\":3661:3667   */\n      dup3\n        /* \"#utility.yul\":3650:3659   */\n      dup7\n        /* \"#utility.yul\":3646:3668   */\n      add\n        /* \"#utility.yul\":3625:3678   */\n      tag_265\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":3615:3678   */\n      swap3\n      pop\n        /* \"#utility.yul\":3571:3688   */\n      pop\n        /* \"#utility.yul\":3727:3729   */\n      0x20\n        /* \"#utility.yul\":3753:3803   */\n      tag_310\n        /* \"#utility.yul\":3795:3802   */\n      dup6\n        /* \"#utility.yul\":3786:3792   */\n      dup3\n        /* \"#utility.yul\":3775:3784   */\n      dup7\n        /* \"#utility.yul\":3771:3793   */\n      add\n        /* \"#utility.yul\":3753:3803   */\n      tag_269\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":3743:3803   */\n      swap2\n      pop\n        /* \"#utility.yul\":3698:3813   */\n      pop\n        /* \"#utility.yul\":3499:3820   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3826:4233   */\n    tag_36:\n        /* \"#utility.yul\":3894:3900   */\n      0x00\n        /* \"#utility.yul\":3902:3908   */\n      dup1\n        /* \"#utility.yul\":3951:3953   */\n      0x40\n        /* \"#utility.yul\":3939:3948   */\n      dup4\n        /* \"#utility.yul\":3930:3937   */\n      dup6\n        /* \"#utility.yul\":3926:3949   */\n      sub\n        /* \"#utility.yul\":3922:3954   */\n      slt\n        /* \"#utility.yul\":3919:3921   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":3967:3968   */\n      0x00\n        /* \"#utility.yul\":3964:3965   */\n      dup1\n        /* \"#utility.yul\":3957:3969   */\n      revert\n        /* \"#utility.yul\":3919:3921   */\n    tag_312:\n        /* \"#utility.yul\":4010:4011   */\n      0x00\n        /* \"#utility.yul\":4035:4088   */\n      tag_313\n        /* \"#utility.yul\":4080:4087   */\n      dup6\n        /* \"#utility.yul\":4071:4077   */\n      dup3\n        /* \"#utility.yul\":4060:4069   */\n      dup7\n        /* \"#utility.yul\":4056:4078   */\n      add\n        /* \"#utility.yul\":4035:4088   */\n      tag_265\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":4025:4088   */\n      swap3\n      pop\n        /* \"#utility.yul\":3981:4098   */\n      pop\n        /* \"#utility.yul\":4137:4139   */\n      0x20\n        /* \"#utility.yul\":4163:4216   */\n      tag_314\n        /* \"#utility.yul\":4208:4215   */\n      dup6\n        /* \"#utility.yul\":4199:4205   */\n      dup3\n        /* \"#utility.yul\":4188:4197   */\n      dup7\n        /* \"#utility.yul\":4184:4206   */\n      add\n        /* \"#utility.yul\":4163:4216   */\n      tag_284\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":4153:4216   */\n      swap2\n      pop\n        /* \"#utility.yul\":4108:4226   */\n      pop\n        /* \"#utility.yul\":3909:4233   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4239:4499   */\n    tag_20:\n        /* \"#utility.yul\":4297:4303   */\n      0x00\n        /* \"#utility.yul\":4346:4348   */\n      0x20\n        /* \"#utility.yul\":4334:4343   */\n      dup3\n        /* \"#utility.yul\":4325:4332   */\n      dup5\n        /* \"#utility.yul\":4321:4344   */\n      sub\n        /* \"#utility.yul\":4317:4349   */\n      slt\n        /* \"#utility.yul\":4314:4316   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":4362:4363   */\n      0x00\n        /* \"#utility.yul\":4359:4360   */\n      dup1\n        /* \"#utility.yul\":4352:4364   */\n      revert\n        /* \"#utility.yul\":4314:4316   */\n    tag_316:\n        /* \"#utility.yul\":4405:4406   */\n      0x00\n        /* \"#utility.yul\":4430:4482   */\n      tag_317\n        /* \"#utility.yul\":4474:4481   */\n      dup5\n        /* \"#utility.yul\":4465:4471   */\n      dup3\n        /* \"#utility.yul\":4454:4463   */\n      dup6\n        /* \"#utility.yul\":4450:4472   */\n      add\n        /* \"#utility.yul\":4430:4482   */\n      tag_273\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":4420:4482   */\n      swap2\n      pop\n        /* \"#utility.yul\":4376:4492   */\n      pop\n        /* \"#utility.yul\":4304:4499   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4505:4787   */\n    tag_228:\n        /* \"#utility.yul\":4574:4580   */\n      0x00\n        /* \"#utility.yul\":4623:4625   */\n      0x20\n        /* \"#utility.yul\":4611:4620   */\n      dup3\n        /* \"#utility.yul\":4602:4609   */\n      dup5\n        /* \"#utility.yul\":4598:4621   */\n      sub\n        /* \"#utility.yul\":4594:4626   */\n      slt\n        /* \"#utility.yul\":4591:4593   */\n      iszero\n      tag_319\n      jumpi\n        /* \"#utility.yul\":4639:4640   */\n      0x00\n        /* \"#utility.yul\":4636:4637   */\n      dup1\n        /* \"#utility.yul\":4629:4641   */\n      revert\n        /* \"#utility.yul\":4591:4593   */\n    tag_319:\n        /* \"#utility.yul\":4682:4683   */\n      0x00\n        /* \"#utility.yul\":4707:4770   */\n      tag_320\n        /* \"#utility.yul\":4762:4769   */\n      dup5\n        /* \"#utility.yul\":4753:4759   */\n      dup3\n        /* \"#utility.yul\":4742:4751   */\n      dup6\n        /* \"#utility.yul\":4738:4760   */\n      add\n        /* \"#utility.yul\":4707:4770   */\n      tag_277\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":4697:4770   */\n      swap2\n      pop\n        /* \"#utility.yul\":4653:4780   */\n      pop\n        /* \"#utility.yul\":4581:4787   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4793:5055   */\n    tag_30:\n        /* \"#utility.yul\":4852:4858   */\n      0x00\n        /* \"#utility.yul\":4901:4903   */\n      0x20\n        /* \"#utility.yul\":4889:4898   */\n      dup3\n        /* \"#utility.yul\":4880:4887   */\n      dup5\n        /* \"#utility.yul\":4876:4899   */\n      sub\n        /* \"#utility.yul\":4872:4904   */\n      slt\n        /* \"#utility.yul\":4869:4871   */\n      iszero\n      tag_322\n      jumpi\n        /* \"#utility.yul\":4917:4918   */\n      0x00\n        /* \"#utility.yul\":4914:4915   */\n      dup1\n        /* \"#utility.yul\":4907:4919   */\n      revert\n        /* \"#utility.yul\":4869:4871   */\n    tag_322:\n        /* \"#utility.yul\":4960:4961   */\n      0x00\n        /* \"#utility.yul\":4985:5038   */\n      tag_323\n        /* \"#utility.yul\":5030:5037   */\n      dup5\n        /* \"#utility.yul\":5021:5027   */\n      dup3\n        /* \"#utility.yul\":5010:5019   */\n      dup6\n        /* \"#utility.yul\":5006:5028   */\n      add\n        /* \"#utility.yul\":4985:5038   */\n      tag_284\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":4975:5038   */\n      swap2\n      pop\n        /* \"#utility.yul\":4931:5048   */\n      pop\n        /* \"#utility.yul\":4859:5055   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5061:5179   */\n    tag_324:\n        /* \"#utility.yul\":5148:5172   */\n      tag_326\n        /* \"#utility.yul\":5166:5171   */\n      dup2\n        /* \"#utility.yul\":5148:5172   */\n      tag_327\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":5143:5146   */\n      dup3\n        /* \"#utility.yul\":5136:5173   */\n      mstore\n        /* \"#utility.yul\":5126:5179   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5185:5294   */\n    tag_328:\n        /* \"#utility.yul\":5266:5287   */\n      tag_330\n        /* \"#utility.yul\":5281:5286   */\n      dup2\n        /* \"#utility.yul\":5266:5287   */\n      tag_331\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":5261:5264   */\n      dup3\n        /* \"#utility.yul\":5254:5288   */\n      mstore\n        /* \"#utility.yul\":5244:5294   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5300:5660   */\n    tag_332:\n        /* \"#utility.yul\":5386:5389   */\n      0x00\n        /* \"#utility.yul\":5414:5452   */\n      tag_334\n        /* \"#utility.yul\":5446:5451   */\n      dup3\n        /* \"#utility.yul\":5414:5452   */\n      tag_335\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":5468:5538   */\n      tag_336\n        /* \"#utility.yul\":5531:5537   */\n      dup2\n        /* \"#utility.yul\":5526:5529   */\n      dup6\n        /* \"#utility.yul\":5468:5538   */\n      tag_337\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":5461:5538   */\n      swap4\n      pop\n        /* \"#utility.yul\":5547:5599   */\n      tag_338\n        /* \"#utility.yul\":5592:5598   */\n      dup2\n        /* \"#utility.yul\":5587:5590   */\n      dup6\n        /* \"#utility.yul\":5580:5584   */\n      0x20\n        /* \"#utility.yul\":5573:5578   */\n      dup7\n        /* \"#utility.yul\":5569:5585   */\n      add\n        /* \"#utility.yul\":5547:5599   */\n      tag_339\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":5624:5653   */\n      tag_340\n        /* \"#utility.yul\":5646:5652   */\n      dup2\n        /* \"#utility.yul\":5624:5653   */\n      tag_341\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":5619:5622   */\n      dup5\n        /* \"#utility.yul\":5615:5654   */\n      add\n        /* \"#utility.yul\":5608:5654   */\n      swap2\n      pop\n        /* \"#utility.yul\":5390:5660   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5666:6030   */\n    tag_342:\n        /* \"#utility.yul\":5754:5757   */\n      0x00\n        /* \"#utility.yul\":5782:5821   */\n      tag_344\n        /* \"#utility.yul\":5815:5820   */\n      dup3\n        /* \"#utility.yul\":5782:5821   */\n      tag_345\n      jump\t// in\n    tag_344:\n        /* \"#utility.yul\":5837:5908   */\n      tag_346\n        /* \"#utility.yul\":5901:5907   */\n      dup2\n        /* \"#utility.yul\":5896:5899   */\n      dup6\n        /* \"#utility.yul\":5837:5908   */\n      tag_347\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":5830:5908   */\n      swap4\n      pop\n        /* \"#utility.yul\":5917:5969   */\n      tag_348\n        /* \"#utility.yul\":5962:5968   */\n      dup2\n        /* \"#utility.yul\":5957:5960   */\n      dup6\n        /* \"#utility.yul\":5950:5954   */\n      0x20\n        /* \"#utility.yul\":5943:5948   */\n      dup7\n        /* \"#utility.yul\":5939:5955   */\n      add\n        /* \"#utility.yul\":5917:5969   */\n      tag_339\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":5994:6023   */\n      tag_349\n        /* \"#utility.yul\":6016:6022   */\n      dup2\n        /* \"#utility.yul\":5994:6023   */\n      tag_341\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":5989:5992   */\n      dup5\n        /* \"#utility.yul\":5985:6024   */\n      add\n        /* \"#utility.yul\":5978:6024   */\n      swap2\n      pop\n        /* \"#utility.yul\":5758:6030   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6036:6413   */\n    tag_350:\n        /* \"#utility.yul\":6142:6145   */\n      0x00\n        /* \"#utility.yul\":6170:6209   */\n      tag_352\n        /* \"#utility.yul\":6203:6208   */\n      dup3\n        /* \"#utility.yul\":6170:6209   */\n      tag_345\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":6225:6314   */\n      tag_353\n        /* \"#utility.yul\":6307:6313   */\n      dup2\n        /* \"#utility.yul\":6302:6305   */\n      dup6\n        /* \"#utility.yul\":6225:6314   */\n      tag_354\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":6218:6314   */\n      swap4\n      pop\n        /* \"#utility.yul\":6323:6375   */\n      tag_355\n        /* \"#utility.yul\":6368:6374   */\n      dup2\n        /* \"#utility.yul\":6363:6366   */\n      dup6\n        /* \"#utility.yul\":6356:6360   */\n      0x20\n        /* \"#utility.yul\":6349:6354   */\n      dup7\n        /* \"#utility.yul\":6345:6361   */\n      add\n        /* \"#utility.yul\":6323:6375   */\n      tag_339\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":6400:6406   */\n      dup1\n        /* \"#utility.yul\":6395:6398   */\n      dup5\n        /* \"#utility.yul\":6391:6407   */\n      add\n        /* \"#utility.yul\":6384:6407   */\n      swap2\n      pop\n        /* \"#utility.yul\":6146:6413   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6419:6785   */\n    tag_356:\n        /* \"#utility.yul\":6561:6564   */\n      0x00\n        /* \"#utility.yul\":6582:6649   */\n      tag_358\n        /* \"#utility.yul\":6646:6648   */\n      0x2d\n        /* \"#utility.yul\":6641:6644   */\n      dup4\n        /* \"#utility.yul\":6582:6649   */\n      tag_347\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":6575:6649   */\n      swap2\n      pop\n        /* \"#utility.yul\":6658:6751   */\n      tag_359\n        /* \"#utility.yul\":6747:6750   */\n      dup3\n        /* \"#utility.yul\":6658:6751   */\n      tag_360\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":6776:6778   */\n      0x40\n        /* \"#utility.yul\":6771:6774   */\n      dup3\n        /* \"#utility.yul\":6767:6779   */\n      add\n        /* \"#utility.yul\":6760:6779   */\n      swap1\n      pop\n        /* \"#utility.yul\":6565:6785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6791:7157   */\n    tag_361:\n        /* \"#utility.yul\":6933:6936   */\n      0x00\n        /* \"#utility.yul\":6954:7021   */\n      tag_363\n        /* \"#utility.yul\":7018:7020   */\n      0x32\n        /* \"#utility.yul\":7013:7016   */\n      dup4\n        /* \"#utility.yul\":6954:7021   */\n      tag_347\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":6947:7021   */\n      swap2\n      pop\n        /* \"#utility.yul\":7030:7123   */\n      tag_364\n        /* \"#utility.yul\":7119:7122   */\n      dup3\n        /* \"#utility.yul\":7030:7123   */\n      tag_365\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":7148:7150   */\n      0x40\n        /* \"#utility.yul\":7143:7146   */\n      dup3\n        /* \"#utility.yul\":7139:7151   */\n      add\n        /* \"#utility.yul\":7132:7151   */\n      swap1\n      pop\n        /* \"#utility.yul\":6937:7157   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7163:7529   */\n    tag_366:\n        /* \"#utility.yul\":7305:7308   */\n      0x00\n        /* \"#utility.yul\":7326:7393   */\n      tag_368\n        /* \"#utility.yul\":7390:7392   */\n      0x25\n        /* \"#utility.yul\":7385:7388   */\n      dup4\n        /* \"#utility.yul\":7326:7393   */\n      tag_347\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":7319:7393   */\n      swap2\n      pop\n        /* \"#utility.yul\":7402:7495   */\n      tag_369\n        /* \"#utility.yul\":7491:7494   */\n      dup3\n        /* \"#utility.yul\":7402:7495   */\n      tag_370\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":7520:7522   */\n      0x40\n        /* \"#utility.yul\":7515:7518   */\n      dup3\n        /* \"#utility.yul\":7511:7523   */\n      add\n        /* \"#utility.yul\":7504:7523   */\n      swap1\n      pop\n        /* \"#utility.yul\":7309:7529   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7535:7901   */\n    tag_371:\n        /* \"#utility.yul\":7677:7680   */\n      0x00\n        /* \"#utility.yul\":7698:7765   */\n      tag_373\n        /* \"#utility.yul\":7762:7764   */\n      0x24\n        /* \"#utility.yul\":7757:7760   */\n      dup4\n        /* \"#utility.yul\":7698:7765   */\n      tag_347\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":7691:7765   */\n      swap2\n      pop\n        /* \"#utility.yul\":7774:7867   */\n      tag_374\n        /* \"#utility.yul\":7863:7866   */\n      dup3\n        /* \"#utility.yul\":7774:7867   */\n      tag_375\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":7892:7894   */\n      0x40\n        /* \"#utility.yul\":7887:7890   */\n      dup3\n        /* \"#utility.yul\":7883:7895   */\n      add\n        /* \"#utility.yul\":7876:7895   */\n      swap1\n      pop\n        /* \"#utility.yul\":7681:7901   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7907:8273   */\n    tag_376:\n        /* \"#utility.yul\":8049:8052   */\n      0x00\n        /* \"#utility.yul\":8070:8137   */\n      tag_378\n        /* \"#utility.yul\":8134:8136   */\n      0x19\n        /* \"#utility.yul\":8129:8132   */\n      dup4\n        /* \"#utility.yul\":8070:8137   */\n      tag_347\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":8063:8137   */\n      swap2\n      pop\n        /* \"#utility.yul\":8146:8239   */\n      tag_379\n        /* \"#utility.yul\":8235:8238   */\n      dup3\n        /* \"#utility.yul\":8146:8239   */\n      tag_380\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":8264:8266   */\n      0x20\n        /* \"#utility.yul\":8259:8262   */\n      dup3\n        /* \"#utility.yul\":8255:8267   */\n      add\n        /* \"#utility.yul\":8248:8267   */\n      swap1\n      pop\n        /* \"#utility.yul\":8053:8273   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8279:8645   */\n    tag_381:\n        /* \"#utility.yul\":8421:8424   */\n      0x00\n        /* \"#utility.yul\":8442:8509   */\n      tag_383\n        /* \"#utility.yul\":8506:8508   */\n      0x29\n        /* \"#utility.yul\":8501:8504   */\n      dup4\n        /* \"#utility.yul\":8442:8509   */\n      tag_347\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":8435:8509   */\n      swap2\n      pop\n        /* \"#utility.yul\":8518:8611   */\n      tag_384\n        /* \"#utility.yul\":8607:8610   */\n      dup3\n        /* \"#utility.yul\":8518:8611   */\n      tag_385\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":8636:8638   */\n      0x40\n        /* \"#utility.yul\":8631:8634   */\n      dup3\n        /* \"#utility.yul\":8627:8639   */\n      add\n        /* \"#utility.yul\":8620:8639   */\n      swap1\n      pop\n        /* \"#utility.yul\":8425:8645   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8651:9017   */\n    tag_386:\n        /* \"#utility.yul\":8793:8796   */\n      0x00\n        /* \"#utility.yul\":8814:8881   */\n      tag_388\n        /* \"#utility.yul\":8878:8880   */\n      0x18\n        /* \"#utility.yul\":8873:8876   */\n      dup4\n        /* \"#utility.yul\":8814:8881   */\n      tag_347\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":8807:8881   */\n      swap2\n      pop\n        /* \"#utility.yul\":8890:8983   */\n      tag_389\n        /* \"#utility.yul\":8979:8982   */\n      dup3\n        /* \"#utility.yul\":8890:8983   */\n      tag_390\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":9008:9010   */\n      0x20\n        /* \"#utility.yul\":9003:9006   */\n      dup3\n        /* \"#utility.yul\":8999:9011   */\n      add\n        /* \"#utility.yul\":8992:9011   */\n      swap1\n      pop\n        /* \"#utility.yul\":8797:9017   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9023:9389   */\n    tag_391:\n        /* \"#utility.yul\":9165:9168   */\n      0x00\n        /* \"#utility.yul\":9186:9253   */\n      tag_393\n        /* \"#utility.yul\":9250:9252   */\n      0x21\n        /* \"#utility.yul\":9245:9248   */\n      dup4\n        /* \"#utility.yul\":9186:9253   */\n      tag_347\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":9179:9253   */\n      swap2\n      pop\n        /* \"#utility.yul\":9262:9355   */\n      tag_394\n        /* \"#utility.yul\":9351:9354   */\n      dup3\n        /* \"#utility.yul\":9262:9355   */\n      tag_395\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":9380:9382   */\n      0x40\n        /* \"#utility.yul\":9375:9378   */\n      dup3\n        /* \"#utility.yul\":9371:9383   */\n      add\n        /* \"#utility.yul\":9364:9383   */\n      swap1\n      pop\n        /* \"#utility.yul\":9169:9389   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9395:9761   */\n    tag_396:\n        /* \"#utility.yul\":9537:9540   */\n      0x00\n        /* \"#utility.yul\":9558:9625   */\n      tag_398\n        /* \"#utility.yul\":9622:9624   */\n      0x3d\n        /* \"#utility.yul\":9617:9620   */\n      dup4\n        /* \"#utility.yul\":9558:9625   */\n      tag_347\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":9551:9625   */\n      swap2\n      pop\n        /* \"#utility.yul\":9634:9727   */\n      tag_399\n        /* \"#utility.yul\":9723:9726   */\n      dup3\n        /* \"#utility.yul\":9634:9727   */\n      tag_400\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":9752:9754   */\n      0x40\n        /* \"#utility.yul\":9747:9750   */\n      dup3\n        /* \"#utility.yul\":9743:9755   */\n      add\n        /* \"#utility.yul\":9736:9755   */\n      swap1\n      pop\n        /* \"#utility.yul\":9541:9761   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9767:9885   */\n    tag_401:\n        /* \"#utility.yul\":9854:9878   */\n      tag_403\n        /* \"#utility.yul\":9872:9877   */\n      dup2\n        /* \"#utility.yul\":9854:9878   */\n      tag_404\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":9849:9852   */\n      dup3\n        /* \"#utility.yul\":9842:9879   */\n      mstore\n        /* \"#utility.yul\":9832:9885   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9891:10326   */\n    tag_152:\n        /* \"#utility.yul\":10071:10074   */\n      0x00\n        /* \"#utility.yul\":10093:10188   */\n      tag_406\n        /* \"#utility.yul\":10184:10187   */\n      dup3\n        /* \"#utility.yul\":10175:10181   */\n      dup6\n        /* \"#utility.yul\":10093:10188   */\n      tag_350\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":10086:10188   */\n      swap2\n      pop\n        /* \"#utility.yul\":10205:10300   */\n      tag_407\n        /* \"#utility.yul\":10296:10299   */\n      dup3\n        /* \"#utility.yul\":10287:10293   */\n      dup5\n        /* \"#utility.yul\":10205:10300   */\n      tag_350\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":10198:10300   */\n      swap2\n      pop\n        /* \"#utility.yul\":10317:10320   */\n      dup2\n        /* \"#utility.yul\":10310:10320   */\n      swap1\n      pop\n        /* \"#utility.yul\":10075:10326   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10332:10554   */\n    tag_33:\n        /* \"#utility.yul\":10425:10429   */\n      0x00\n        /* \"#utility.yul\":10463:10465   */\n      0x20\n        /* \"#utility.yul\":10452:10461   */\n      dup3\n        /* \"#utility.yul\":10448:10466   */\n      add\n        /* \"#utility.yul\":10440:10466   */\n      swap1\n      pop\n        /* \"#utility.yul\":10476:10547   */\n      tag_409\n        /* \"#utility.yul\":10544:10545   */\n      0x00\n        /* \"#utility.yul\":10533:10542   */\n      dup4\n        /* \"#utility.yul\":10529:10546   */\n      add\n        /* \"#utility.yul\":10520:10526   */\n      dup5\n        /* \"#utility.yul\":10476:10547   */\n      tag_324\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":10430:10554   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10560:11200   */\n    tag_224:\n        /* \"#utility.yul\":10755:10759   */\n      0x00\n        /* \"#utility.yul\":10793:10796   */\n      0x80\n        /* \"#utility.yul\":10782:10791   */\n      dup3\n        /* \"#utility.yul\":10778:10797   */\n      add\n        /* \"#utility.yul\":10770:10797   */\n      swap1\n      pop\n        /* \"#utility.yul\":10807:10878   */\n      tag_411\n        /* \"#utility.yul\":10875:10876   */\n      0x00\n        /* \"#utility.yul\":10864:10873   */\n      dup4\n        /* \"#utility.yul\":10860:10877   */\n      add\n        /* \"#utility.yul\":10851:10857   */\n      dup8\n        /* \"#utility.yul\":10807:10878   */\n      tag_324\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":10888:10960   */\n      tag_412\n        /* \"#utility.yul\":10956:10958   */\n      0x20\n        /* \"#utility.yul\":10945:10954   */\n      dup4\n        /* \"#utility.yul\":10941:10959   */\n      add\n        /* \"#utility.yul\":10932:10938   */\n      dup7\n        /* \"#utility.yul\":10888:10960   */\n      tag_324\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":10970:11042   */\n      tag_413\n        /* \"#utility.yul\":11038:11040   */\n      0x40\n        /* \"#utility.yul\":11027:11036   */\n      dup4\n        /* \"#utility.yul\":11023:11041   */\n      add\n        /* \"#utility.yul\":11014:11020   */\n      dup6\n        /* \"#utility.yul\":10970:11042   */\n      tag_401\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":11089:11098   */\n      dup2\n        /* \"#utility.yul\":11083:11087   */\n      dup2\n        /* \"#utility.yul\":11079:11099   */\n      sub\n        /* \"#utility.yul\":11074:11076   */\n      0x60\n        /* \"#utility.yul\":11063:11072   */\n      dup4\n        /* \"#utility.yul\":11059:11077   */\n      add\n        /* \"#utility.yul\":11052:11100   */\n      mstore\n        /* \"#utility.yul\":11117:11193   */\n      tag_414\n        /* \"#utility.yul\":11188:11192   */\n      dup2\n        /* \"#utility.yul\":11179:11185   */\n      dup5\n        /* \"#utility.yul\":11117:11193   */\n      tag_332\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":11109:11193   */\n      swap1\n      pop\n        /* \"#utility.yul\":10760:11200   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11206:11416   */\n    tag_23:\n        /* \"#utility.yul\":11293:11297   */\n      0x00\n        /* \"#utility.yul\":11331:11333   */\n      0x20\n        /* \"#utility.yul\":11320:11329   */\n      dup3\n        /* \"#utility.yul\":11316:11334   */\n      add\n        /* \"#utility.yul\":11308:11334   */\n      swap1\n      pop\n        /* \"#utility.yul\":11344:11409   */\n      tag_416\n        /* \"#utility.yul\":11406:11407   */\n      0x00\n        /* \"#utility.yul\":11395:11404   */\n      dup4\n        /* \"#utility.yul\":11391:11408   */\n      add\n        /* \"#utility.yul\":11382:11388   */\n      dup5\n        /* \"#utility.yul\":11344:11409   */\n      tag_328\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":11298:11416   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11422:11735   */\n    tag_27:\n        /* \"#utility.yul\":11535:11539   */\n      0x00\n        /* \"#utility.yul\":11573:11575   */\n      0x20\n        /* \"#utility.yul\":11562:11571   */\n      dup3\n        /* \"#utility.yul\":11558:11576   */\n      add\n        /* \"#utility.yul\":11550:11576   */\n      swap1\n      pop\n        /* \"#utility.yul\":11622:11631   */\n      dup2\n        /* \"#utility.yul\":11616:11620   */\n      dup2\n        /* \"#utility.yul\":11612:11632   */\n      sub\n        /* \"#utility.yul\":11608:11609   */\n      0x00\n        /* \"#utility.yul\":11597:11606   */\n      dup4\n        /* \"#utility.yul\":11593:11610   */\n      add\n        /* \"#utility.yul\":11586:11633   */\n      mstore\n        /* \"#utility.yul\":11650:11728   */\n      tag_418\n        /* \"#utility.yul\":11723:11727   */\n      dup2\n        /* \"#utility.yul\":11714:11720   */\n      dup5\n        /* \"#utility.yul\":11650:11728   */\n      tag_342\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":11642:11728   */\n      swap1\n      pop\n        /* \"#utility.yul\":11540:11735   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11741:12160   */\n    tag_111:\n        /* \"#utility.yul\":11907:11911   */\n      0x00\n        /* \"#utility.yul\":11945:11947   */\n      0x20\n        /* \"#utility.yul\":11934:11943   */\n      dup3\n        /* \"#utility.yul\":11930:11948   */\n      add\n        /* \"#utility.yul\":11922:11948   */\n      swap1\n      pop\n        /* \"#utility.yul\":11994:12003   */\n      dup2\n        /* \"#utility.yul\":11988:11992   */\n      dup2\n        /* \"#utility.yul\":11984:12004   */\n      sub\n        /* \"#utility.yul\":11980:11981   */\n      0x00\n        /* \"#utility.yul\":11969:11978   */\n      dup4\n        /* \"#utility.yul\":11965:11982   */\n      add\n        /* \"#utility.yul\":11958:12005   */\n      mstore\n        /* \"#utility.yul\":12022:12153   */\n      tag_420\n        /* \"#utility.yul\":12148:12152   */\n      dup2\n        /* \"#utility.yul\":12022:12153   */\n      tag_356\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":12014:12153   */\n      swap1\n      pop\n        /* \"#utility.yul\":11912:12160   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12166:12585   */\n    tag_196:\n        /* \"#utility.yul\":12332:12336   */\n      0x00\n        /* \"#utility.yul\":12370:12372   */\n      0x20\n        /* \"#utility.yul\":12359:12368   */\n      dup3\n        /* \"#utility.yul\":12355:12373   */\n      add\n        /* \"#utility.yul\":12347:12373   */\n      swap1\n      pop\n        /* \"#utility.yul\":12419:12428   */\n      dup2\n        /* \"#utility.yul\":12413:12417   */\n      dup2\n        /* \"#utility.yul\":12409:12429   */\n      sub\n        /* \"#utility.yul\":12405:12406   */\n      0x00\n        /* \"#utility.yul\":12394:12403   */\n      dup4\n        /* \"#utility.yul\":12390:12407   */\n      add\n        /* \"#utility.yul\":12383:12430   */\n      mstore\n        /* \"#utility.yul\":12447:12578   */\n      tag_422\n        /* \"#utility.yul\":12573:12577   */\n      dup2\n        /* \"#utility.yul\":12447:12578   */\n      tag_361\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":12439:12578   */\n      swap1\n      pop\n        /* \"#utility.yul\":12337:12585   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12591:13010   */\n    tag_173:\n        /* \"#utility.yul\":12757:12761   */\n      0x00\n        /* \"#utility.yul\":12795:12797   */\n      0x20\n        /* \"#utility.yul\":12784:12793   */\n      dup3\n        /* \"#utility.yul\":12780:12798   */\n      add\n        /* \"#utility.yul\":12772:12798   */\n      swap1\n      pop\n        /* \"#utility.yul\":12844:12853   */\n      dup2\n        /* \"#utility.yul\":12838:12842   */\n      dup2\n        /* \"#utility.yul\":12834:12854   */\n      sub\n        /* \"#utility.yul\":12830:12831   */\n      0x00\n        /* \"#utility.yul\":12819:12828   */\n      dup4\n        /* \"#utility.yul\":12815:12832   */\n      add\n        /* \"#utility.yul\":12808:12855   */\n      mstore\n        /* \"#utility.yul\":12872:13003   */\n      tag_424\n        /* \"#utility.yul\":12998:13002   */\n      dup2\n        /* \"#utility.yul\":12872:13003   */\n      tag_366\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":12864:13003   */\n      swap1\n      pop\n        /* \"#utility.yul\":12762:13010   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13016:13435   */\n    tag_176:\n        /* \"#utility.yul\":13182:13186   */\n      0x00\n        /* \"#utility.yul\":13220:13222   */\n      0x20\n        /* \"#utility.yul\":13209:13218   */\n      dup3\n        /* \"#utility.yul\":13205:13223   */\n      add\n        /* \"#utility.yul\":13197:13223   */\n      swap1\n      pop\n        /* \"#utility.yul\":13269:13278   */\n      dup2\n        /* \"#utility.yul\":13263:13267   */\n      dup2\n        /* \"#utility.yul\":13259:13279   */\n      sub\n        /* \"#utility.yul\":13255:13256   */\n      0x00\n        /* \"#utility.yul\":13244:13253   */\n      dup4\n        /* \"#utility.yul\":13240:13257   */\n      add\n        /* \"#utility.yul\":13233:13280   */\n      mstore\n        /* \"#utility.yul\":13297:13428   */\n      tag_426\n        /* \"#utility.yul\":13423:13427   */\n      dup2\n        /* \"#utility.yul\":13297:13428   */\n      tag_371\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":13289:13428   */\n      swap1\n      pop\n        /* \"#utility.yul\":13187:13435   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13441:13860   */\n    tag_188:\n        /* \"#utility.yul\":13607:13611   */\n      0x00\n        /* \"#utility.yul\":13645:13647   */\n      0x20\n        /* \"#utility.yul\":13634:13643   */\n      dup3\n        /* \"#utility.yul\":13630:13648   */\n      add\n        /* \"#utility.yul\":13622:13648   */\n      swap1\n      pop\n        /* \"#utility.yul\":13694:13703   */\n      dup2\n        /* \"#utility.yul\":13688:13692   */\n      dup2\n        /* \"#utility.yul\":13684:13704   */\n      sub\n        /* \"#utility.yul\":13680:13681   */\n      0x00\n        /* \"#utility.yul\":13669:13678   */\n      dup4\n        /* \"#utility.yul\":13665:13682   */\n      add\n        /* \"#utility.yul\":13658:13705   */\n      mstore\n        /* \"#utility.yul\":13722:13853   */\n      tag_428\n        /* \"#utility.yul\":13848:13852   */\n      dup2\n        /* \"#utility.yul\":13722:13853   */\n      tag_376\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":13714:13853   */\n      swap1\n      pop\n        /* \"#utility.yul\":13612:13860   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13866:14285   */\n    tag_125:\n        /* \"#utility.yul\":14032:14036   */\n      0x00\n        /* \"#utility.yul\":14070:14072   */\n      0x20\n        /* \"#utility.yul\":14059:14068   */\n      dup3\n        /* \"#utility.yul\":14055:14073   */\n      add\n        /* \"#utility.yul\":14047:14073   */\n      swap1\n      pop\n        /* \"#utility.yul\":14119:14128   */\n      dup2\n        /* \"#utility.yul\":14113:14117   */\n      dup2\n        /* \"#utility.yul\":14109:14129   */\n      sub\n        /* \"#utility.yul\":14105:14106   */\n      0x00\n        /* \"#utility.yul\":14094:14103   */\n      dup4\n        /* \"#utility.yul\":14090:14107   */\n      add\n        /* \"#utility.yul\":14083:14130   */\n      mstore\n        /* \"#utility.yul\":14147:14278   */\n      tag_430\n        /* \"#utility.yul\":14273:14277   */\n      dup2\n        /* \"#utility.yul\":14147:14278   */\n      tag_381\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":14139:14278   */\n      swap1\n      pop\n        /* \"#utility.yul\":14037:14285   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14291:14710   */\n    tag_121:\n        /* \"#utility.yul\":14457:14461   */\n      0x00\n        /* \"#utility.yul\":14495:14497   */\n      0x20\n        /* \"#utility.yul\":14484:14493   */\n      dup3\n        /* \"#utility.yul\":14480:14498   */\n      add\n        /* \"#utility.yul\":14472:14498   */\n      swap1\n      pop\n        /* \"#utility.yul\":14544:14553   */\n      dup2\n        /* \"#utility.yul\":14538:14542   */\n      dup2\n        /* \"#utility.yul\":14534:14554   */\n      sub\n        /* \"#utility.yul\":14530:14531   */\n      0x00\n        /* \"#utility.yul\":14519:14528   */\n      dup4\n        /* \"#utility.yul\":14515:14532   */\n      add\n        /* \"#utility.yul\":14508:14555   */\n      mstore\n        /* \"#utility.yul\":14572:14703   */\n      tag_432\n        /* \"#utility.yul\":14698:14702   */\n      dup2\n        /* \"#utility.yul\":14572:14703   */\n      tag_386\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":14564:14703   */\n      swap1\n      pop\n        /* \"#utility.yul\":14462:14710   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14716:15135   */\n    tag_94:\n        /* \"#utility.yul\":14882:14886   */\n      0x00\n        /* \"#utility.yul\":14920:14922   */\n      0x20\n        /* \"#utility.yul\":14909:14918   */\n      dup3\n        /* \"#utility.yul\":14905:14923   */\n      add\n        /* \"#utility.yul\":14897:14923   */\n      swap1\n      pop\n        /* \"#utility.yul\":14969:14978   */\n      dup2\n        /* \"#utility.yul\":14963:14967   */\n      dup2\n        /* \"#utility.yul\":14959:14979   */\n      sub\n        /* \"#utility.yul\":14955:14956   */\n      0x00\n        /* \"#utility.yul\":14944:14953   */\n      dup4\n        /* \"#utility.yul\":14940:14957   */\n      add\n        /* \"#utility.yul\":14933:14980   */\n      mstore\n        /* \"#utility.yul\":14997:15128   */\n      tag_434\n        /* \"#utility.yul\":15123:15127   */\n      dup2\n        /* \"#utility.yul\":14997:15128   */\n      tag_391\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":14989:15128   */\n      swap1\n      pop\n        /* \"#utility.yul\":14887:15135   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15141:15560   */\n    tag_102:\n        /* \"#utility.yul\":15307:15311   */\n      0x00\n        /* \"#utility.yul\":15345:15347   */\n      0x20\n        /* \"#utility.yul\":15334:15343   */\n      dup3\n        /* \"#utility.yul\":15330:15348   */\n      add\n        /* \"#utility.yul\":15322:15348   */\n      swap1\n      pop\n        /* \"#utility.yul\":15394:15403   */\n      dup2\n        /* \"#utility.yul\":15388:15392   */\n      dup2\n        /* \"#utility.yul\":15384:15404   */\n      sub\n        /* \"#utility.yul\":15380:15381   */\n      0x00\n        /* \"#utility.yul\":15369:15378   */\n      dup4\n        /* \"#utility.yul\":15365:15382   */\n      add\n        /* \"#utility.yul\":15358:15405   */\n      mstore\n        /* \"#utility.yul\":15422:15553   */\n      tag_436\n        /* \"#utility.yul\":15548:15552   */\n      dup2\n        /* \"#utility.yul\":15422:15553   */\n      tag_396\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":15414:15553   */\n      swap1\n      pop\n        /* \"#utility.yul\":15312:15560   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15566:15788   */\n    tag_54:\n        /* \"#utility.yul\":15659:15663   */\n      0x00\n        /* \"#utility.yul\":15697:15699   */\n      0x20\n        /* \"#utility.yul\":15686:15695   */\n      dup3\n        /* \"#utility.yul\":15682:15700   */\n      add\n        /* \"#utility.yul\":15674:15700   */\n      swap1\n      pop\n        /* \"#utility.yul\":15710:15781   */\n      tag_438\n        /* \"#utility.yul\":15778:15779   */\n      0x00\n        /* \"#utility.yul\":15767:15776   */\n      dup4\n        /* \"#utility.yul\":15763:15780   */\n      add\n        /* \"#utility.yul\":15754:15760   */\n      dup5\n        /* \"#utility.yul\":15710:15781   */\n      tag_401\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":15664:15788   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15794:15923   */\n    tag_261:\n        /* \"#utility.yul\":15828:15834   */\n      0x00\n        /* \"#utility.yul\":15855:15875   */\n      tag_440\n      tag_441\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":15845:15875   */\n      swap1\n      pop\n        /* \"#utility.yul\":15884:15917   */\n      tag_442\n        /* \"#utility.yul\":15912:15916   */\n      dup3\n        /* \"#utility.yul\":15904:15910   */\n      dup3\n        /* \"#utility.yul\":15884:15917   */\n      tag_443\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":15835:15923   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15929:16004   */\n    tag_441:\n        /* \"#utility.yul\":15962:15968   */\n      0x00\n        /* \"#utility.yul\":15995:15997   */\n      0x40\n        /* \"#utility.yul\":15989:15998   */\n      mload\n        /* \"#utility.yul\":15979:15998   */\n      swap1\n      pop\n        /* \"#utility.yul\":15969:16004   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":16010:16317   */\n    tag_260:\n        /* \"#utility.yul\":16071:16075   */\n      0x00\n        /* \"#utility.yul\":16161:16179   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":16153:16159   */\n      dup3\n        /* \"#utility.yul\":16150:16180   */\n      gt\n        /* \"#utility.yul\":16147:16149   */\n      iszero\n      tag_446\n      jumpi\n        /* \"#utility.yul\":16183:16201   */\n      tag_447\n      tag_448\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":16147:16149   */\n    tag_446:\n        /* \"#utility.yul\":16221:16250   */\n      tag_449\n        /* \"#utility.yul\":16243:16249   */\n      dup3\n        /* \"#utility.yul\":16221:16250   */\n      tag_341\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":16213:16250   */\n      swap1\n      pop\n        /* \"#utility.yul\":16305:16309   */\n      0x20\n        /* \"#utility.yul\":16299:16303   */\n      dup2\n        /* \"#utility.yul\":16295:16310   */\n      add\n        /* \"#utility.yul\":16287:16310   */\n      swap1\n      pop\n        /* \"#utility.yul\":16076:16317   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16323:16421   */\n    tag_335:\n        /* \"#utility.yul\":16374:16380   */\n      0x00\n        /* \"#utility.yul\":16408:16413   */\n      dup2\n        /* \"#utility.yul\":16402:16414   */\n      mload\n        /* \"#utility.yul\":16392:16414   */\n      swap1\n      pop\n        /* \"#utility.yul\":16381:16421   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16427:16526   */\n    tag_345:\n        /* \"#utility.yul\":16479:16485   */\n      0x00\n        /* \"#utility.yul\":16513:16518   */\n      dup2\n        /* \"#utility.yul\":16507:16519   */\n      mload\n        /* \"#utility.yul\":16497:16519   */\n      swap1\n      pop\n        /* \"#utility.yul\":16486:16526   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16532:16700   */\n    tag_337:\n        /* \"#utility.yul\":16615:16626   */\n      0x00\n        /* \"#utility.yul\":16649:16655   */\n      dup3\n        /* \"#utility.yul\":16644:16647   */\n      dup3\n        /* \"#utility.yul\":16637:16656   */\n      mstore\n        /* \"#utility.yul\":16689:16693   */\n      0x20\n        /* \"#utility.yul\":16684:16687   */\n      dup3\n        /* \"#utility.yul\":16680:16694   */\n      add\n        /* \"#utility.yul\":16665:16694   */\n      swap1\n      pop\n        /* \"#utility.yul\":16627:16700   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16706:16875   */\n    tag_347:\n        /* \"#utility.yul\":16790:16801   */\n      0x00\n        /* \"#utility.yul\":16824:16830   */\n      dup3\n        /* \"#utility.yul\":16819:16822   */\n      dup3\n        /* \"#utility.yul\":16812:16831   */\n      mstore\n        /* \"#utility.yul\":16864:16868   */\n      0x20\n        /* \"#utility.yul\":16859:16862   */\n      dup3\n        /* \"#utility.yul\":16855:16869   */\n      add\n        /* \"#utility.yul\":16840:16869   */\n      swap1\n      pop\n        /* \"#utility.yul\":16802:16875   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16881:17029   */\n    tag_354:\n        /* \"#utility.yul\":16983:16994   */\n      0x00\n        /* \"#utility.yul\":17020:17023   */\n      dup2\n        /* \"#utility.yul\":17005:17023   */\n      swap1\n      pop\n        /* \"#utility.yul\":16995:17029   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17035:17340   */\n    tag_216:\n        /* \"#utility.yul\":17075:17078   */\n      0x00\n        /* \"#utility.yul\":17094:17114   */\n      tag_456\n        /* \"#utility.yul\":17112:17113   */\n      dup3\n        /* \"#utility.yul\":17094:17114   */\n      tag_404\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":17089:17114   */\n      swap2\n      pop\n        /* \"#utility.yul\":17128:17148   */\n      tag_457\n        /* \"#utility.yul\":17146:17147   */\n      dup4\n        /* \"#utility.yul\":17128:17148   */\n      tag_404\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":17123:17148   */\n      swap3\n      pop\n        /* \"#utility.yul\":17282:17283   */\n      dup3\n        /* \"#utility.yul\":17214:17280   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":17210:17284   */\n      sub\n        /* \"#utility.yul\":17207:17208   */\n      dup3\n        /* \"#utility.yul\":17204:17285   */\n      gt\n        /* \"#utility.yul\":17201:17203   */\n      iszero\n      tag_458\n      jumpi\n        /* \"#utility.yul\":17288:17306   */\n      tag_459\n      tag_460\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":17201:17203   */\n    tag_458:\n        /* \"#utility.yul\":17332:17333   */\n      dup3\n        /* \"#utility.yul\":17329:17330   */\n      dup3\n        /* \"#utility.yul\":17325:17334   */\n      add\n        /* \"#utility.yul\":17318:17334   */\n      swap1\n      pop\n        /* \"#utility.yul\":17079:17340   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17346:17537   */\n    tag_213:\n        /* \"#utility.yul\":17386:17390   */\n      0x00\n        /* \"#utility.yul\":17406:17426   */\n      tag_462\n        /* \"#utility.yul\":17424:17425   */\n      dup3\n        /* \"#utility.yul\":17406:17426   */\n      tag_404\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":17401:17426   */\n      swap2\n      pop\n        /* \"#utility.yul\":17440:17460   */\n      tag_463\n        /* \"#utility.yul\":17458:17459   */\n      dup4\n        /* \"#utility.yul\":17440:17460   */\n      tag_404\n      jump\t// in\n    tag_463:\n        /* \"#utility.yul\":17435:17460   */\n      swap3\n      pop\n        /* \"#utility.yul\":17479:17480   */\n      dup3\n        /* \"#utility.yul\":17476:17477   */\n      dup3\n        /* \"#utility.yul\":17473:17481   */\n      lt\n        /* \"#utility.yul\":17470:17472   */\n      iszero\n      tag_464\n      jumpi\n        /* \"#utility.yul\":17484:17502   */\n      tag_465\n      tag_460\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":17470:17472   */\n    tag_464:\n        /* \"#utility.yul\":17529:17530   */\n      dup3\n        /* \"#utility.yul\":17526:17527   */\n      dup3\n        /* \"#utility.yul\":17522:17531   */\n      sub\n        /* \"#utility.yul\":17514:17531   */\n      swap1\n      pop\n        /* \"#utility.yul\":17391:17537   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17543:17639   */\n    tag_327:\n        /* \"#utility.yul\":17580:17587   */\n      0x00\n        /* \"#utility.yul\":17609:17633   */\n      tag_467\n        /* \"#utility.yul\":17627:17632   */\n      dup3\n        /* \"#utility.yul\":17609:17633   */\n      tag_468\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":17598:17633   */\n      swap1\n      pop\n        /* \"#utility.yul\":17588:17639   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17645:17735   */\n    tag_331:\n        /* \"#utility.yul\":17679:17686   */\n      0x00\n        /* \"#utility.yul\":17722:17727   */\n      dup2\n        /* \"#utility.yul\":17715:17728   */\n      iszero\n        /* \"#utility.yul\":17708:17729   */\n      iszero\n        /* \"#utility.yul\":17697:17729   */\n      swap1\n      pop\n        /* \"#utility.yul\":17687:17735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17741:17890   */\n    tag_470:\n        /* \"#utility.yul\":17777:17784   */\n      0x00\n        /* \"#utility.yul\":17817:17883   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":17810:17815   */\n      dup3\n        /* \"#utility.yul\":17806:17884   */\n      and\n        /* \"#utility.yul\":17795:17884   */\n      swap1\n      pop\n        /* \"#utility.yul\":17785:17890   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17896:18022   */\n    tag_468:\n        /* \"#utility.yul\":17933:17940   */\n      0x00\n        /* \"#utility.yul\":17973:18015   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":17966:17971   */\n      dup3\n        /* \"#utility.yul\":17962:18016   */\n      and\n        /* \"#utility.yul\":17951:18016   */\n      swap1\n      pop\n        /* \"#utility.yul\":17941:18022   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18028:18105   */\n    tag_404:\n        /* \"#utility.yul\":18065:18072   */\n      0x00\n        /* \"#utility.yul\":18094:18099   */\n      dup2\n        /* \"#utility.yul\":18083:18099   */\n      swap1\n      pop\n        /* \"#utility.yul\":18073:18105   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18111:18265   */\n    tag_264:\n        /* \"#utility.yul\":18195:18201   */\n      dup3\n        /* \"#utility.yul\":18190:18193   */\n      dup2\n        /* \"#utility.yul\":18185:18188   */\n      dup4\n        /* \"#utility.yul\":18172:18202   */\n      calldatacopy\n        /* \"#utility.yul\":18257:18258   */\n      0x00\n        /* \"#utility.yul\":18248:18254   */\n      dup4\n        /* \"#utility.yul\":18243:18246   */\n      dup4\n        /* \"#utility.yul\":18239:18255   */\n      add\n        /* \"#utility.yul\":18232:18259   */\n      mstore\n        /* \"#utility.yul\":18162:18265   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18271:18578   */\n    tag_339:\n        /* \"#utility.yul\":18339:18340   */\n      0x00\n        /* \"#utility.yul\":18349:18462   */\n    tag_476:\n        /* \"#utility.yul\":18363:18369   */\n      dup4\n        /* \"#utility.yul\":18360:18361   */\n      dup2\n        /* \"#utility.yul\":18357:18370   */\n      lt\n        /* \"#utility.yul\":18349:18462   */\n      iszero\n      tag_478\n      jumpi\n        /* \"#utility.yul\":18448:18449   */\n      dup1\n        /* \"#utility.yul\":18443:18446   */\n      dup3\n        /* \"#utility.yul\":18439:18450   */\n      add\n        /* \"#utility.yul\":18433:18451   */\n      mload\n        /* \"#utility.yul\":18429:18430   */\n      dup2\n        /* \"#utility.yul\":18424:18427   */\n      dup5\n        /* \"#utility.yul\":18420:18431   */\n      add\n        /* \"#utility.yul\":18413:18452   */\n      mstore\n        /* \"#utility.yul\":18385:18387   */\n      0x20\n        /* \"#utility.yul\":18382:18383   */\n      dup2\n        /* \"#utility.yul\":18378:18388   */\n      add\n        /* \"#utility.yul\":18373:18388   */\n      swap1\n      pop\n        /* \"#utility.yul\":18349:18462   */\n      jump(tag_476)\n    tag_478:\n        /* \"#utility.yul\":18480:18486   */\n      dup4\n        /* \"#utility.yul\":18477:18478   */\n      dup2\n        /* \"#utility.yul\":18474:18487   */\n      gt\n        /* \"#utility.yul\":18471:18473   */\n      iszero\n      tag_479\n      jumpi\n        /* \"#utility.yul\":18560:18561   */\n      0x00\n        /* \"#utility.yul\":18551:18557   */\n      dup5\n        /* \"#utility.yul\":18546:18549   */\n      dup5\n        /* \"#utility.yul\":18542:18558   */\n      add\n        /* \"#utility.yul\":18535:18562   */\n      mstore\n        /* \"#utility.yul\":18471:18473   */\n    tag_479:\n        /* \"#utility.yul\":18320:18578   */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18584:18904   */\n    tag_82:\n        /* \"#utility.yul\":18628:18634   */\n      0x00\n        /* \"#utility.yul\":18665:18666   */\n      0x02\n        /* \"#utility.yul\":18659:18663   */\n      dup3\n        /* \"#utility.yul\":18655:18667   */\n      div\n        /* \"#utility.yul\":18645:18667   */\n      swap1\n      pop\n        /* \"#utility.yul\":18712:18713   */\n      0x01\n        /* \"#utility.yul\":18706:18710   */\n      dup3\n        /* \"#utility.yul\":18702:18714   */\n      and\n        /* \"#utility.yul\":18733:18751   */\n      dup1\n        /* \"#utility.yul\":18723:18725   */\n      tag_481\n      jumpi\n        /* \"#utility.yul\":18789:18793   */\n      0x7f\n        /* \"#utility.yul\":18781:18787   */\n      dup3\n        /* \"#utility.yul\":18777:18794   */\n      and\n        /* \"#utility.yul\":18767:18794   */\n      swap2\n      pop\n        /* \"#utility.yul\":18723:18725   */\n    tag_481:\n        /* \"#utility.yul\":18851:18853   */\n      0x20\n        /* \"#utility.yul\":18843:18849   */\n      dup3\n        /* \"#utility.yul\":18840:18854   */\n      lt\n        /* \"#utility.yul\":18820:18838   */\n      dup2\n        /* \"#utility.yul\":18817:18855   */\n      eq\n        /* \"#utility.yul\":18814:18816   */\n      iszero\n      tag_482\n      jumpi\n        /* \"#utility.yul\":18870:18888   */\n      tag_483\n      tag_484\n      jump\t// in\n    tag_483:\n        /* \"#utility.yul\":18814:18816   */\n    tag_482:\n        /* \"#utility.yul\":18635:18904   */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18910:19191   */\n    tag_443:\n        /* \"#utility.yul\":18993:19020   */\n      tag_486\n        /* \"#utility.yul\":19015:19019   */\n      dup3\n        /* \"#utility.yul\":18993:19020   */\n      tag_341\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":18985:18991   */\n      dup2\n        /* \"#utility.yul\":18981:19021   */\n      add\n        /* \"#utility.yul\":19123:19129   */\n      dup2\n        /* \"#utility.yul\":19111:19121   */\n      dup2\n        /* \"#utility.yul\":19108:19130   */\n      lt\n        /* \"#utility.yul\":19087:19105   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":19075:19085   */\n      dup3\n        /* \"#utility.yul\":19072:19106   */\n      gt\n        /* \"#utility.yul\":19069:19131   */\n      or\n        /* \"#utility.yul\":19066:19068   */\n      iszero\n      tag_487\n      jumpi\n        /* \"#utility.yul\":19134:19152   */\n      tag_488\n      tag_448\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":19066:19068   */\n    tag_487:\n        /* \"#utility.yul\":19174:19184   */\n      dup1\n        /* \"#utility.yul\":19170:19172   */\n      0x40\n        /* \"#utility.yul\":19163:19185   */\n      mstore\n        /* \"#utility.yul\":18953:19191   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19197:19377   */\n    tag_460:\n        /* \"#utility.yul\":19245:19322   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19242:19243   */\n      0x00\n        /* \"#utility.yul\":19235:19323   */\n      mstore\n        /* \"#utility.yul\":19342:19346   */\n      0x11\n        /* \"#utility.yul\":19339:19340   */\n      0x04\n        /* \"#utility.yul\":19332:19347   */\n      mstore\n        /* \"#utility.yul\":19366:19370   */\n      0x24\n        /* \"#utility.yul\":19363:19364   */\n      0x00\n        /* \"#utility.yul\":19356:19371   */\n      revert\n        /* \"#utility.yul\":19383:19563   */\n    tag_484:\n        /* \"#utility.yul\":19431:19508   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19428:19429   */\n      0x00\n        /* \"#utility.yul\":19421:19509   */\n      mstore\n        /* \"#utility.yul\":19528:19532   */\n      0x22\n        /* \"#utility.yul\":19525:19526   */\n      0x04\n        /* \"#utility.yul\":19518:19533   */\n      mstore\n        /* \"#utility.yul\":19552:19556   */\n      0x24\n        /* \"#utility.yul\":19549:19550   */\n      0x00\n        /* \"#utility.yul\":19542:19557   */\n      revert\n        /* \"#utility.yul\":19569:19749   */\n    tag_448:\n        /* \"#utility.yul\":19617:19694   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19614:19615   */\n      0x00\n        /* \"#utility.yul\":19607:19695   */\n      mstore\n        /* \"#utility.yul\":19714:19718   */\n      0x41\n        /* \"#utility.yul\":19711:19712   */\n      0x04\n        /* \"#utility.yul\":19704:19719   */\n      mstore\n        /* \"#utility.yul\":19738:19742   */\n      0x24\n        /* \"#utility.yul\":19735:19736   */\n      0x00\n        /* \"#utility.yul\":19728:19743   */\n      revert\n        /* \"#utility.yul\":19755:19857   */\n    tag_341:\n        /* \"#utility.yul\":19796:19802   */\n      0x00\n        /* \"#utility.yul\":19847:19849   */\n      0x1f\n        /* \"#utility.yul\":19843:19850   */\n      not\n        /* \"#utility.yul\":19838:19840   */\n      0x1f\n        /* \"#utility.yul\":19831:19836   */\n      dup4\n        /* \"#utility.yul\":19827:19841   */\n      add\n        /* \"#utility.yul\":19823:19851   */\n      and\n        /* \"#utility.yul\":19813:19851   */\n      swap1\n      pop\n        /* \"#utility.yul\":19803:19857   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19863:20095   */\n    tag_360:\n        /* \"#utility.yul\":20003:20037   */\n      0x4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65\n        /* \"#utility.yul\":19999:20000   */\n      0x00\n        /* \"#utility.yul\":19991:19997   */\n      dup3\n        /* \"#utility.yul\":19987:20001   */\n      add\n        /* \"#utility.yul\":19980:20038   */\n      mstore\n        /* \"#utility.yul\":20072:20087   */\n      0x72206f7220617070726f76656400000000000000000000000000000000000000\n        /* \"#utility.yul\":20067:20069   */\n      0x20\n        /* \"#utility.yul\":20059:20065   */\n      dup3\n        /* \"#utility.yul\":20055:20070   */\n      add\n        /* \"#utility.yul\":20048:20088   */\n      mstore\n        /* \"#utility.yul\":19969:20095   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20101:20338   */\n    tag_365:\n        /* \"#utility.yul\":20241:20275   */\n      0x4552433732313a207472616e7366657220746f206e6f6e204552433732315265\n        /* \"#utility.yul\":20237:20238   */\n      0x00\n        /* \"#utility.yul\":20229:20235   */\n      dup3\n        /* \"#utility.yul\":20225:20239   */\n      add\n        /* \"#utility.yul\":20218:20276   */\n      mstore\n        /* \"#utility.yul\":20310:20330   */\n      0x63656976657220696d706c656d656e7465720000000000000000000000000000\n        /* \"#utility.yul\":20305:20307   */\n      0x20\n        /* \"#utility.yul\":20297:20303   */\n      dup3\n        /* \"#utility.yul\":20293:20308   */\n      add\n        /* \"#utility.yul\":20286:20331   */\n      mstore\n        /* \"#utility.yul\":20207:20338   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20344:20568   */\n    tag_370:\n        /* \"#utility.yul\":20484:20518   */\n      0x4552433732313a207472616e736665722066726f6d20696e636f727265637420\n        /* \"#utility.yul\":20480:20481   */\n      0x00\n        /* \"#utility.yul\":20472:20478   */\n      dup3\n        /* \"#utility.yul\":20468:20482   */\n      add\n        /* \"#utility.yul\":20461:20519   */\n      mstore\n        /* \"#utility.yul\":20553:20560   */\n      0x6f776e6572000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":20548:20550   */\n      0x20\n        /* \"#utility.yul\":20540:20546   */\n      dup3\n        /* \"#utility.yul\":20536:20551   */\n      add\n        /* \"#utility.yul\":20529:20561   */\n      mstore\n        /* \"#utility.yul\":20450:20568   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20574:20797   */\n    tag_375:\n        /* \"#utility.yul\":20714:20748   */\n      0x4552433732313a207472616e7366657220746f20746865207a65726f20616464\n        /* \"#utility.yul\":20710:20711   */\n      0x00\n        /* \"#utility.yul\":20702:20708   */\n      dup3\n        /* \"#utility.yul\":20698:20712   */\n      add\n        /* \"#utility.yul\":20691:20749   */\n      mstore\n        /* \"#utility.yul\":20783:20789   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":20778:20780   */\n      0x20\n        /* \"#utility.yul\":20770:20776   */\n      dup3\n        /* \"#utility.yul\":20766:20781   */\n      add\n        /* \"#utility.yul\":20759:20790   */\n      mstore\n        /* \"#utility.yul\":20680:20797   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20803:20978   */\n    tag_380:\n        /* \"#utility.yul\":20943:20970   */\n      0x4552433732313a20617070726f766520746f2063616c6c657200000000000000\n        /* \"#utility.yul\":20939:20940   */\n      0x00\n        /* \"#utility.yul\":20931:20937   */\n      dup3\n        /* \"#utility.yul\":20927:20941   */\n      add\n        /* \"#utility.yul\":20920:20971   */\n      mstore\n        /* \"#utility.yul\":20909:20978   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20984:21212   */\n    tag_385:\n        /* \"#utility.yul\":21124:21158   */\n      0x4552433732313a2061646472657373207a65726f206973206e6f742061207661\n        /* \"#utility.yul\":21120:21121   */\n      0x00\n        /* \"#utility.yul\":21112:21118   */\n      dup3\n        /* \"#utility.yul\":21108:21122   */\n      add\n        /* \"#utility.yul\":21101:21159   */\n      mstore\n        /* \"#utility.yul\":21193:21204   */\n      0x6c6964206f776e65720000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21188:21190   */\n      0x20\n        /* \"#utility.yul\":21180:21186   */\n      dup3\n        /* \"#utility.yul\":21176:21191   */\n      add\n        /* \"#utility.yul\":21169:21205   */\n      mstore\n        /* \"#utility.yul\":21090:21212   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21218:21392   */\n    tag_390:\n        /* \"#utility.yul\":21358:21384   */\n      0x4552433732313a20696e76616c696420746f6b656e2049440000000000000000\n        /* \"#utility.yul\":21354:21355   */\n      0x00\n        /* \"#utility.yul\":21346:21352   */\n      dup3\n        /* \"#utility.yul\":21342:21356   */\n      add\n        /* \"#utility.yul\":21335:21385   */\n      mstore\n        /* \"#utility.yul\":21324:21392   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21398:21618   */\n    tag_395:\n        /* \"#utility.yul\":21538:21572   */\n      0x4552433732313a20617070726f76616c20746f2063757272656e74206f776e65\n        /* \"#utility.yul\":21534:21535   */\n      0x00\n        /* \"#utility.yul\":21526:21532   */\n      dup3\n        /* \"#utility.yul\":21522:21536   */\n      add\n        /* \"#utility.yul\":21515:21573   */\n      mstore\n        /* \"#utility.yul\":21607:21610   */\n      0x7200000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21602:21604   */\n      0x20\n        /* \"#utility.yul\":21594:21600   */\n      dup3\n        /* \"#utility.yul\":21590:21605   */\n      add\n        /* \"#utility.yul\":21583:21611   */\n      mstore\n        /* \"#utility.yul\":21504:21618   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21624:21872   */\n    tag_400:\n        /* \"#utility.yul\":21764:21798   */\n      0x4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f\n        /* \"#utility.yul\":21760:21761   */\n      0x00\n        /* \"#utility.yul\":21752:21758   */\n      dup3\n        /* \"#utility.yul\":21748:21762   */\n      add\n        /* \"#utility.yul\":21741:21799   */\n      mstore\n        /* \"#utility.yul\":21833:21864   */\n      0x6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000\n        /* \"#utility.yul\":21828:21830   */\n      0x20\n        /* \"#utility.yul\":21820:21826   */\n      dup3\n        /* \"#utility.yul\":21816:21831   */\n      add\n        /* \"#utility.yul\":21809:21865   */\n      mstore\n        /* \"#utility.yul\":21730:21872   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21878:22000   */\n    tag_268:\n        /* \"#utility.yul\":21951:21975   */\n      tag_503\n        /* \"#utility.yul\":21969:21974   */\n      dup2\n        /* \"#utility.yul\":21951:21975   */\n      tag_327\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":21944:21949   */\n      dup2\n        /* \"#utility.yul\":21941:21976   */\n      eq\n        /* \"#utility.yul\":21931:21933   */\n      tag_504\n      jumpi\n        /* \"#utility.yul\":21990:21991   */\n      0x00\n        /* \"#utility.yul\":21987:21988   */\n      dup1\n        /* \"#utility.yul\":21980:21992   */\n      revert\n        /* \"#utility.yul\":21931:21933   */\n    tag_504:\n        /* \"#utility.yul\":21921:22000   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22006:22122   */\n    tag_272:\n        /* \"#utility.yul\":22076:22097   */\n      tag_506\n        /* \"#utility.yul\":22091:22096   */\n      dup2\n        /* \"#utility.yul\":22076:22097   */\n      tag_331\n      jump\t// in\n    tag_506:\n        /* \"#utility.yul\":22069:22074   */\n      dup2\n        /* \"#utility.yul\":22066:22098   */\n      eq\n        /* \"#utility.yul\":22056:22058   */\n      tag_507\n      jumpi\n        /* \"#utility.yul\":22112:22113   */\n      0x00\n        /* \"#utility.yul\":22109:22110   */\n      dup1\n        /* \"#utility.yul\":22102:22114   */\n      revert\n        /* \"#utility.yul\":22056:22058   */\n    tag_507:\n        /* \"#utility.yul\":22046:22122   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22128:22248   */\n    tag_276:\n        /* \"#utility.yul\":22200:22223   */\n      tag_509\n        /* \"#utility.yul\":22217:22222   */\n      dup2\n        /* \"#utility.yul\":22200:22223   */\n      tag_470\n      jump\t// in\n    tag_509:\n        /* \"#utility.yul\":22193:22198   */\n      dup2\n        /* \"#utility.yul\":22190:22224   */\n      eq\n        /* \"#utility.yul\":22180:22182   */\n      tag_510\n      jumpi\n        /* \"#utility.yul\":22238:22239   */\n      0x00\n        /* \"#utility.yul\":22235:22236   */\n      dup1\n        /* \"#utility.yul\":22228:22240   */\n      revert\n        /* \"#utility.yul\":22180:22182   */\n    tag_510:\n        /* \"#utility.yul\":22170:22248   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22254:22376   */\n    tag_287:\n        /* \"#utility.yul\":22327:22351   */\n      tag_512\n        /* \"#utility.yul\":22345:22350   */\n      dup2\n        /* \"#utility.yul\":22327:22351   */\n      tag_404\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":22320:22325   */\n      dup2\n        /* \"#utility.yul\":22317:22352   */\n      eq\n        /* \"#utility.yul\":22307:22309   */\n      tag_513\n      jumpi\n        /* \"#utility.yul\":22366:22367   */\n      0x00\n        /* \"#utility.yul\":22363:22364   */\n      dup1\n        /* \"#utility.yul\":22356:22368   */\n      revert\n        /* \"#utility.yul\":22307:22309   */\n    tag_513:\n        /* \"#utility.yul\":22297:22376   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122056c7962c23fb6b7f50d717f79202bc8f741fa0cb40c9d76bf73520c87270100064736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3266:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "102:259:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "112:75:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "179:6:12"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "137:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "137:49:12"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "121:15:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "121:66:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "112:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "203:5:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "210:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "196:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "196:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "196:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "226:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "241:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "248:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "237:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "237:16:12"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "230:3:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "291:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "300:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "303:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "293:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "293:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "293:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "272:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "277:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "268:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "268:16:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "286:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "265:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "265:25:12"
															},
															"nodeType": "YulIf",
															"src": "262:2:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "338:3:12"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "343:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "348:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "316:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "316:39:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "316:39:12"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "75:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "80:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "88:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "96:5:12",
														"type": ""
													}
												],
												"src": "7:354:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "454:215:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "503:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "512:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "515:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "505:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "505:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "505:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "482:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "490:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "478:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "478:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "497:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "474:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "474:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "467:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "467:35:12"
															},
															"nodeType": "YulIf",
															"src": "464:2:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "528:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "548:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "542:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "542:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "532:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "564:99:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "636:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "644:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "632:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "632:17:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "651:6:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "659:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "573:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:90:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "564:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "432:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "440:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "448:5:12",
														"type": ""
													}
												],
												"src": "381:288:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "789:538:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "835:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "844:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "847:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "837:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "837:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "837:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "810:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "819:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "806:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "806:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "831:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "802:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "802:32:12"
															},
															"nodeType": "YulIf",
															"src": "799:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "861:224:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "876:38:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "900:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "911:1:12",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "896:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "896:17:12"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "890:5:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "890:24:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "880:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "961:16:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "970:1:12",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "973:1:12",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nodeType": "YulIdentifier",
																						"src": "963:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:12:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "963:12:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "933:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "941:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "930:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "927:2:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "991:84:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1047:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1058:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1043:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1043:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1067:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1001:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1001:74:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "991:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1095:225:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1110:39:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1134:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1145:2:12",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1130:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1130:18:12"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1124:5:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1124:25:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1114:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1196:16:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1205:1:12",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1208:1:12",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nodeType": "YulIdentifier",
																						"src": "1198:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1198:12:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1198:12:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1168:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1176:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1165:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1165:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "1162:2:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1226:84:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1282:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1293:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1278:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1278:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1302:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1236:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1236:74:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1226:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "751:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "762:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "774:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "782:6:12",
														"type": ""
													}
												],
												"src": "675:652:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1374:88:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1384:30:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1394:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1394:20:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1384:6:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1443:6:12"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1451:4:12"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1423:19:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1423:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1423:33:12"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1358:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1367:6:12",
														"type": ""
													}
												],
												"src": "1333:129:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1508:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1518:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1534:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1528:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1528:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1518:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1501:6:12",
														"type": ""
													}
												],
												"src": "1468:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1616:241:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1721:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1723:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1723:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1723:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1693:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1701:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1690:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:30:12"
															},
															"nodeType": "YulIf",
															"src": "1687:2:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1753:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1783:6:12"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "1761:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1761:29:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1753:4:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1827:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1839:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1845:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1835:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1835:15:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1827:4:12"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1600:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1611:4:12",
														"type": ""
													}
												],
												"src": "1549:308:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1912:258:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1922:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1931:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1926:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1991:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2016:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2021:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2012:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2012:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "2035:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "2040:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2031:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2031:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2025:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2025:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2005:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2005:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2005:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1952:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1955:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1949:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1949:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1963:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1965:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1974:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1977:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1970:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1970:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1965:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1945:3:12",
																"statements": []
															},
															"src": "1941:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2088:76:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2138:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2143:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2134:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2134:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2152:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2127:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2127:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2127:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2069:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2072:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2066:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2066:13:12"
															},
															"nodeType": "YulIf",
															"src": "2063:2:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1894:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1899:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1904:6:12",
														"type": ""
													}
												],
												"src": "1863:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2237:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2251:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2257:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2247:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2247:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2237:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2268:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2298:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2304:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2294:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2272:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2345:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2359:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2373:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2381:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2369:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2369:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2359:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2325:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2318:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2318:26:12"
															},
															"nodeType": "YulIf",
															"src": "2315:2:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2448:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "2462:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2462:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2462:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2412:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2435:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2443:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2432:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2432:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2409:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2409:38:12"
															},
															"nodeType": "YulIf",
															"src": "2406:2:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2211:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2220:6:12",
														"type": ""
													}
												],
												"src": "2176:320:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2545:238:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2555:58:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2577:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "2607:4:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2585:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2585:27:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2573:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2573:40:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2559:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2724:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2726:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2667:10:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2679:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2664:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2664:34:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2703:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2715:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2700:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2700:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2661:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2661:62:12"
															},
															"nodeType": "YulIf",
															"src": "2658:2:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2762:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "2766:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2755:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2755:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2755:22:12"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2531:6:12",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2539:4:12",
														"type": ""
													}
												],
												"src": "2502:281:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2817:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2834:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2837:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2827:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2827:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2931:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2934:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2924:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2924:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2924:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2955:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2958:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2948:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2948:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2948:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "2789:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3003:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3020:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3023:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3013:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3013:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3013:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3117:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3120:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3110:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3110:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3110:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3141:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3144:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3134:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3134:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3134:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2975:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3209:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3219:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3237:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3244:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3233:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3233:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3253:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3249:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3249:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3229:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3229:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "3219:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3192:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "3202:6:12",
														"type": ""
													}
												],
												"src": "3161:102:12"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200276538038062002765833981810160405281019062000037919062000193565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b50505062000376565b8280546200007f906200029b565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200022f565b62000206565b9050828152602081018484840111156200015157600080fd5b6200015e84828562000265565b509392505050565b600082601f8301126200017857600080fd5b81516200018a84826020860162000121565b91505092915050565b60008060408385031215620001a757600080fd5b600083015167ffffffffffffffff811115620001c257600080fd5b620001d08582860162000166565b925050602083015167ffffffffffffffff811115620001ee57600080fd5b620001fc8582860162000166565b9150509250929050565b60006200021262000225565b9050620002208282620002d1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200024d576200024c62000336565b5b620002588262000365565b9050602081019050919050565b60005b838110156200028557808201518184015260208101905062000268565b8381111562000295576000848401525b50505050565b60006002820490506001821680620002b457607f821691505b60208210811415620002cb57620002ca62000307565b5b50919050565b620002dc8262000365565b810181811067ffffffffffffffff82111715620002fe57620002fd62000336565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6123df80620003866000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061196f565b6102bc565b6040516100fb9190611c80565b60405180910390f35b61010c61039e565b6040516101199190611c9b565b60405180910390f35b61013c600480360381019061013791906119c1565b610430565b6040516101499190611c19565b60405180910390f35b61016c60048036038101906101679190611933565b610476565b005b6101886004803603810190610183919061182d565b61058e565b005b6101a4600480360381019061019f919061182d565b6105ee565b005b6101c060048036038101906101bb91906119c1565b61060e565b6040516101cd9190611c19565b60405180910390f35b6101f060048036038101906101eb91906117c8565b610695565b6040516101fd9190611ddd565b60405180910390f35b61020e61074d565b60405161021b9190611c9b565b60405180910390f35b61023e600480360381019061023991906118f7565b6107df565b005b61025a6004803603810190610255919061187c565b6107f5565b005b610276600480360381019061027191906119c1565b610857565b6040516102839190611c9b565b60405180910390f35b6102a660048036038101906102a191906117f1565b6108bf565b6040516102b39190611c80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611fd1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611d9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611dbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611cbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611d7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611d5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611fd1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611fd1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611cbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611bf5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611199565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611d7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d1d565b60405180910390fd5b610c5183838360016111da565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611cfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e538383836001611300565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611d3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611c80565b60405180910390a3505050565b61100d848484610b5e565b61101984848484611306565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611cdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110848461149d565b01905060008167ffffffffffffffff8111156110c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110fb5781602001600182028036833780820191505090505b509050600082602001820190505b60011561118e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b04945060008514156111895761118e565b611109565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166111bb83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112fa57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461126e5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112669190611ee7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112f95780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611e91565b925050819055505b5b50505050565b50505050565b60006113278473ffffffffffffffffffffffffffffffffffffffff166116d4565b15611490578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611350610a08565b8786866040518563ffffffff1660e01b81526004016113729493929190611c34565b602060405180830381600087803b15801561138c57600080fd5b505af19250505080156113bd57506040513d601f19601f820116820180604052508101906113ba9190611998565b60015b611440573d80600081146113ed576040519150601f19603f3d011682016040523d82523d6000602084013e6113f2565b606091505b50600081511415611438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142f90611cdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611495565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611521577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611517577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611584576d04ee2d6d415b85acef8100000000838161157a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc1000083106115d957662386f26fc1000083816115cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611628576305f5e100838161161e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611673576127108381611669577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106116bc57606483816116b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a83106116cb576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061170a61170584611e1d565b611df8565b90508281526020810184848401111561172257600080fd5b61172d848285611f8f565b509392505050565b6000813590506117448161234d565b92915050565b60008135905061175981612364565b92915050565b60008135905061176e8161237b565b92915050565b6000815190506117838161237b565b92915050565b600082601f83011261179a57600080fd5b81356117aa8482602086016116f7565b91505092915050565b6000813590506117c281612392565b92915050565b6000602082840312156117da57600080fd5b60006117e884828501611735565b91505092915050565b6000806040838503121561180457600080fd5b600061181285828601611735565b925050602061182385828601611735565b9150509250929050565b60008060006060848603121561184257600080fd5b600061185086828701611735565b935050602061186186828701611735565b9250506040611872868287016117b3565b9150509250925092565b6000806000806080858703121561189257600080fd5b60006118a087828801611735565b94505060206118b187828801611735565b93505060406118c2878288016117b3565b925050606085013567ffffffffffffffff8111156118df57600080fd5b6118eb87828801611789565b91505092959194509250565b6000806040838503121561190a57600080fd5b600061191885828601611735565b92505060206119298582860161174a565b9150509250929050565b6000806040838503121561194657600080fd5b600061195485828601611735565b9250506020611965858286016117b3565b9150509250929050565b60006020828403121561198157600080fd5b600061198f8482850161175f565b91505092915050565b6000602082840312156119aa57600080fd5b60006119b884828501611774565b91505092915050565b6000602082840312156119d357600080fd5b60006119e1848285016117b3565b91505092915050565b6119f381611f1b565b82525050565b611a0281611f2d565b82525050565b6000611a1382611e4e565b611a1d8185611e64565b9350611a2d818560208601611f9e565b611a36816120c1565b840191505092915050565b6000611a4c82611e59565b611a568185611e75565b9350611a66818560208601611f9e565b611a6f816120c1565b840191505092915050565b6000611a8582611e59565b611a8f8185611e86565b9350611a9f818560208601611f9e565b80840191505092915050565b6000611ab8602d83611e75565b9150611ac3826120d2565b604082019050919050565b6000611adb603283611e75565b9150611ae682612121565b604082019050919050565b6000611afe602583611e75565b9150611b0982612170565b604082019050919050565b6000611b21602483611e75565b9150611b2c826121bf565b604082019050919050565b6000611b44601983611e75565b9150611b4f8261220e565b602082019050919050565b6000611b67602983611e75565b9150611b7282612237565b604082019050919050565b6000611b8a601883611e75565b9150611b9582612286565b602082019050919050565b6000611bad602183611e75565b9150611bb8826122af565b604082019050919050565b6000611bd0603d83611e75565b9150611bdb826122fe565b604082019050919050565b611bef81611f85565b82525050565b6000611c018285611a7a565b9150611c0d8284611a7a565b91508190509392505050565b6000602082019050611c2e60008301846119ea565b92915050565b6000608082019050611c4960008301876119ea565b611c5660208301866119ea565b611c636040830185611be6565b8181036060830152611c758184611a08565b905095945050505050565b6000602082019050611c9560008301846119f9565b92915050565b60006020820190508181036000830152611cb58184611a41565b905092915050565b60006020820190508181036000830152611cd681611aab565b9050919050565b60006020820190508181036000830152611cf681611ace565b9050919050565b60006020820190508181036000830152611d1681611af1565b9050919050565b60006020820190508181036000830152611d3681611b14565b9050919050565b60006020820190508181036000830152611d5681611b37565b9050919050565b60006020820190508181036000830152611d7681611b5a565b9050919050565b60006020820190508181036000830152611d9681611b7d565b9050919050565b60006020820190508181036000830152611db681611ba0565b9050919050565b60006020820190508181036000830152611dd681611bc3565b9050919050565b6000602082019050611df26000830184611be6565b92915050565b6000611e02611e13565b9050611e0e8282612003565b919050565b6000604051905090565b600067ffffffffffffffff821115611e3857611e37612092565b5b611e41826120c1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e9c82611f85565b9150611ea783611f85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611edc57611edb612034565b5b828201905092915050565b6000611ef282611f85565b9150611efd83611f85565b925082821015611f1057611f0f612034565b5b828203905092915050565b6000611f2682611f65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611fbc578082015181840152602081019050611fa1565b83811115611fcb576000848401525b50505050565b60006002820490506001821680611fe957607f821691505b60208210811415611ffd57611ffc612063565b5b50919050565b61200c826120c1565b810181811067ffffffffffffffff8211171561202b5761202a612092565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61235681611f1b565b811461236157600080fd5b50565b61236d81611f2d565b811461237857600080fd5b50565b61238481611f39565b811461238f57600080fd5b50565b61239b81611f85565b81146123a657600080fd5b5056fea264697066735822122056c7962c23fb6b7f50d717f79202bc8f741fa0cb40c9d76bf73520c87270100064736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2765 CODESIZE SUB DUP1 PUSH3 0x2765 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x193 JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x376 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x29B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138 PUSH3 0x132 DUP5 PUSH3 0x22F JUMP JUMPDEST PUSH3 0x206 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15E DUP5 DUP3 DUP6 PUSH3 0x265 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x18A DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1D0 DUP6 DUP3 DUP7 ADD PUSH3 0x166 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1FC DUP6 DUP3 DUP7 ADD PUSH3 0x166 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x212 PUSH3 0x225 JUMP JUMPDEST SWAP1 POP PUSH3 0x220 DUP3 DUP3 PUSH3 0x2D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x24D JUMPI PUSH3 0x24C PUSH3 0x336 JUMP JUMPDEST JUMPDEST PUSH3 0x258 DUP3 PUSH3 0x365 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x285 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x268 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x295 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2B4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2CB JUMPI PUSH3 0x2CA PUSH3 0x307 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2DC DUP3 PUSH3 0x365 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2FE JUMPI PUSH3 0x2FD PUSH3 0x336 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23DF DUP1 PUSH3 0x386 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1933 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x17C8 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x18F7 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1DBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x11DA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1300 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x149D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10C9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x118E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1178 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1189 JUMPI PUSH2 0x118E JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11BB DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x126E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F9 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16D4 JUMP JUMPDEST ISZERO PUSH2 0x1490 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1350 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1372 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BA SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1440 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1521 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1517 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1584 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x157A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15D9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x15CF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1628 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x161E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1673 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170A PUSH2 0x1705 DUP5 PUSH2 0x1E1D JUMP JUMPDEST PUSH2 0x1DF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x172D DUP5 DUP3 DUP6 PUSH2 0x1F8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1744 DUP2 PUSH2 0x234D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x2364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x176E DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1783 DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17AA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x16F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C2 DUP2 PUSH2 0x2392 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17E8 DUP5 DUP3 DUP6 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1812 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1823 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1850 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1861 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1872 DUP7 DUP3 DUP8 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A0 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x18C2 DUP8 DUP3 DUP9 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP8 DUP3 DUP9 ADD PUSH2 0x1789 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1918 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1929 DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1954 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1965 DUP6 DUP3 DUP7 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x198F DUP5 DUP3 DUP6 ADD PUSH2 0x175F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP3 DUP6 ADD PUSH2 0x1774 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19E1 DUP5 DUP3 DUP6 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F3 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1A02 DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP3 PUSH2 0x1E4E JUMP JUMPDEST PUSH2 0x1A1D DUP2 DUP6 PUSH2 0x1E64 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A2D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A36 DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A4C DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A56 DUP2 DUP6 PUSH2 0x1E75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A66 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A6F DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A85 DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A8F DUP2 DUP6 PUSH2 0x1E86 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AB8 PUSH1 0x2D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AC3 DUP3 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADB PUSH1 0x32 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE6 DUP3 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x25 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B21 PUSH1 0x24 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B2C DUP3 PUSH2 0x21BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 PUSH1 0x19 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B4F DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B67 PUSH1 0x29 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B72 DUP3 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8A PUSH1 0x18 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B95 DUP3 PUSH2 0x2286 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAD PUSH1 0x21 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB8 DUP3 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD0 PUSH1 0x3D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BDB DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BEF DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 DUP3 DUP6 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0D DUP3 DUP5 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1C75 DUP2 DUP5 PUSH2 0x1A08 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB5 DUP2 DUP5 PUSH2 0x1A41 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CF6 DUP2 PUSH2 0x1ACE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D16 DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D36 DUP2 PUSH2 0x1B14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D56 DUP2 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D76 DUP2 PUSH2 0x1B5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D96 DUP2 PUSH2 0x1B7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DB6 DUP2 PUSH2 0x1BA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DD6 DUP2 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E02 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0E DUP3 DUP3 PUSH2 0x2003 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST PUSH2 0x1E41 DUP3 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E9C DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EA7 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EDC JUMPI PUSH2 0x1EDB PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF2 DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFD DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F26 DUP3 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1FCB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1FE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1FFD JUMPI PUSH2 0x1FFC PUSH2 0x2063 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200C DUP3 PUSH2 0x20C1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x202B JUMPI PUSH2 0x202A PUSH2 0x2092 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2356 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP2 EQ PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x236D DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP2 EQ PUSH2 0x2378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2384 DUP2 PUSH2 0x1F39 JUMP JUMPDEST DUP2 EQ PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x239B DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP2 EQ PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP 0xC7 SWAP7 0x2C 0x23 0xFB PUSH12 0x7F50D717F79202BC8F741FA0 0xCB BLOCKHASH 0xC9 0xD7 PUSH12 0xF73520C87270100064736F6C PUSH4 0x43000804 STOP CALLER ",
							"sourceMap": "628:16327:0:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:354:12:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:2;;;303:1;300;293:12;262:2;316:39;348:6;343:3;338;316:39;:::i;:::-;102:259;;;;;;:::o;381:288::-;448:5;497:3;490:4;482:6;478:17;474:27;464:2;;515:1;512;505:12;464:2;548:6;542:13;573:90;659:3;651:6;644:4;636:6;632:17;573:90;:::i;:::-;564:99;;454:215;;;;;:::o;675:652::-;774:6;782;831:2;819:9;810:7;806:23;802:32;799:2;;;847:1;844;837:12;799:2;911:1;900:9;896:17;890:24;941:18;933:6;930:30;927:2;;;973:1;970;963:12;927:2;1001:74;1067:7;1058:6;1047:9;1043:22;1001:74;:::i;:::-;991:84;;861:224;1145:2;1134:9;1130:18;1124:25;1176:18;1168:6;1165:30;1162:2;;;1208:1;1205;1198:12;1162:2;1236:74;1302:7;1293:6;1282:9;1278:22;1236:74;:::i;:::-;1226:84;;1095:225;789:538;;;;;:::o;1333:129::-;1367:6;1394:20;;:::i;:::-;1384:30;;1423:33;1451:4;1443:6;1423:33;:::i;:::-;1374:88;;;:::o;1468:75::-;1501:6;1534:2;1528:9;1518:19;;1508:35;:::o;1549:308::-;1611:4;1701:18;1693:6;1690:30;1687:2;;;1723:18;;:::i;:::-;1687:2;1761:29;1783:6;1761:29;:::i;:::-;1753:37;;1845:4;1839;1835:15;1827:23;;1616:241;;;:::o;1863:307::-;1931:1;1941:113;1955:6;1952:1;1949:13;1941:113;;;2040:1;2035:3;2031:11;2025:18;2021:1;2016:3;2012:11;2005:39;1977:2;1974:1;1970:10;1965:15;;1941:113;;;2072:6;2069:1;2066:13;2063:2;;;2152:1;2143:6;2138:3;2134:16;2127:27;2063:2;1912:258;;;;:::o;2176:320::-;2220:6;2257:1;2251:4;2247:12;2237:22;;2304:1;2298:4;2294:12;2325:18;2315:2;;2381:4;2373:6;2369:17;2359:27;;2315:2;2443;2435:6;2432:14;2412:18;2409:38;2406:2;;;2462:18;;:::i;:::-;2406:2;2227:269;;;;:::o;2502:281::-;2585:27;2607:4;2585:27;:::i;:::-;2577:6;2573:40;2715:6;2703:10;2700:22;2679:18;2667:10;2664:34;2661:62;2658:2;;;2726:18;;:::i;:::-;2658:2;2766:10;2762:2;2755:22;2545:238;;;:::o;2789:180::-;2837:77;2834:1;2827:88;2934:4;2931:1;2924:15;2958:4;2955:1;2948:15;2975:180;3023:77;3020:1;3013:88;3120:4;3117:1;3110:15;3144:4;3141:1;3134:15;3161:102;3202:6;3253:2;3249:7;3244:2;3237:5;3233:14;3229:28;3219:38;;3209:54;;;:::o;628:16327:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:22379:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "90:260:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "100:74:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "166:6:12"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "125:40:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:48:12"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "109:15:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "109:65:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "100:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "190:5:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "197:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "183:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "183:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "183:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "213:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "228:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "235:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "224:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:16:12"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "217:3:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "287:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "290:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "280:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "259:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "264:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "255:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "255:16:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "273:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "252:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:25:12"
															},
															"nodeType": "YulIf",
															"src": "249:2:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "327:3:12"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "332:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "337:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "303:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "303:41:12"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "63:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "68:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "76:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "84:5:12",
														"type": ""
													}
												],
												"src": "7:343:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "408:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "418:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "440:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "427:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "427:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "418:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "483:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "456:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "456:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "456:33:12"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "386:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "394:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "402:5:12",
														"type": ""
													}
												],
												"src": "356:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "550:84:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "560:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "582:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "569:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "560:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "622:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "598:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "598:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "598:30:12"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "528:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "536:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "544:5:12",
														"type": ""
													}
												],
												"src": "501:133:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "691:86:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "701:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "723:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "710:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "710:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "701:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "765:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "739:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "739:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "739:32:12"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "669:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "677:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "685:5:12",
														"type": ""
													}
												],
												"src": "640:137:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "845:79:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "855:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "870:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "864:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "864:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "855:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "912:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "886:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "886:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "886:32:12"
														}
													]
												},
												"name": "abi_decode_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "823:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "831:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "839:5:12",
														"type": ""
													}
												],
												"src": "783:141:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1004:210:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1053:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1062:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1065:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1055:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1055:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1055:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1032:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1040:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1028:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1028:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "1047:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1024:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1024:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1017:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1017:35:12"
															},
															"nodeType": "YulIf",
															"src": "1014:2:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1078:34:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1105:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1092:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1092:20:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1082:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1121:87:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1181:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1189:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1177:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1177:17:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1196:6:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1204:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "1130:46:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1130:78:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1121:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "982:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "990:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "998:5:12",
														"type": ""
													}
												],
												"src": "943:271:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1272:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1282:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1304:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1291:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1291:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1282:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1347:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1320:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1320:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1320:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1250:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1258:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1266:5:12",
														"type": ""
													}
												],
												"src": "1220:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1431:196:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1477:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1486:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1489:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1479:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1479:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1479:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1452:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1461:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1448:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1448:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1473:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1444:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1444:32:12"
															},
															"nodeType": "YulIf",
															"src": "1441:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "1503:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1518:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1532:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1522:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1547:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1582:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1593:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1578:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1578:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1602:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1557:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1557:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1547:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1401:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1412:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1424:6:12",
														"type": ""
													}
												],
												"src": "1365:262:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1716:324:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1762:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1771:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1774:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1764:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1764:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1764:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1737:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1746:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1733:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1733:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1758:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1729:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:32:12"
															},
															"nodeType": "YulIf",
															"src": "1726:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "1788:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1803:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1817:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1807:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1832:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1867:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1878:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1863:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1863:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1887:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1842:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1832:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1915:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1930:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1944:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1934:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1960:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1995:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2006:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1991:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1991:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2015:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1970:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1970:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1960:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1678:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1689:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1701:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1709:6:12",
														"type": ""
													}
												],
												"src": "1633:407:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2146:452:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2192:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2201:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2204:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2194:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2194:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2194:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2167:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2176:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2163:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2163:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2188:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2159:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2159:32:12"
															},
															"nodeType": "YulIf",
															"src": "2156:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "2218:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2233:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2247:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2237:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2262:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2297:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2308:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2293:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2293:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2317:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2272:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2272:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2262:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2345:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2360:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2374:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2364:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2390:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2425:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2436:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2421:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2421:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2445:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2400:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2400:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2390:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2473:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2488:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2502:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2492:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2518:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2553:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2564:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2549:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2549:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2573:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2528:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2528:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "2518:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2100:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2111:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2123:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2131:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2139:6:12",
														"type": ""
													}
												],
												"src": "2046:552:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2730:683:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2777:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2786:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2789:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2779:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2779:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2779:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2751:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2760:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2747:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2747:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2772:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2743:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2743:33:12"
															},
															"nodeType": "YulIf",
															"src": "2740:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "2803:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2818:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2832:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2822:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2847:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2882:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2893:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2878:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2878:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2902:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2857:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2847:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2930:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2945:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2959:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2949:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2975:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3010:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3021:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3006:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3006:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3030:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2985:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2985:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2975:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3058:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3073:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3087:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3077:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3103:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3138:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3149:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3134:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3134:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3158:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3113:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3113:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "3103:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3186:220:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3201:46:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3232:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3243:2:12",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3228:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3228:18:12"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3215:12:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3215:32:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3205:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3294:16:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3303:1:12",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3306:1:12",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nodeType": "YulIdentifier",
																						"src": "3296:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3296:12:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3296:12:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3266:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3274:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3263:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3263:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "3260:2:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3324:72:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3368:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3379:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3364:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3364:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3388:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "3334:29:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3334:62:12"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "3324:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2676:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2687:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2699:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2707:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2715:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2723:6:12",
														"type": ""
													}
												],
												"src": "2604:809:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3499:321:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3545:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3554:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3557:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3547:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3547:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3547:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3520:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3529:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3516:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3516:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3541:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3512:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3512:32:12"
															},
															"nodeType": "YulIf",
															"src": "3509:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "3571:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3586:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3600:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3590:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3615:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3650:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3661:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3646:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3646:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3670:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3625:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3625:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3615:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3698:115:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3713:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3727:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3717:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3743:60:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3775:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3786:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3771:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3771:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3795:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3753:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3753:50:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3743:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3461:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3472:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3484:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3492:6:12",
														"type": ""
													}
												],
												"src": "3419:401:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3909:324:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3955:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3964:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3967:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3957:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3957:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3957:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3930:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3939:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3926:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3926:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3951:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3922:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3922:32:12"
															},
															"nodeType": "YulIf",
															"src": "3919:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "3981:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3996:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4010:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4000:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4025:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4060:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4071:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4056:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4056:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4080:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4035:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4035:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4025:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4108:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4123:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4137:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4127:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4153:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4188:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4199:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4184:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4184:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4208:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4163:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4163:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4153:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3871:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3882:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3894:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3902:6:12",
														"type": ""
													}
												],
												"src": "3826:407:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4304:195:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4350:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4359:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4362:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4352:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4352:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4352:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4325:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4334:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4321:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4321:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4346:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4317:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4317:32:12"
															},
															"nodeType": "YulIf",
															"src": "4314:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "4376:116:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4391:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4405:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4395:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4420:62:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4454:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4465:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4450:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4450:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4474:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "4430:19:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4430:52:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4274:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4285:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4297:6:12",
														"type": ""
													}
												],
												"src": "4239:260:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4581:206:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4627:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4636:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4639:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4629:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4629:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4629:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4602:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4611:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4598:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4598:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4623:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4594:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4594:32:12"
															},
															"nodeType": "YulIf",
															"src": "4591:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "4653:127:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4668:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4682:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4672:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4697:73:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4742:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4753:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4738:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4738:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4762:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "4707:30:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4707:63:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4697:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4551:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4562:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4574:6:12",
														"type": ""
													}
												],
												"src": "4505:282:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4859:196:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4905:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4914:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4917:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4907:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4907:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4907:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4880:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4889:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4876:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4876:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4901:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4872:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4872:32:12"
															},
															"nodeType": "YulIf",
															"src": "4869:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "4931:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4946:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4960:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4950:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4975:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5010:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5021:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5006:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5006:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5030:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4985:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4985:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4975:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4829:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4840:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4852:6:12",
														"type": ""
													}
												],
												"src": "4793:262:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5126:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5143:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5166:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5148:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5148:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5136:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5136:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5136:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5114:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5121:3:12",
														"type": ""
													}
												],
												"src": "5061:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5244:50:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5261:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5281:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "5266:14:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5266:21:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5254:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5254:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5254:34:12"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5232:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5239:3:12",
														"type": ""
													}
												],
												"src": "5185:109:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5390:270:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5400:52:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5446:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "5414:31:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5414:38:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5404:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5461:77:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5526:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5531:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5468:57:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:70:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5573:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5580:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5569:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5569:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5587:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5592:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5547:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5547:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5547:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5608:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5619:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5646:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "5624:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5624:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5615:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5615:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5608:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5371:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5378:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5386:3:12",
														"type": ""
													}
												],
												"src": "5300:360:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5758:272:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5768:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5815:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "5782:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5782:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5772:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5830:78:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5896:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5901:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5837:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5837:71:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5830:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5943:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5950:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5939:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5939:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5957:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5962:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5917:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5917:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5917:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5978:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5989:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6016:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "5994:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5994:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5985:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5985:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5978:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5739:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5746:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5754:3:12",
														"type": ""
													}
												],
												"src": "5666:364:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6146:267:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6156:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6203:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "6170:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6170:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6160:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6218:96:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6302:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6307:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6225:76:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6225:89:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6218:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6349:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6356:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6345:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6345:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6363:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6368:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6323:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6323:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6323:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6384:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6395:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6400:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6391:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6391:16:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6384:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6127:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6134:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6142:3:12",
														"type": ""
													}
												],
												"src": "6036:377:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6565:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6575:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6641:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6646:2:12",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6582:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6582:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6575:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6747:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																	"nodeType": "YulIdentifier",
																	"src": "6658:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6658:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6658:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6760:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6771:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6776:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6767:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6767:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6760:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6553:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6561:3:12",
														"type": ""
													}
												],
												"src": "6419:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6937:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6947:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7013:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7018:2:12",
																		"type": "",
																		"value": "50"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6954:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6954:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6947:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7119:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																	"nodeType": "YulIdentifier",
																	"src": "7030:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7030:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7030:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7132:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7143:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7148:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7139:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7139:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6925:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6933:3:12",
														"type": ""
													}
												],
												"src": "6791:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7309:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7319:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7385:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7390:2:12",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7326:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7326:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7319:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7491:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																	"nodeType": "YulIdentifier",
																	"src": "7402:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7402:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7402:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7504:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7515:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7520:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7504:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7297:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7305:3:12",
														"type": ""
													}
												],
												"src": "7163:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7681:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7691:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7757:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7762:2:12",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7698:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7698:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7691:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7863:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																	"nodeType": "YulIdentifier",
																	"src": "7774:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7774:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7774:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7876:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7887:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7892:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7883:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7883:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7876:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7669:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7677:3:12",
														"type": ""
													}
												],
												"src": "7535:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8053:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8063:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8129:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8134:2:12",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8070:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8070:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8063:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8235:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																	"nodeType": "YulIdentifier",
																	"src": "8146:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8146:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8248:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8259:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8264:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8255:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8255:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8248:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8041:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8049:3:12",
														"type": ""
													}
												],
												"src": "7907:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8425:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8435:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8501:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8506:2:12",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8442:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8442:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8435:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8607:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																	"nodeType": "YulIdentifier",
																	"src": "8518:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8518:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8518:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8620:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8631:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8636:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8627:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8627:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8620:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8413:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8421:3:12",
														"type": ""
													}
												],
												"src": "8279:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8797:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8807:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8873:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8878:2:12",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8814:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8814:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8807:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8979:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																	"nodeType": "YulIdentifier",
																	"src": "8890:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8890:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8890:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8992:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9003:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9008:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8999:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8999:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8992:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8785:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8793:3:12",
														"type": ""
													}
												],
												"src": "8651:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9169:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9179:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9245:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9250:2:12",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9186:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9186:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9179:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9351:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																	"nodeType": "YulIdentifier",
																	"src": "9262:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9262:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9262:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9364:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9375:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9380:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9371:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9371:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9364:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9157:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9165:3:12",
														"type": ""
													}
												],
												"src": "9023:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9541:220:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9551:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9617:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9622:2:12",
																		"type": "",
																		"value": "61"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9558:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9558:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9551:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9723:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																	"nodeType": "YulIdentifier",
																	"src": "9634:88:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9634:93:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9634:93:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9736:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9747:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9752:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9743:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9743:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9736:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9529:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9537:3:12",
														"type": ""
													}
												],
												"src": "9395:366:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9832:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9849:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9872:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9854:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9854:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9842:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9842:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9842:37:12"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9820:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9827:3:12",
														"type": ""
													}
												],
												"src": "9767:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10075:251:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10086:102:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10175:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10184:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10093:81:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10093:95:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10086:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10198:102:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10287:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10296:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10205:81:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10205:95:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10198:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10310:10:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "10317:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10310:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10046:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10052:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10060:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10071:3:12",
														"type": ""
													}
												],
												"src": "9891:435:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10430:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10440:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10452:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10463:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10448:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10448:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10440:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10520:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10533:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10544:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10529:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10529:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10476:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10476:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10476:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10402:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10414:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10425:4:12",
														"type": ""
													}
												],
												"src": "10332:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10760:440:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10770:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10782:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10793:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10778:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10778:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10770:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10851:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10864:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10875:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10860:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10860:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10807:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10807:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10807:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10932:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10945:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10956:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10941:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10941:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10888:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10888:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10888:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11014:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11027:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11038:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11023:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11023:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10970:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10970:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10970:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11063:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11074:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11059:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11059:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11083:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11089:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11079:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11079:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11052:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11052:48:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11052:48:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11109:84:12",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "11179:6:12"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11188:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11117:61:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11117:76:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11109:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10708:9:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10720:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10728:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10736:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10744:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10755:4:12",
														"type": ""
													}
												],
												"src": "10560:640:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11298:118:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11308:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11320:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11331:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11316:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11316:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11308:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11382:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11395:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11406:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11391:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11391:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11344:37:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11344:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11344:65:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11270:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11282:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11293:4:12",
														"type": ""
													}
												],
												"src": "11206:210:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11540:195:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11550:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11562:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11573:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11558:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11558:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11550:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11597:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11608:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11593:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11593:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11616:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11622:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11612:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11612:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11586:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11586:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11586:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11642:86:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11714:6:12"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11723:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11650:63:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11650:78:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11642:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11512:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11524:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11535:4:12",
														"type": ""
													}
												],
												"src": "11422:313:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11912:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11922:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11934:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11945:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11930:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11930:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11922:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11969:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11980:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11965:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11965:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11988:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11994:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11984:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11984:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11958:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11958:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11958:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12014:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12148:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12022:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12022:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12014:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11892:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11907:4:12",
														"type": ""
													}
												],
												"src": "11741:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12337:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12347:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12359:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12370:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12355:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12355:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12347:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12394:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12405:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12390:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12390:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12413:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12419:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12409:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12409:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12383:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12383:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12383:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12439:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12573:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12447:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12447:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12439:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12317:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12332:4:12",
														"type": ""
													}
												],
												"src": "12166:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12762:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12772:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12784:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12795:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12780:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12780:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12772:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12819:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12830:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12815:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12815:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12838:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12844:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12834:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12834:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12808:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12808:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12808:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12864:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12998:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12872:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12872:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12864:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12742:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12757:4:12",
														"type": ""
													}
												],
												"src": "12591:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13187:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13197:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13209:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13220:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13205:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13205:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13197:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13244:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13255:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13240:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13240:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13263:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13269:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13259:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13259:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13233:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13233:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13233:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13289:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13423:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13297:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13297:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13289:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13167:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13182:4:12",
														"type": ""
													}
												],
												"src": "13016:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13612:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13622:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13634:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13645:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13630:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13630:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13622:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13669:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13680:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13665:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13665:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13688:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13694:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13684:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13684:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13658:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13658:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13658:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13714:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13848:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13722:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13722:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13714:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13592:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13607:4:12",
														"type": ""
													}
												],
												"src": "13441:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14037:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14047:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14059:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14070:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14055:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14055:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14047:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14094:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14105:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14090:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14090:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14113:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14119:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14109:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14109:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14083:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14083:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14083:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14139:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14273:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14147:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14147:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14139:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14017:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14032:4:12",
														"type": ""
													}
												],
												"src": "13866:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14462:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14472:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14484:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14495:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14480:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14480:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14472:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14519:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14530:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14515:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14515:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14538:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14544:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14534:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14534:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14508:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14508:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14508:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14564:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14698:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14572:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14572:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14564:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14442:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14457:4:12",
														"type": ""
													}
												],
												"src": "14291:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14887:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14897:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14909:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14920:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14905:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14905:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14897:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14944:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14955:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14940:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14940:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14963:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14969:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14959:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14959:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14933:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14933:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14933:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14989:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15123:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14997:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14997:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14989:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14867:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14882:4:12",
														"type": ""
													}
												],
												"src": "14716:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15312:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15322:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15334:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15345:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15330:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15330:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15322:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15369:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15380:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15365:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15365:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15388:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15394:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15384:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15384:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15358:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15358:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15358:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15414:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15548:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15422:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15422:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15414:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15292:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15307:4:12",
														"type": ""
													}
												],
												"src": "15141:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15664:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15674:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15686:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15697:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15682:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15682:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15674:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15754:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15767:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15778:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15763:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15763:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15710:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15710:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15710:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15636:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15648:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15659:4:12",
														"type": ""
													}
												],
												"src": "15566:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15835:88:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15845:30:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "15855:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15855:20:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "15845:6:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "15904:6:12"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "15912:4:12"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "15884:19:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15884:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15884:33:12"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "15819:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "15828:6:12",
														"type": ""
													}
												],
												"src": "15794:129:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15969:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15979:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15995:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15989:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15989:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "15979:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "15962:6:12",
														"type": ""
													}
												],
												"src": "15929:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16076:241:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16181:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "16183:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16183:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16183:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16153:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16161:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16150:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16150:30:12"
															},
															"nodeType": "YulIf",
															"src": "16147:2:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16213:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16243:6:12"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "16221:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16221:29:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "16213:4:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16287:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "16299:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16305:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16295:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16295:15:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "16287:4:12"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16060:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "16071:4:12",
														"type": ""
													}
												],
												"src": "16010:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16381:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16392:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16408:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16402:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16402:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "16392:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16364:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16374:6:12",
														"type": ""
													}
												],
												"src": "16323:98:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16486:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16497:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16513:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16507:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16507:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "16497:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16469:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16479:6:12",
														"type": ""
													}
												],
												"src": "16427:99:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16627:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16644:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16649:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16637:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16637:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16637:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16665:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16684:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16689:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16680:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16680:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "16665:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16599:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16604:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "16615:11:12",
														"type": ""
													}
												],
												"src": "16532:168:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16802:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16819:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16824:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16812:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16812:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16812:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16840:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16859:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16864:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16855:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "16855:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "16840:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16774:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16779:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "16790:11:12",
														"type": ""
													}
												],
												"src": "16706:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16995:34:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17005:18:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "17020:3:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "17005:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16967:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16972:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "16983:11:12",
														"type": ""
													}
												],
												"src": "16881:148:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17079:261:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17089:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17112:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "17094:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17094:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "17089:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17123:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17146:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "17128:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17128:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "17123:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17286:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "17288:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17288:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17288:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17207:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17214:66:12",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "17282:1:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17210:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17210:74:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "17204:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17204:81:12"
															},
															"nodeType": "YulIf",
															"src": "17201:2:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17318:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17329:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17332:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17325:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17325:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "17318:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "17066:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "17069:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "17075:3:12",
														"type": ""
													}
												],
												"src": "17035:305:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17391:146:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17401:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17424:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "17406:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17406:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "17401:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17435:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17458:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "17440:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17440:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "17435:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17482:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "17484:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17484:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17484:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17476:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17479:1:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "17473:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17473:8:12"
															},
															"nodeType": "YulIf",
															"src": "17470:2:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17514:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17526:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17529:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "17522:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17522:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "17514:4:12"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "17377:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "17380:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "17386:4:12",
														"type": ""
													}
												],
												"src": "17346:191:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17588:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17598:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17627:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "17609:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17609:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17598:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17570:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17580:7:12",
														"type": ""
													}
												],
												"src": "17543:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17687:48:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17697:32:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17722:5:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "17715:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17715:13:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "17708:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17708:21:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17697:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17669:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17679:7:12",
														"type": ""
													}
												],
												"src": "17645:90:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17785:105:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17795:89:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17810:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17817:66:12",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17806:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17806:78:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17795:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17767:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17777:7:12",
														"type": ""
													}
												],
												"src": "17741:149:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17941:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17951:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17966:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17973:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17962:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "17962:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17951:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17923:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17933:7:12",
														"type": ""
													}
												],
												"src": "17896:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18073:32:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18083:16:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "18094:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "18083:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18055:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "18065:7:12",
														"type": ""
													}
												],
												"src": "18028:77:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18162:103:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "18185:3:12"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "18190:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18195:6:12"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "18172:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18172:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18172:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "18243:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "18248:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18239:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18239:16:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18257:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18232:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18232:27:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18232:27:12"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "18144:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "18149:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18154:6:12",
														"type": ""
													}
												],
												"src": "18111:154:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18320:258:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18330:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "18339:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "18334:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18399:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "18424:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "18429:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "18420:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18420:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "18443:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "18448:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "18439:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "18439:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "18433:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18433:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "18413:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18413:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18413:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "18360:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18363:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "18357:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18357:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "18371:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "18373:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "18382:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18385:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "18378:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18378:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "18373:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "18353:3:12",
																"statements": []
															},
															"src": "18349:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18496:76:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "18546:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "18551:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "18542:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18542:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18560:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "18535:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18535:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18535:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "18477:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18480:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18474:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18474:13:12"
															},
															"nodeType": "YulIf",
															"src": "18471:2:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "18302:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "18307:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18312:6:12",
														"type": ""
													}
												],
												"src": "18271:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18635:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18645:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "18659:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18665:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "18655:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18655:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18645:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18676:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "18706:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18712:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "18702:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18702:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "18680:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18753:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "18767:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "18781:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18789:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "18777:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18777:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "18767:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "18733:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "18726:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18726:26:12"
															},
															"nodeType": "YulIf",
															"src": "18723:2:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18856:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "18870:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18870:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18870:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "18820:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "18843:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18851:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "18840:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18840:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "18817:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18817:38:12"
															},
															"nodeType": "YulIf",
															"src": "18814:2:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "18619:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18628:6:12",
														"type": ""
													}
												],
												"src": "18584:320:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18953:238:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18963:58:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "18985:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "19015:4:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "18993:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18993:27:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18981:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "18981:40:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "18967:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19132:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "19134:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19134:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19134:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19075:10:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19087:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "19072:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19072:34:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19111:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "19123:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "19108:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19108:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "19069:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19069:62:12"
															},
															"nodeType": "YulIf",
															"src": "19066:2:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19170:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "19174:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19163:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19163:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19163:22:12"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "18939:6:12",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "18947:4:12",
														"type": ""
													}
												],
												"src": "18910:281:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19225:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19242:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19245:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19235:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19235:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19235:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19339:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19342:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19332:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19332:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19332:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19363:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19366:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19356:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19356:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19356:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "19197:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19411:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19428:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19431:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19421:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19421:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19421:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19525:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19528:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19518:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19518:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19518:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19549:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19552:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19542:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19542:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19542:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "19383:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19597:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19614:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19617:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19607:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19607:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19607:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19711:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19714:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19704:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19704:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19704:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19735:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19738:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19728:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19728:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19728:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "19569:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19803:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19813:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "19831:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19838:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19827:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19827:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19847:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "19843:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19843:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "19823:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19823:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "19813:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "19786:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "19796:6:12",
														"type": ""
													}
												],
												"src": "19755:102:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19969:126:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "19991:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19999:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19987:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19987:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20003:34:12",
																		"type": "",
																		"value": "ERC721: caller is not token owne"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19980:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "19980:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19980:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20059:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20067:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20055:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20055:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20072:15:12",
																		"type": "",
																		"value": "r or approved"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20048:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20048:40:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20048:40:12"
														}
													]
												},
												"name": "store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "19961:6:12",
														"type": ""
													}
												],
												"src": "19863:232:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20207:131:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20229:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20237:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20225:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20225:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20241:34:12",
																		"type": "",
																		"value": "ERC721: transfer to non ERC721Re"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20218:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20218:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20218:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20297:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20305:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20293:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20293:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20310:20:12",
																		"type": "",
																		"value": "ceiver implementer"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20286:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20286:45:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20286:45:12"
														}
													]
												},
												"name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20199:6:12",
														"type": ""
													}
												],
												"src": "20101:237:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20450:118:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20472:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20480:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20468:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20468:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20484:34:12",
																		"type": "",
																		"value": "ERC721: transfer from incorrect "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20461:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20461:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20461:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20540:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20548:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20536:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20536:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20553:7:12",
																		"type": "",
																		"value": "owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20529:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20529:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20529:32:12"
														}
													]
												},
												"name": "store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20442:6:12",
														"type": ""
													}
												],
												"src": "20344:224:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20680:117:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20702:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20710:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20698:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20698:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20714:34:12",
																		"type": "",
																		"value": "ERC721: transfer to the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20691:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20691:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20691:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20770:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20778:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20766:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20766:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20783:6:12",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20759:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20759:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20759:31:12"
														}
													]
												},
												"name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20672:6:12",
														"type": ""
													}
												],
												"src": "20574:223:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20909:69:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20931:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20939:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20927:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20927:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20943:27:12",
																		"type": "",
																		"value": "ERC721: approve to caller"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20920:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "20920:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20920:51:12"
														}
													]
												},
												"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20901:6:12",
														"type": ""
													}
												],
												"src": "20803:175:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21090:122:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21112:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21120:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21108:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21108:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21124:34:12",
																		"type": "",
																		"value": "ERC721: address zero is not a va"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21101:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21101:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21101:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21180:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21188:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21176:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21176:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21193:11:12",
																		"type": "",
																		"value": "lid owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21169:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21169:36:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21169:36:12"
														}
													]
												},
												"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21082:6:12",
														"type": ""
													}
												],
												"src": "20984:228:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21324:68:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21346:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21354:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21342:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21342:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21358:26:12",
																		"type": "",
																		"value": "ERC721: invalid token ID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21335:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21335:50:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21335:50:12"
														}
													]
												},
												"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21316:6:12",
														"type": ""
													}
												],
												"src": "21218:174:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21504:114:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21526:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21534:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21522:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21522:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21538:34:12",
																		"type": "",
																		"value": "ERC721: approval to current owne"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21515:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21515:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21515:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21594:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21602:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21590:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21590:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21607:3:12",
																		"type": "",
																		"value": "r"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21583:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21583:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21583:28:12"
														}
													]
												},
												"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21496:6:12",
														"type": ""
													}
												],
												"src": "21398:220:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21730:142:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21752:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21760:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21748:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21748:14:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21764:34:12",
																		"type": "",
																		"value": "ERC721: approve caller is not to"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21741:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21741:58:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21741:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21820:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21828:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21816:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21816:15:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21833:31:12",
																		"type": "",
																		"value": "ken owner or approved for all"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21809:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21809:56:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21809:56:12"
														}
													]
												},
												"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21722:6:12",
														"type": ""
													}
												],
												"src": "21624:248:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21921:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "21978:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "21987:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "21990:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "21980:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21980:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21980:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "21944:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "21969:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "21951:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "21951:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "21941:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21941:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "21934:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "21934:43:12"
															},
															"nodeType": "YulIf",
															"src": "21931:2:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "21914:5:12",
														"type": ""
													}
												],
												"src": "21878:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22046:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22100:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22109:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22112:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22102:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22102:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22102:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22069:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "22091:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "22076:14:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22076:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22066:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22066:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22059:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "22059:40:12"
															},
															"nodeType": "YulIf",
															"src": "22056:2:12"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22039:5:12",
														"type": ""
													}
												],
												"src": "22006:116:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22170:78:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22226:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22235:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22238:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22228:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22228:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22228:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22193:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "22217:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "22200:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22200:23:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22190:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22190:34:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22183:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "22183:42:12"
															},
															"nodeType": "YulIf",
															"src": "22180:2:12"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22163:5:12",
														"type": ""
													}
												],
												"src": "22128:120:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22297:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22354:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22363:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22366:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22356:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22356:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22356:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22320:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "22345:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "22327:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22327:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22317:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22317:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22310:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "22310:43:12"
															},
															"nodeType": "YulIf",
															"src": "22307:2:12"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22290:5:12",
														"type": ""
													}
												],
												"src": "22254:122:12"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061196f565b6102bc565b6040516100fb9190611c80565b60405180910390f35b61010c61039e565b6040516101199190611c9b565b60405180910390f35b61013c600480360381019061013791906119c1565b610430565b6040516101499190611c19565b60405180910390f35b61016c60048036038101906101679190611933565b610476565b005b6101886004803603810190610183919061182d565b61058e565b005b6101a4600480360381019061019f919061182d565b6105ee565b005b6101c060048036038101906101bb91906119c1565b61060e565b6040516101cd9190611c19565b60405180910390f35b6101f060048036038101906101eb91906117c8565b610695565b6040516101fd9190611ddd565b60405180910390f35b61020e61074d565b60405161021b9190611c9b565b60405180910390f35b61023e600480360381019061023991906118f7565b6107df565b005b61025a6004803603810190610255919061187c565b6107f5565b005b610276600480360381019061027191906119c1565b610857565b6040516102839190611c9b565b60405180910390f35b6102a660048036038101906102a191906117f1565b6108bf565b6040516102b39190611c80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611fd1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611d9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611dbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611cbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611d7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611d5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611fd1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611fd1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611cbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611bf5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611199565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611d7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d1d565b60405180910390fd5b610c5183838360016111da565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611cfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e538383836001611300565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611d3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611c80565b60405180910390a3505050565b61100d848484610b5e565b61101984848484611306565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611cdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110848461149d565b01905060008167ffffffffffffffff8111156110c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110fb5781602001600182028036833780820191505090505b509050600082602001820190505b60011561118e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b04945060008514156111895761118e565b611109565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166111bb83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112fa57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461126e5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112669190611ee7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112f95780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611e91565b925050819055505b5b50505050565b50505050565b60006113278473ffffffffffffffffffffffffffffffffffffffff166116d4565b15611490578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611350610a08565b8786866040518563ffffffff1660e01b81526004016113729493929190611c34565b602060405180830381600087803b15801561138c57600080fd5b505af19250505080156113bd57506040513d601f19601f820116820180604052508101906113ba9190611998565b60015b611440573d80600081146113ed576040519150601f19603f3d011682016040523d82523d6000602084013e6113f2565b606091505b50600081511415611438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142f90611cdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611495565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611521577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611517577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611584576d04ee2d6d415b85acef8100000000838161157a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc1000083106115d957662386f26fc1000083816115cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611628576305f5e100838161161e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611673576127108381611669577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106116bc57606483816116b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a83106116cb576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061170a61170584611e1d565b611df8565b90508281526020810184848401111561172257600080fd5b61172d848285611f8f565b509392505050565b6000813590506117448161234d565b92915050565b60008135905061175981612364565b92915050565b60008135905061176e8161237b565b92915050565b6000815190506117838161237b565b92915050565b600082601f83011261179a57600080fd5b81356117aa8482602086016116f7565b91505092915050565b6000813590506117c281612392565b92915050565b6000602082840312156117da57600080fd5b60006117e884828501611735565b91505092915050565b6000806040838503121561180457600080fd5b600061181285828601611735565b925050602061182385828601611735565b9150509250929050565b60008060006060848603121561184257600080fd5b600061185086828701611735565b935050602061186186828701611735565b9250506040611872868287016117b3565b9150509250925092565b6000806000806080858703121561189257600080fd5b60006118a087828801611735565b94505060206118b187828801611735565b93505060406118c2878288016117b3565b925050606085013567ffffffffffffffff8111156118df57600080fd5b6118eb87828801611789565b91505092959194509250565b6000806040838503121561190a57600080fd5b600061191885828601611735565b92505060206119298582860161174a565b9150509250929050565b6000806040838503121561194657600080fd5b600061195485828601611735565b9250506020611965858286016117b3565b9150509250929050565b60006020828403121561198157600080fd5b600061198f8482850161175f565b91505092915050565b6000602082840312156119aa57600080fd5b60006119b884828501611774565b91505092915050565b6000602082840312156119d357600080fd5b60006119e1848285016117b3565b91505092915050565b6119f381611f1b565b82525050565b611a0281611f2d565b82525050565b6000611a1382611e4e565b611a1d8185611e64565b9350611a2d818560208601611f9e565b611a36816120c1565b840191505092915050565b6000611a4c82611e59565b611a568185611e75565b9350611a66818560208601611f9e565b611a6f816120c1565b840191505092915050565b6000611a8582611e59565b611a8f8185611e86565b9350611a9f818560208601611f9e565b80840191505092915050565b6000611ab8602d83611e75565b9150611ac3826120d2565b604082019050919050565b6000611adb603283611e75565b9150611ae682612121565b604082019050919050565b6000611afe602583611e75565b9150611b0982612170565b604082019050919050565b6000611b21602483611e75565b9150611b2c826121bf565b604082019050919050565b6000611b44601983611e75565b9150611b4f8261220e565b602082019050919050565b6000611b67602983611e75565b9150611b7282612237565b604082019050919050565b6000611b8a601883611e75565b9150611b9582612286565b602082019050919050565b6000611bad602183611e75565b9150611bb8826122af565b604082019050919050565b6000611bd0603d83611e75565b9150611bdb826122fe565b604082019050919050565b611bef81611f85565b82525050565b6000611c018285611a7a565b9150611c0d8284611a7a565b91508190509392505050565b6000602082019050611c2e60008301846119ea565b92915050565b6000608082019050611c4960008301876119ea565b611c5660208301866119ea565b611c636040830185611be6565b8181036060830152611c758184611a08565b905095945050505050565b6000602082019050611c9560008301846119f9565b92915050565b60006020820190508181036000830152611cb58184611a41565b905092915050565b60006020820190508181036000830152611cd681611aab565b9050919050565b60006020820190508181036000830152611cf681611ace565b9050919050565b60006020820190508181036000830152611d1681611af1565b9050919050565b60006020820190508181036000830152611d3681611b14565b9050919050565b60006020820190508181036000830152611d5681611b37565b9050919050565b60006020820190508181036000830152611d7681611b5a565b9050919050565b60006020820190508181036000830152611d9681611b7d565b9050919050565b60006020820190508181036000830152611db681611ba0565b9050919050565b60006020820190508181036000830152611dd681611bc3565b9050919050565b6000602082019050611df26000830184611be6565b92915050565b6000611e02611e13565b9050611e0e8282612003565b919050565b6000604051905090565b600067ffffffffffffffff821115611e3857611e37612092565b5b611e41826120c1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e9c82611f85565b9150611ea783611f85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611edc57611edb612034565b5b828201905092915050565b6000611ef282611f85565b9150611efd83611f85565b925082821015611f1057611f0f612034565b5b828203905092915050565b6000611f2682611f65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611fbc578082015181840152602081019050611fa1565b83811115611fcb576000848401525b50505050565b60006002820490506001821680611fe957607f821691505b60208210811415611ffd57611ffc612063565b5b50919050565b61200c826120c1565b810181811067ffffffffffffffff8211171561202b5761202a612092565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61235681611f1b565b811461236157600080fd5b50565b61236d81611f2d565b811461237857600080fd5b50565b61238481611f39565b811461238f57600080fd5b50565b61239b81611f85565b81146123a657600080fd5b5056fea264697066735822122056c7962c23fb6b7f50d717f79202bc8f741fa0cb40c9d76bf73520c87270100064736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1933 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x17C8 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x18F7 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1DBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x11DA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1300 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x149D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10C9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x118E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1178 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1189 JUMPI PUSH2 0x118E JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11BB DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x126E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F9 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16D4 JUMP JUMPDEST ISZERO PUSH2 0x1490 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1350 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1372 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BA SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1440 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1521 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1517 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1584 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x157A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15D9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x15CF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1628 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x161E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1673 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170A PUSH2 0x1705 DUP5 PUSH2 0x1E1D JUMP JUMPDEST PUSH2 0x1DF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x172D DUP5 DUP3 DUP6 PUSH2 0x1F8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1744 DUP2 PUSH2 0x234D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x2364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x176E DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1783 DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17AA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x16F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C2 DUP2 PUSH2 0x2392 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17E8 DUP5 DUP3 DUP6 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1812 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1823 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1850 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1861 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1872 DUP7 DUP3 DUP8 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A0 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x18C2 DUP8 DUP3 DUP9 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP8 DUP3 DUP9 ADD PUSH2 0x1789 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1918 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1929 DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1954 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1965 DUP6 DUP3 DUP7 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x198F DUP5 DUP3 DUP6 ADD PUSH2 0x175F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP3 DUP6 ADD PUSH2 0x1774 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19E1 DUP5 DUP3 DUP6 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F3 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1A02 DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP3 PUSH2 0x1E4E JUMP JUMPDEST PUSH2 0x1A1D DUP2 DUP6 PUSH2 0x1E64 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A2D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A36 DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A4C DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A56 DUP2 DUP6 PUSH2 0x1E75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A66 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A6F DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A85 DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A8F DUP2 DUP6 PUSH2 0x1E86 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AB8 PUSH1 0x2D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AC3 DUP3 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADB PUSH1 0x32 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE6 DUP3 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x25 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B21 PUSH1 0x24 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B2C DUP3 PUSH2 0x21BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 PUSH1 0x19 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B4F DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B67 PUSH1 0x29 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B72 DUP3 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8A PUSH1 0x18 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B95 DUP3 PUSH2 0x2286 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAD PUSH1 0x21 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB8 DUP3 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD0 PUSH1 0x3D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BDB DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BEF DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 DUP3 DUP6 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0D DUP3 DUP5 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1C75 DUP2 DUP5 PUSH2 0x1A08 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB5 DUP2 DUP5 PUSH2 0x1A41 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CF6 DUP2 PUSH2 0x1ACE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D16 DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D36 DUP2 PUSH2 0x1B14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D56 DUP2 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D76 DUP2 PUSH2 0x1B5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D96 DUP2 PUSH2 0x1B7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DB6 DUP2 PUSH2 0x1BA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DD6 DUP2 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E02 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0E DUP3 DUP3 PUSH2 0x2003 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST PUSH2 0x1E41 DUP3 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E9C DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EA7 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EDC JUMPI PUSH2 0x1EDB PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF2 DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFD DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F26 DUP3 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1FCB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1FE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1FFD JUMPI PUSH2 0x1FFC PUSH2 0x2063 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200C DUP3 PUSH2 0x20C1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x202B JUMPI PUSH2 0x202A PUSH2 0x2092 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2356 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP2 EQ PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x236D DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP2 EQ PUSH2 0x2378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2384 DUP2 PUSH2 0x1F39 JUMP JUMPDEST DUP2 EQ PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x239B DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP2 EQ PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP 0xC7 SWAP7 0x2C 0x23 0xFB PUSH12 0x7F50D717F79202BC8F741FA0 0xCB BLOCKHASH 0xC9 0xD7 PUSH12 0xF73520C87270100064736F6C PUSH4 0x43000804 STOP CALLER ",
							"sourceMap": "628:16327:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3468:406;;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:9:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:0:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;12768:171:0:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:8:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;;;;;;;;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:0:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:11:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;;;;;;;;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;;;;;;;;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;;;;;;;;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;;;;;;;;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;;;;;;;;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;;;;;;;;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:6:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:343:12:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;290:1;287;280:12;249:2;303:41;337:6;332:3;327;303:41;:::i;:::-;90:260;;;;;;:::o;356:139::-;402:5;440:6;427:20;418:29;;456:33;483:5;456:33;:::i;:::-;408:87;;;;:::o;501:133::-;544:5;582:6;569:20;560:29;;598:30;622:5;598:30;:::i;:::-;550:84;;;;:::o;640:137::-;685:5;723:6;710:20;701:29;;739:32;765:5;739:32;:::i;:::-;691:86;;;;:::o;783:141::-;839:5;870:6;864:13;855:22;;886:32;912:5;886:32;:::i;:::-;845:79;;;;:::o;943:271::-;998:5;1047:3;1040:4;1032:6;1028:17;1024:27;1014:2;;1065:1;1062;1055:12;1014:2;1105:6;1092:20;1130:78;1204:3;1196:6;1189:4;1181:6;1177:17;1130:78;:::i;:::-;1121:87;;1004:210;;;;;:::o;1220:139::-;1266:5;1304:6;1291:20;1282:29;;1320:33;1347:5;1320:33;:::i;:::-;1272:87;;;;:::o;1365:262::-;1424:6;1473:2;1461:9;1452:7;1448:23;1444:32;1441:2;;;1489:1;1486;1479:12;1441:2;1532:1;1557:53;1602:7;1593:6;1582:9;1578:22;1557:53;:::i;:::-;1547:63;;1503:117;1431:196;;;;:::o;1633:407::-;1701:6;1709;1758:2;1746:9;1737:7;1733:23;1729:32;1726:2;;;1774:1;1771;1764:12;1726:2;1817:1;1842:53;1887:7;1878:6;1867:9;1863:22;1842:53;:::i;:::-;1832:63;;1788:117;1944:2;1970:53;2015:7;2006:6;1995:9;1991:22;1970:53;:::i;:::-;1960:63;;1915:118;1716:324;;;;;:::o;2046:552::-;2123:6;2131;2139;2188:2;2176:9;2167:7;2163:23;2159:32;2156:2;;;2204:1;2201;2194:12;2156:2;2247:1;2272:53;2317:7;2308:6;2297:9;2293:22;2272:53;:::i;:::-;2262:63;;2218:117;2374:2;2400:53;2445:7;2436:6;2425:9;2421:22;2400:53;:::i;:::-;2390:63;;2345:118;2502:2;2528:53;2573:7;2564:6;2553:9;2549:22;2528:53;:::i;:::-;2518:63;;2473:118;2146:452;;;;;:::o;2604:809::-;2699:6;2707;2715;2723;2772:3;2760:9;2751:7;2747:23;2743:33;2740:2;;;2789:1;2786;2779:12;2740:2;2832:1;2857:53;2902:7;2893:6;2882:9;2878:22;2857:53;:::i;:::-;2847:63;;2803:117;2959:2;2985:53;3030:7;3021:6;3010:9;3006:22;2985:53;:::i;:::-;2975:63;;2930:118;3087:2;3113:53;3158:7;3149:6;3138:9;3134:22;3113:53;:::i;:::-;3103:63;;3058:118;3243:2;3232:9;3228:18;3215:32;3274:18;3266:6;3263:30;3260:2;;;3306:1;3303;3296:12;3260:2;3334:62;3388:7;3379:6;3368:9;3364:22;3334:62;:::i;:::-;3324:72;;3186:220;2730:683;;;;;;;:::o;3419:401::-;3484:6;3492;3541:2;3529:9;3520:7;3516:23;3512:32;3509:2;;;3557:1;3554;3547:12;3509:2;3600:1;3625:53;3670:7;3661:6;3650:9;3646:22;3625:53;:::i;:::-;3615:63;;3571:117;3727:2;3753:50;3795:7;3786:6;3775:9;3771:22;3753:50;:::i;:::-;3743:60;;3698:115;3499:321;;;;;:::o;3826:407::-;3894:6;3902;3951:2;3939:9;3930:7;3926:23;3922:32;3919:2;;;3967:1;3964;3957:12;3919:2;4010:1;4035:53;4080:7;4071:6;4060:9;4056:22;4035:53;:::i;:::-;4025:63;;3981:117;4137:2;4163:53;4208:7;4199:6;4188:9;4184:22;4163:53;:::i;:::-;4153:63;;4108:118;3909:324;;;;;:::o;4239:260::-;4297:6;4346:2;4334:9;4325:7;4321:23;4317:32;4314:2;;;4362:1;4359;4352:12;4314:2;4405:1;4430:52;4474:7;4465:6;4454:9;4450:22;4430:52;:::i;:::-;4420:62;;4376:116;4304:195;;;;:::o;4505:282::-;4574:6;4623:2;4611:9;4602:7;4598:23;4594:32;4591:2;;;4639:1;4636;4629:12;4591:2;4682:1;4707:63;4762:7;4753:6;4742:9;4738:22;4707:63;:::i;:::-;4697:73;;4653:127;4581:206;;;;:::o;4793:262::-;4852:6;4901:2;4889:9;4880:7;4876:23;4872:32;4869:2;;;4917:1;4914;4907:12;4869:2;4960:1;4985:53;5030:7;5021:6;5010:9;5006:22;4985:53;:::i;:::-;4975:63;;4931:117;4859:196;;;;:::o;5061:118::-;5148:24;5166:5;5148:24;:::i;:::-;5143:3;5136:37;5126:53;;:::o;5185:109::-;5266:21;5281:5;5266:21;:::i;:::-;5261:3;5254:34;5244:50;;:::o;5300:360::-;5386:3;5414:38;5446:5;5414:38;:::i;:::-;5468:70;5531:6;5526:3;5468:70;:::i;:::-;5461:77;;5547:52;5592:6;5587:3;5580:4;5573:5;5569:16;5547:52;:::i;:::-;5624:29;5646:6;5624:29;:::i;:::-;5619:3;5615:39;5608:46;;5390:270;;;;;:::o;5666:364::-;5754:3;5782:39;5815:5;5782:39;:::i;:::-;5837:71;5901:6;5896:3;5837:71;:::i;:::-;5830:78;;5917:52;5962:6;5957:3;5950:4;5943:5;5939:16;5917:52;:::i;:::-;5994:29;6016:6;5994:29;:::i;:::-;5989:3;5985:39;5978:46;;5758:272;;;;;:::o;6036:377::-;6142:3;6170:39;6203:5;6170:39;:::i;:::-;6225:89;6307:6;6302:3;6225:89;:::i;:::-;6218:96;;6323:52;6368:6;6363:3;6356:4;6349:5;6345:16;6323:52;:::i;:::-;6400:6;6395:3;6391:16;6384:23;;6146:267;;;;;:::o;6419:366::-;6561:3;6582:67;6646:2;6641:3;6582:67;:::i;:::-;6575:74;;6658:93;6747:3;6658:93;:::i;:::-;6776:2;6771:3;6767:12;6760:19;;6565:220;;;:::o;6791:366::-;6933:3;6954:67;7018:2;7013:3;6954:67;:::i;:::-;6947:74;;7030:93;7119:3;7030:93;:::i;:::-;7148:2;7143:3;7139:12;7132:19;;6937:220;;;:::o;7163:366::-;7305:3;7326:67;7390:2;7385:3;7326:67;:::i;:::-;7319:74;;7402:93;7491:3;7402:93;:::i;:::-;7520:2;7515:3;7511:12;7504:19;;7309:220;;;:::o;7535:366::-;7677:3;7698:67;7762:2;7757:3;7698:67;:::i;:::-;7691:74;;7774:93;7863:3;7774:93;:::i;:::-;7892:2;7887:3;7883:12;7876:19;;7681:220;;;:::o;7907:366::-;8049:3;8070:67;8134:2;8129:3;8070:67;:::i;:::-;8063:74;;8146:93;8235:3;8146:93;:::i;:::-;8264:2;8259:3;8255:12;8248:19;;8053:220;;;:::o;8279:366::-;8421:3;8442:67;8506:2;8501:3;8442:67;:::i;:::-;8435:74;;8518:93;8607:3;8518:93;:::i;:::-;8636:2;8631:3;8627:12;8620:19;;8425:220;;;:::o;8651:366::-;8793:3;8814:67;8878:2;8873:3;8814:67;:::i;:::-;8807:74;;8890:93;8979:3;8890:93;:::i;:::-;9008:2;9003:3;8999:12;8992:19;;8797:220;;;:::o;9023:366::-;9165:3;9186:67;9250:2;9245:3;9186:67;:::i;:::-;9179:74;;9262:93;9351:3;9262:93;:::i;:::-;9380:2;9375:3;9371:12;9364:19;;9169:220;;;:::o;9395:366::-;9537:3;9558:67;9622:2;9617:3;9558:67;:::i;:::-;9551:74;;9634:93;9723:3;9634:93;:::i;:::-;9752:2;9747:3;9743:12;9736:19;;9541:220;;;:::o;9767:118::-;9854:24;9872:5;9854:24;:::i;:::-;9849:3;9842:37;9832:53;;:::o;9891:435::-;10071:3;10093:95;10184:3;10175:6;10093:95;:::i;:::-;10086:102;;10205:95;10296:3;10287:6;10205:95;:::i;:::-;10198:102;;10317:3;10310:10;;10075:251;;;;;:::o;10332:222::-;10425:4;10463:2;10452:9;10448:18;10440:26;;10476:71;10544:1;10533:9;10529:17;10520:6;10476:71;:::i;:::-;10430:124;;;;:::o;10560:640::-;10755:4;10793:3;10782:9;10778:19;10770:27;;10807:71;10875:1;10864:9;10860:17;10851:6;10807:71;:::i;:::-;10888:72;10956:2;10945:9;10941:18;10932:6;10888:72;:::i;:::-;10970;11038:2;11027:9;11023:18;11014:6;10970:72;:::i;:::-;11089:9;11083:4;11079:20;11074:2;11063:9;11059:18;11052:48;11117:76;11188:4;11179:6;11117:76;:::i;:::-;11109:84;;10760:440;;;;;;;:::o;11206:210::-;11293:4;11331:2;11320:9;11316:18;11308:26;;11344:65;11406:1;11395:9;11391:17;11382:6;11344:65;:::i;:::-;11298:118;;;;:::o;11422:313::-;11535:4;11573:2;11562:9;11558:18;11550:26;;11622:9;11616:4;11612:20;11608:1;11597:9;11593:17;11586:47;11650:78;11723:4;11714:6;11650:78;:::i;:::-;11642:86;;11540:195;;;;:::o;11741:419::-;11907:4;11945:2;11934:9;11930:18;11922:26;;11994:9;11988:4;11984:20;11980:1;11969:9;11965:17;11958:47;12022:131;12148:4;12022:131;:::i;:::-;12014:139;;11912:248;;;:::o;12166:419::-;12332:4;12370:2;12359:9;12355:18;12347:26;;12419:9;12413:4;12409:20;12405:1;12394:9;12390:17;12383:47;12447:131;12573:4;12447:131;:::i;:::-;12439:139;;12337:248;;;:::o;12591:419::-;12757:4;12795:2;12784:9;12780:18;12772:26;;12844:9;12838:4;12834:20;12830:1;12819:9;12815:17;12808:47;12872:131;12998:4;12872:131;:::i;:::-;12864:139;;12762:248;;;:::o;13016:419::-;13182:4;13220:2;13209:9;13205:18;13197:26;;13269:9;13263:4;13259:20;13255:1;13244:9;13240:17;13233:47;13297:131;13423:4;13297:131;:::i;:::-;13289:139;;13187:248;;;:::o;13441:419::-;13607:4;13645:2;13634:9;13630:18;13622:26;;13694:9;13688:4;13684:20;13680:1;13669:9;13665:17;13658:47;13722:131;13848:4;13722:131;:::i;:::-;13714:139;;13612:248;;;:::o;13866:419::-;14032:4;14070:2;14059:9;14055:18;14047:26;;14119:9;14113:4;14109:20;14105:1;14094:9;14090:17;14083:47;14147:131;14273:4;14147:131;:::i;:::-;14139:139;;14037:248;;;:::o;14291:419::-;14457:4;14495:2;14484:9;14480:18;14472:26;;14544:9;14538:4;14534:20;14530:1;14519:9;14515:17;14508:47;14572:131;14698:4;14572:131;:::i;:::-;14564:139;;14462:248;;;:::o;14716:419::-;14882:4;14920:2;14909:9;14905:18;14897:26;;14969:9;14963:4;14959:20;14955:1;14944:9;14940:17;14933:47;14997:131;15123:4;14997:131;:::i;:::-;14989:139;;14887:248;;;:::o;15141:419::-;15307:4;15345:2;15334:9;15330:18;15322:26;;15394:9;15388:4;15384:20;15380:1;15369:9;15365:17;15358:47;15422:131;15548:4;15422:131;:::i;:::-;15414:139;;15312:248;;;:::o;15566:222::-;15659:4;15697:2;15686:9;15682:18;15674:26;;15710:71;15778:1;15767:9;15763:17;15754:6;15710:71;:::i;:::-;15664:124;;;;:::o;15794:129::-;15828:6;15855:20;;:::i;:::-;15845:30;;15884:33;15912:4;15904:6;15884:33;:::i;:::-;15835:88;;;:::o;15929:75::-;15962:6;15995:2;15989:9;15979:19;;15969:35;:::o;16010:307::-;16071:4;16161:18;16153:6;16150:30;16147:2;;;16183:18;;:::i;:::-;16147:2;16221:29;16243:6;16221:29;:::i;:::-;16213:37;;16305:4;16299;16295:15;16287:23;;16076:241;;;:::o;16323:98::-;16374:6;16408:5;16402:12;16392:22;;16381:40;;;:::o;16427:99::-;16479:6;16513:5;16507:12;16497:22;;16486:40;;;:::o;16532:168::-;16615:11;16649:6;16644:3;16637:19;16689:4;16684:3;16680:14;16665:29;;16627:73;;;;:::o;16706:169::-;16790:11;16824:6;16819:3;16812:19;16864:4;16859:3;16855:14;16840:29;;16802:73;;;;:::o;16881:148::-;16983:11;17020:3;17005:18;;16995:34;;;;:::o;17035:305::-;17075:3;17094:20;17112:1;17094:20;:::i;:::-;17089:25;;17128:20;17146:1;17128:20;:::i;:::-;17123:25;;17282:1;17214:66;17210:74;17207:1;17204:81;17201:2;;;17288:18;;:::i;:::-;17201:2;17332:1;17329;17325:9;17318:16;;17079:261;;;;:::o;17346:191::-;17386:4;17406:20;17424:1;17406:20;:::i;:::-;17401:25;;17440:20;17458:1;17440:20;:::i;:::-;17435:25;;17479:1;17476;17473:8;17470:2;;;17484:18;;:::i;:::-;17470:2;17529:1;17526;17522:9;17514:17;;17391:146;;;;:::o;17543:96::-;17580:7;17609:24;17627:5;17609:24;:::i;:::-;17598:35;;17588:51;;;:::o;17645:90::-;17679:7;17722:5;17715:13;17708:21;17697:32;;17687:48;;;:::o;17741:149::-;17777:7;17817:66;17810:5;17806:78;17795:89;;17785:105;;;:::o;17896:126::-;17933:7;17973:42;17966:5;17962:54;17951:65;;17941:81;;;:::o;18028:77::-;18065:7;18094:5;18083:16;;18073:32;;;:::o;18111:154::-;18195:6;18190:3;18185;18172:30;18257:1;18248:6;18243:3;18239:16;18232:27;18162:103;;;:::o;18271:307::-;18339:1;18349:113;18363:6;18360:1;18357:13;18349:113;;;18448:1;18443:3;18439:11;18433:18;18429:1;18424:3;18420:11;18413:39;18385:2;18382:1;18378:10;18373:15;;18349:113;;;18480:6;18477:1;18474:13;18471:2;;;18560:1;18551:6;18546:3;18542:16;18535:27;18471:2;18320:258;;;;:::o;18584:320::-;18628:6;18665:1;18659:4;18655:12;18645:22;;18712:1;18706:4;18702:12;18733:18;18723:2;;18789:4;18781:6;18777:17;18767:27;;18723:2;18851;18843:6;18840:14;18820:18;18817:38;18814:2;;;18870:18;;:::i;:::-;18814:2;18635:269;;;;:::o;18910:281::-;18993:27;19015:4;18993:27;:::i;:::-;18985:6;18981:40;19123:6;19111:10;19108:22;19087:18;19075:10;19072:34;19069:62;19066:2;;;19134:18;;:::i;:::-;19066:2;19174:10;19170:2;19163:22;18953:238;;;:::o;19197:180::-;19245:77;19242:1;19235:88;19342:4;19339:1;19332:15;19366:4;19363:1;19356:15;19383:180;19431:77;19428:1;19421:88;19528:4;19525:1;19518:15;19552:4;19549:1;19542:15;19569:180;19617:77;19614:1;19607:88;19714:4;19711:1;19704:15;19738:4;19735:1;19728:15;19755:102;19796:6;19847:2;19843:7;19838:2;19831:5;19827:14;19823:28;19813:38;;19803:54;;;:::o;19863:232::-;20003:34;19999:1;19991:6;19987:14;19980:58;20072:15;20067:2;20059:6;20055:15;20048:40;19969:126;:::o;20101:237::-;20241:34;20237:1;20229:6;20225:14;20218:58;20310:20;20305:2;20297:6;20293:15;20286:45;20207:131;:::o;20344:224::-;20484:34;20480:1;20472:6;20468:14;20461:58;20553:7;20548:2;20540:6;20536:15;20529:32;20450:118;:::o;20574:223::-;20714:34;20710:1;20702:6;20698:14;20691:58;20783:6;20778:2;20770:6;20766:15;20759:31;20680:117;:::o;20803:175::-;20943:27;20939:1;20931:6;20927:14;20920:51;20909:69;:::o;20984:228::-;21124:34;21120:1;21112:6;21108:14;21101:58;21193:11;21188:2;21180:6;21176:15;21169:36;21090:122;:::o;21218:174::-;21358:26;21354:1;21346:6;21342:14;21335:50;21324:68;:::o;21398:220::-;21538:34;21534:1;21526:6;21522:14;21515:58;21607:3;21602:2;21594:6;21590:15;21583:28;21504:114;:::o;21624:248::-;21764:34;21760:1;21752:6;21748:14;21741:58;21833:31;21828:2;21820:6;21816:15;21809:56;21730:142;:::o;21878:122::-;21951:24;21969:5;21951:24;:::i;:::-;21944:5;21941:35;21931:2;;21990:1;21987;21980:12;21931:2;21921:79;:::o;22006:116::-;22076:21;22091:5;22076:21;:::i;:::-;22069:5;22066:32;22056:2;;22112:1;22109;22102:12;22056:2;22046:76;:::o;22128:120::-;22200:23;22217:5;22200:23;:::i;:::-;22193:5;22190:34;22180:2;;22238:1;22235;22228:12;22180:2;22170:78;:::o;22254:122::-;22327:24;22345:5;22327:24;:::i;:::-;22320:5;22317:35;22307:2;;22366:1;22363;22356:12;22307:2;22297:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1836600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1624",
								"getApproved(uint256)": "2677",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "1725",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "774",
								"symbol()": "infinite",
								"tokenURI(uint256)": "2167",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256,uint256)": "17",
								"_approve(address,uint256)": "infinite",
								"_baseURI()": "infinite",
								"_beforeTokenTransfer(address,address,uint256,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "1012",
								"_isApprovedOrOwner(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_ownerOf(uint256)": "948",
								"_requireMinted(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_safeTransfer(address,address,uint256,bytes memory)": "infinite",
								"_setApprovalForAll(address,address,bool)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1464,
									"end": 1469,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1461,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1489,
									"end": 1496,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1486,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 361,
									"name": "tag",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 7,
									"end": 361,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 96,
									"end": 101,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 179,
									"end": 185,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 137,
									"end": 186,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 121,
									"end": 187,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "tag",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 112,
									"end": 187,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 112,
									"end": 187,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 210,
									"end": 216,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 203,
									"end": 208,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 196,
									"end": 217,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 248,
									"end": 252,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 241,
									"end": 246,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 237,
									"end": 253,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 286,
									"end": 289,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 277,
									"end": 283,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 272,
									"end": 275,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 268,
									"end": 284,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 265,
									"end": 290,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 262,
									"end": 264,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 262,
									"end": 264,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 262,
									"end": 264,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 303,
									"end": 304,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 300,
									"end": 301,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 293,
									"end": 305,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 262,
									"end": 264,
									"name": "tag",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 262,
									"end": 264,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 316,
									"end": 355,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 348,
									"end": 354,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 343,
									"end": 346,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 338,
									"end": 341,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 316,
									"end": 355,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 355,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 316,
									"end": 355,
									"name": "tag",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 316,
									"end": 355,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 102,
									"end": 361,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 381,
									"end": 669,
									"name": "tag",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 381,
									"end": 669,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 448,
									"end": 453,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 500,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 490,
									"end": 494,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 482,
									"end": 488,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 478,
									"end": 495,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 474,
									"end": 501,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 464,
									"end": 466,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 464,
									"end": 466,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 515,
									"end": 516,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 512,
									"end": 513,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 505,
									"end": 517,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 464,
									"end": 466,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 464,
									"end": 466,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 548,
									"end": 554,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 542,
									"end": 555,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 573,
									"end": 663,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 659,
									"end": 662,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 644,
									"end": 648,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 636,
									"end": 642,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 632,
									"end": 649,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 573,
									"end": 663,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 573,
									"end": 663,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 573,
									"end": 663,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 573,
									"end": 663,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 564,
									"end": 663,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 564,
									"end": 663,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 454,
									"end": 669,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 675,
									"end": 1327,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 675,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 774,
									"end": 780,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 782,
									"end": 788,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 831,
									"end": 833,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 819,
									"end": 828,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 810,
									"end": 817,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 806,
									"end": 829,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 802,
									"end": 834,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 799,
									"end": 801,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 799,
									"end": 801,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 799,
									"end": 801,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 847,
									"end": 848,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 844,
									"end": 845,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 837,
									"end": 849,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 799,
									"end": 801,
									"name": "tag",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 799,
									"end": 801,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 911,
									"end": 912,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 900,
									"end": 909,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 896,
									"end": 913,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 890,
									"end": 914,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 941,
									"end": 959,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 933,
									"end": 939,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 930,
									"end": 960,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 927,
									"end": 929,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 927,
									"end": 929,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 927,
									"end": 929,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 973,
									"end": 974,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 970,
									"end": 971,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 963,
									"end": 975,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 927,
									"end": 929,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 927,
									"end": 929,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1001,
									"end": 1075,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1067,
									"end": 1074,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1058,
									"end": 1064,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1047,
									"end": 1056,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1043,
									"end": 1065,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1001,
									"end": 1075,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 1001,
									"end": 1075,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1001,
									"end": 1075,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1001,
									"end": 1075,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 991,
									"end": 1075,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 991,
									"end": 1075,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 861,
									"end": 1085,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1145,
									"end": 1147,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1134,
									"end": 1143,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1130,
									"end": 1148,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1124,
									"end": 1149,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1176,
									"end": 1194,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1168,
									"end": 1174,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1165,
									"end": 1195,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1162,
									"end": 1164,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1162,
									"end": 1164,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 1162,
									"end": 1164,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1208,
									"end": 1209,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1205,
									"end": 1206,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1198,
									"end": 1210,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1162,
									"end": 1164,
									"name": "tag",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 1162,
									"end": 1164,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1236,
									"end": 1310,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1302,
									"end": 1309,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1293,
									"end": 1299,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1282,
									"end": 1291,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1278,
									"end": 1300,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1236,
									"end": 1310,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 1236,
									"end": 1310,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1236,
									"end": 1310,
									"name": "tag",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1236,
									"end": 1310,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1226,
									"end": 1310,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1226,
									"end": 1310,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1095,
									"end": 1320,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 789,
									"end": 1327,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1333,
									"end": 1462,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 1333,
									"end": 1462,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1367,
									"end": 1373,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1394,
									"end": 1414,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 1394,
									"end": 1414,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 1394,
									"end": 1414,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1394,
									"end": 1414,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 1394,
									"end": 1414,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 1414,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 1414,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1423,
									"end": 1456,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 1451,
									"end": 1455,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1443,
									"end": 1449,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1423,
									"end": 1456,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 1423,
									"end": 1456,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1423,
									"end": 1456,
									"name": "tag",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 1423,
									"end": 1456,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1374,
									"end": 1462,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1374,
									"end": 1462,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1374,
									"end": 1462,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1374,
									"end": 1462,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1468,
									"end": 1543,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 1468,
									"end": 1543,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1501,
									"end": 1507,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1534,
									"end": 1536,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1528,
									"end": 1537,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1518,
									"end": 1537,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1518,
									"end": 1537,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1508,
									"end": 1543,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1508,
									"end": 1543,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1549,
									"end": 1857,
									"name": "tag",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 1549,
									"end": 1857,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1611,
									"end": 1615,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1701,
									"end": 1719,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1693,
									"end": 1699,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1690,
									"end": 1720,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1687,
									"end": 1689,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1687,
									"end": 1689,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 1687,
									"end": 1689,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1723,
									"end": 1741,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 1723,
									"end": 1741,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 1723,
									"end": 1741,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1723,
									"end": 1741,
									"name": "tag",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 1723,
									"end": 1741,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1687,
									"end": 1689,
									"name": "tag",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 1687,
									"end": 1689,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1761,
									"end": 1790,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 1783,
									"end": 1789,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1761,
									"end": 1790,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 1761,
									"end": 1790,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1761,
									"end": 1790,
									"name": "tag",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 1761,
									"end": 1790,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1753,
									"end": 1790,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1753,
									"end": 1790,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1845,
									"end": 1849,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1839,
									"end": 1843,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 1850,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1827,
									"end": 1850,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1827,
									"end": 1850,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1616,
									"end": 1857,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1616,
									"end": 1857,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1616,
									"end": 1857,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1616,
									"end": 1857,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1863,
									"end": 2170,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 1863,
									"end": 2170,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "tag",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1955,
									"end": 1961,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1952,
									"end": 1953,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1949,
									"end": 1962,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2040,
									"end": 2041,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2035,
									"end": 2038,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2031,
									"end": 2042,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2025,
									"end": 2043,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2021,
									"end": 2022,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2016,
									"end": 2019,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2012,
									"end": 2023,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2044,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1977,
									"end": 1979,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1974,
									"end": 1975,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 1980,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 1980,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "tag",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 1941,
									"end": 2054,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2072,
									"end": 2078,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2069,
									"end": 2070,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2066,
									"end": 2079,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 2063,
									"end": 2065,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2063,
									"end": 2065,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "57"
								},
								{
									"begin": 2063,
									"end": 2065,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2153,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2143,
									"end": 2149,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2138,
									"end": 2141,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2134,
									"end": 2150,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2127,
									"end": 2154,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2063,
									"end": 2065,
									"name": "tag",
									"source": 12,
									"value": "57"
								},
								{
									"begin": 2063,
									"end": 2065,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 2170,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 2170,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 2170,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 2170,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 2170,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2176,
									"end": 2496,
									"name": "tag",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 2176,
									"end": 2496,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2220,
									"end": 2226,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2257,
									"end": 2258,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 2251,
									"end": 2255,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2247,
									"end": 2259,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 2237,
									"end": 2259,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2237,
									"end": 2259,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2304,
									"end": 2305,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 2298,
									"end": 2302,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2294,
									"end": 2306,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2325,
									"end": 2343,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2315,
									"end": 2317,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "59"
								},
								{
									"begin": 2315,
									"end": 2317,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2381,
									"end": 2385,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 2373,
									"end": 2379,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2369,
									"end": 2386,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2359,
									"end": 2386,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2359,
									"end": 2386,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2315,
									"end": 2317,
									"name": "tag",
									"source": 12,
									"value": "59"
								},
								{
									"begin": 2315,
									"end": 2317,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2443,
									"end": 2445,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2435,
									"end": 2441,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2432,
									"end": 2446,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 2412,
									"end": 2430,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2409,
									"end": 2447,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 2406,
									"end": 2408,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2406,
									"end": 2408,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 2406,
									"end": 2408,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2462,
									"end": 2480,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 2462,
									"end": 2480,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "62"
								},
								{
									"begin": 2462,
									"end": 2480,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2462,
									"end": 2480,
									"name": "tag",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 2462,
									"end": 2480,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2406,
									"end": 2408,
									"name": "tag",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 2406,
									"end": 2408,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2227,
									"end": 2496,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2227,
									"end": 2496,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2227,
									"end": 2496,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2227,
									"end": 2496,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2227,
									"end": 2496,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2502,
									"end": 2783,
									"name": "tag",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 2502,
									"end": 2783,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 2607,
									"end": 2611,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "tag",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2577,
									"end": 2583,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2715,
									"end": 2721,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2703,
									"end": 2713,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2700,
									"end": 2722,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 2679,
									"end": 2697,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2667,
									"end": 2677,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2664,
									"end": 2698,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 2661,
									"end": 2723,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 2658,
									"end": 2660,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2658,
									"end": 2660,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 2658,
									"end": 2660,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2726,
									"end": 2744,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 2726,
									"end": 2744,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 2726,
									"end": 2744,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2726,
									"end": 2744,
									"name": "tag",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 2726,
									"end": 2744,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2658,
									"end": 2660,
									"name": "tag",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 2658,
									"end": 2660,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2766,
									"end": 2776,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2762,
									"end": 2764,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2755,
									"end": 2777,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2545,
									"end": 2783,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2545,
									"end": 2783,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2545,
									"end": 2783,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2545,
									"end": 2783,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2789,
									"end": 2969,
									"name": "tag",
									"source": 12,
									"value": "62"
								},
								{
									"begin": 2789,
									"end": 2969,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2837,
									"end": 2914,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2834,
									"end": 2835,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2827,
									"end": 2915,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2934,
									"end": 2938,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 2931,
									"end": 2932,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 2924,
									"end": 2939,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2958,
									"end": 2962,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 2955,
									"end": 2956,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2948,
									"end": 2963,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 2975,
									"end": 3155,
									"name": "tag",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 2975,
									"end": 3155,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3023,
									"end": 3100,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3020,
									"end": 3021,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3013,
									"end": 3101,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3120,
									"end": 3124,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 3117,
									"end": 3118,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 3110,
									"end": 3125,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3144,
									"end": 3148,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 3141,
									"end": 3142,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3134,
									"end": 3149,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3161,
									"end": 3263,
									"name": "tag",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 3161,
									"end": 3263,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3202,
									"end": 3208,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3253,
									"end": 3255,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 3249,
									"end": 3256,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 3244,
									"end": 3246,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 3237,
									"end": 3242,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3233,
									"end": 3247,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3229,
									"end": 3257,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 3219,
									"end": 3257,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3219,
									"end": 3257,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3209,
									"end": 3263,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3209,
									"end": 3263,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3209,
									"end": 3263,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3209,
									"end": 3263,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 16955,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122056c7962c23fb6b7f50d717f79202bc8f741fa0cb40c9d76bf73520c87270100064736f6c63430008040033",
									".code": [
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "6352211E"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "A22CB465"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "A22CB465"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "B88D4FDE"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "C87B56DD"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "E985E9C5"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "6352211E"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "1FFC9A7"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "81812FC"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "42842E0E"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 16955,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1672,
											"end": 1676,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1722,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "80AC58CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1718,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1778,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1774,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1851,
											"end": 1862,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1827,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1688,
											"end": 1863,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1688,
											"end": 1863,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2538,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2557,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4011,
											"end": 4018,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4030,
											"end": 4044,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4086,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4087,
											"end": 4094,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4064,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4064,
											"end": 4095,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3561,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3579,
											"end": 3586,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3564,
											"end": 3578,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3587,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3611,
											"end": 3616,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3607,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3702,
											"end": 3707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3686,
											"end": 3696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 3728,
											"end": 3733,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3735,
											"end": 3745,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3711,
											"end": 3727,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3855,
											"end": 3857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3859,
											"end": 3866,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3846,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4820,
											"end": 4830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4841,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4801,
											"end": 4819,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 4913,
											"end": 4917,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4919,
											"end": 4921,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4903,
											"end": 4912,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5154,
											"end": 5158,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5160,
											"end": 5162,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5164,
											"end": 5171,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2262,
											"end": 2269,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2281,
											"end": 2294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2306,
											"end": 2313,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2297,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2314,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2350,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2337,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2397,
											"end": 2402,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2001,
											"end": 2008,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2046,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2033,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2119,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2120,
											"end": 2125,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2126,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2689,
											"end": 2702,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2721,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4282,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4296,
											"end": 4304,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4306,
											"end": 4314,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4281,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5436,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5450,
											"end": 5457,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5532,
											"end": 5536,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5538,
											"end": 5540,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5542,
											"end": 5549,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5551,
											"end": 5555,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5518,
											"end": 5531,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2874,
											"end": 2887,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2914,
											"end": 2921,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2954,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 2957,
											"end": 2965,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3008,
											"end": 3009,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2990,
											"end": 2997,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3005,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3009,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3036,
											"end": 3043,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 3045,
											"end": 3052,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3045,
											"end": 3061,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4485,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4526,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4527,
											"end": 4532,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4542,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4501,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4501,
											"end": 4543,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 914,
											"end": 918,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 977,
											"name": "PUSH",
											"source": 9,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 937,
											"end": 948,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 930,
											"end": 977,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 930,
											"end": 977,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 829,
											"end": 984,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 13466,
											"end": 13599,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 13466,
											"end": 13599,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13547,
											"end": 13563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 13555,
											"end": 13562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13547,
											"end": 13554,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 13547,
											"end": 13563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13547,
											"end": 13563,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 13547,
											"end": 13563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 13539,
											"end": 13592,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13466,
											"end": 13599,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13466,
											"end": 13599,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12768,
											"end": 12939,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 12768,
											"end": 12939,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12869,
											"end": 12871,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12857,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12858,
											"end": 12865,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12866,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12842,
											"end": 12871,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12924,
											"end": 12931,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12920,
											"end": 12922,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12895,
											"end": 12918,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12910,
											"end": 12917,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12895,
											"end": 12909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 12895,
											"end": 12918,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 12895,
											"end": 12918,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12895,
											"end": 12918,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12886,
											"end": 12932,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 12768,
											"end": 12939,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12768,
											"end": 12939,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12768,
											"end": 12939,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7633,
											"end": 7637,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7649,
											"end": 7662,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 7680,
											"end": 7687,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7665,
											"end": 7679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7649,
											"end": 7688,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7649,
											"end": 7688,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7717,
											"end": 7722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7713,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 7743,
											"end": 7748,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7750,
											"end": 7757,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7726,
											"end": 7742,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7786,
											"end": 7793,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 7774,
											"end": 7781,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7773,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11577,
											"end": 11581,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11581,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11550,
											"end": 11581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 11565,
											"end": 11572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11564,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 11550,
											"end": 11573,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11550,
											"end": 11573,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 11550,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11581,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11550,
											"end": 11581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11581,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 11542,
											"end": 11623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11655,
											"end": 11656,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11641,
											"end": 11643,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11641,
											"end": 11657,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 11633,
											"end": 11698,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11709,
											"end": 11751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 11730,
											"end": 11734,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11736,
											"end": 11738,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11740,
											"end": 11747,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11749,
											"end": 11750,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 11709,
											"end": 11729,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 11709,
											"end": 11751,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11709,
											"end": 11751,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 11709,
											"end": 11751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11878,
											"end": 11882,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11851,
											"end": 11882,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11851,
											"end": 11882,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11851,
											"end": 11874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 11866,
											"end": 11873,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11851,
											"end": 11865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 11851,
											"end": 11874,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11851,
											"end": 11874,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 11851,
											"end": 11874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11851,
											"end": 11882,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11851,
											"end": 11882,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11851,
											"end": 11882,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 11843,
											"end": 11924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12008,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12009,
											"end": 12016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 11993,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11986,
											"end": 12017,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12481,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12461,
											"end": 12470,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12471,
											"end": 12475,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12476,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12461,
											"end": 12481,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12512,
											"end": 12513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12495,
											"end": 12504,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12505,
											"end": 12507,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12508,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12495,
											"end": 12513,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12552,
											"end": 12554,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12540,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12541,
											"end": 12548,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12549,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12533,
											"end": 12554,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12589,
											"end": 12596,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12585,
											"end": 12587,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12579,
											"end": 12583,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12597,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 12608,
											"end": 12649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 12628,
											"end": 12632,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12634,
											"end": 12636,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12638,
											"end": 12645,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12647,
											"end": 12648,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12608,
											"end": 12627,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 12608,
											"end": 12649,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 12608,
											"end": 12649,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 12608,
											"end": 12649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11423,
											"end": 12656,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6904,
											"end": 6911,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6937,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6938,
											"end": 6945,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6923,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6923,
											"end": 6946,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13225,
											"end": 13233,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13216,
											"end": 13221,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 13216,
											"end": 13233,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 13208,
											"end": 13263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13311,
											"end": 13319,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13291,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13292,
											"end": 13297,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13273,
											"end": 13298,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13299,
											"end": 13307,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13308,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 13273,
											"end": 13319,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13356,
											"end": 13364,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13349,
											"end": 13354,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH",
											"source": 0,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 13366,
											"end": 13374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13334,
											"end": 13375,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13075,
											"end": 13382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 6584,
											"end": 6588,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 6592,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6594,
											"end": 6601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6574,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 6643,
											"end": 6647,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6649,
											"end": 6651,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6653,
											"end": 6660,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6662,
											"end": 6666,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6620,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 471,
											"end": 484,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 520,
											"end": 534,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 558,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 548,
											"end": 553,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 537,
											"end": 547,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "tag",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 537,
											"end": 558,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 520,
											"end": 558,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 520,
											"end": 558,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 572,
											"end": 592,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 606,
											"end": 612,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 572,
											"end": 613,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 572,
											"end": 613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 627,
											"end": 638,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 749,
											"end": 751,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 745,
											"end": 760,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 737,
											"end": 743,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 733,
											"end": 761,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 726,
											"end": 761,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 726,
											"end": 761,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 795,
											"end": 799,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 819,
											"end": 824,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 958,
											"end": 966,
											"name": "PUSH",
											"source": 8,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 946,
											"end": 951,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 942,
											"end": 956,
											"name": "MOD",
											"source": 8
										},
										{
											"begin": 937,
											"end": 967,
											"name": "BYTE",
											"source": 8
										},
										{
											"begin": 932,
											"end": 935,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 924,
											"end": 968,
											"name": "MSTORE8",
											"source": 8
										},
										{
											"begin": 1012,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1045,
											"end": 1046,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1036,
											"end": 1041,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1036,
											"end": 1046,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1088,
											"end": 1094,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7321,
											"end": 7325,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7373,
											"end": 7374,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 7353,
											"end": 7360,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "tag",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7337,
											"end": 7375,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7337,
											"end": 7375,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15882,
											"end": 15883,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 15870,
											"end": 15879,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15870,
											"end": 15883,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 15866,
											"end": 16088,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 15866,
											"end": 16088,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 15866,
											"end": 16088,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 15919,
											"end": 15920,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15903,
											"end": 15921,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15903,
											"end": 15921,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 15903,
											"end": 15907,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 15903,
											"end": 15921,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15903,
											"end": 15921,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 15903,
											"end": 15921,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 15899,
											"end": 15984,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 15899,
											"end": 15984,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 15960,
											"end": 15969,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15950,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15951,
											"end": 15955,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15956,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "tag",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 15941,
											"end": 15969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15899,
											"end": 15984,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 15899,
											"end": 15984,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16015,
											"end": 16016,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16001,
											"end": 16017,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16001,
											"end": 16017,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16001,
											"end": 16003,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16001,
											"end": 16017,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16001,
											"end": 16017,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16001,
											"end": 16017,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 15997,
											"end": 16078,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 15997,
											"end": 16078,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 16054,
											"end": 16063,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16046,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16047,
											"end": 16049,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16050,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16063,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15997,
											"end": 16078,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 15997,
											"end": 16078,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15866,
											"end": 16088,
											"name": "tag",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 15866,
											"end": 16088,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15698,
											"end": 16094,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16953,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14300,
											"end": 14304,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14320,
											"end": 14335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 14320,
											"end": 14322,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14320,
											"end": 14333,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14320,
											"end": 14333,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14320,
											"end": 14333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 14320,
											"end": 14335,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14320,
											"end": 14335,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 14320,
											"end": 14335,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14316,
											"end": 14976,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14316,
											"end": 14976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 14316,
											"end": 14976,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14371,
											"end": 14373,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14391,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14355,
											"end": 14391,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14391,
											"name": "PUSH",
											"source": 0,
											"value": "150B7A02"
										},
										{
											"begin": 14392,
											"end": 14404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 14392,
											"end": 14402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 14392,
											"end": 14404,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14392,
											"end": 14404,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 14392,
											"end": 14404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14406,
											"end": 14410,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 14412,
											"end": 14419,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 14421,
											"end": 14425,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "tag",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "tag",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 14355,
											"end": 14426,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14610,
											"end": 14611,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14593,
											"end": 14599,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14593,
											"end": 14606,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14593,
											"end": 14611,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14589,
											"end": 14910,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14589,
											"end": 14910,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 14589,
											"end": 14910,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14635,
											"end": 14695,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14589,
											"end": 14910,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 14589,
											"end": 14910,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14862,
											"end": 14868,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14856,
											"end": 14869,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14847,
											"end": 14853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14843,
											"end": 14845,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14839,
											"end": 14854,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14832,
											"end": 14870,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "tag",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 14351,
											"end": 14924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14486,
											"end": 14527,
											"name": "PUSH",
											"source": 0,
											"value": "150B7A02"
										},
										{
											"begin": 14486,
											"end": 14527,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 14486,
											"end": 14527,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14476,
											"end": 14527,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14469,
											"end": 14527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14469,
											"end": 14527,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14469,
											"end": 14527,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14469,
											"end": 14527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 14469,
											"end": 14527,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14316,
											"end": 14976,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 14316,
											"end": 14976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14961,
											"end": 14965,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14954,
											"end": 14965,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14954,
											"end": 14965,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14151,
											"end": 14982,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "tag",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9942,
											"end": 9949,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9961,
											"end": 9975,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9978,
											"end": 9979,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9961,
											"end": 9979,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9961,
											"end": 9979,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10026,
											"end": 10032,
											"name": "PUSH",
											"source": 11,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10017,
											"end": 10022,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10017,
											"end": 10032,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10061,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "242"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "tag",
											"source": 11,
											"value": "242"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10095,
											"end": 10097,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "tag",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10138,
											"end": 10144,
											"name": "PUSH",
											"source": 11,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10129,
											"end": 10134,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10129,
											"end": 10144,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10173,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10207,
											"end": 10209,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "tag",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10250,
											"end": 10256,
											"name": "PUSH",
											"source": 11,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10241,
											"end": 10246,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10241,
											"end": 10256,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10285,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10319,
											"end": 10321,
											"name": "PUSH",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "tag",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10362,
											"end": 10367,
											"name": "PUSH",
											"source": 11,
											"value": "5F5E100"
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10353,
											"end": 10367,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10396,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "5F5E100"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10429,
											"end": 10430,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "tag",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10471,
											"end": 10476,
											"name": "PUSH",
											"source": 11,
											"value": "2710"
										},
										{
											"begin": 10462,
											"end": 10467,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10462,
											"end": 10476,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10505,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "2710"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10538,
											"end": 10539,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10580,
											"end": 10585,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 10571,
											"end": 10576,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10571,
											"end": 10585,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10614,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "tag",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10647,
											"end": 10648,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10689,
											"end": 10694,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 10680,
											"end": 10685,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10680,
											"end": 10694,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10724,
											"end": 10725,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "tag",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10766,
											"end": 10772,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 350,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 7,
											"end": 350,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 84,
											"end": 89,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 166,
											"end": 172,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 100,
											"end": 174,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 100,
											"end": 174,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 197,
											"end": 203,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 190,
											"end": 195,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 183,
											"end": 204,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 235,
											"end": 239,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 228,
											"end": 233,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 224,
											"end": 240,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 273,
											"end": 276,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 264,
											"end": 270,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 259,
											"end": 262,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 255,
											"end": 271,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 252,
											"end": 277,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 249,
											"end": 251,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 249,
											"end": 251,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 249,
											"end": 251,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 290,
											"end": 291,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 287,
											"end": 288,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 280,
											"end": 292,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 249,
											"end": 251,
											"name": "tag",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 249,
											"end": 251,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 303,
											"end": 344,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 337,
											"end": 343,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 332,
											"end": 335,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 327,
											"end": 330,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 303,
											"end": 344,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 303,
											"end": 344,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 303,
											"end": 344,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 303,
											"end": 344,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 350,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 356,
											"end": 495,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 356,
											"end": 495,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 402,
											"end": 407,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 440,
											"end": 446,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 427,
											"end": 447,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 418,
											"end": 447,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 418,
											"end": 447,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 456,
											"end": 489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 483,
											"end": 488,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 456,
											"end": 489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 456,
											"end": 489,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 456,
											"end": 489,
											"name": "tag",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 456,
											"end": 489,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 408,
											"end": 495,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 408,
											"end": 495,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 408,
											"end": 495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 408,
											"end": 495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 408,
											"end": 495,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 501,
											"end": 634,
											"name": "tag",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 501,
											"end": 634,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 544,
											"end": 549,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 582,
											"end": 588,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 569,
											"end": 589,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 560,
											"end": 589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 560,
											"end": 589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 598,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 622,
											"end": 627,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 598,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 598,
											"end": 628,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 598,
											"end": 628,
											"name": "tag",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 598,
											"end": 628,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 550,
											"end": 634,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 550,
											"end": 634,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 550,
											"end": 634,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 550,
											"end": 634,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 550,
											"end": 634,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 777,
											"name": "tag",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 640,
											"end": 777,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 685,
											"end": 690,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 723,
											"end": 729,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 730,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 701,
											"end": 730,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 701,
											"end": 730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 739,
											"end": 771,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 765,
											"end": 770,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 739,
											"end": 771,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 739,
											"end": 771,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 739,
											"end": 771,
											"name": "tag",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 739,
											"end": 771,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 691,
											"end": 777,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 691,
											"end": 777,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 691,
											"end": 777,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 691,
											"end": 777,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 691,
											"end": 777,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 783,
											"end": 924,
											"name": "tag",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 783,
											"end": 924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 839,
											"end": 844,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 864,
											"end": 877,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 855,
											"end": 877,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 855,
											"end": 877,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 886,
											"end": 918,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 912,
											"end": 917,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 886,
											"end": 918,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 886,
											"end": 918,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 886,
											"end": 918,
											"name": "tag",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 886,
											"end": 918,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 845,
											"end": 924,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 845,
											"end": 924,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 845,
											"end": 924,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 845,
											"end": 924,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 845,
											"end": 924,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 943,
											"end": 1214,
											"name": "tag",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 943,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 998,
											"end": 1003,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1047,
											"end": 1050,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1040,
											"end": 1044,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1032,
											"end": 1038,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1045,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1024,
											"end": 1051,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1014,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 1014,
											"end": 1016,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1065,
											"end": 1066,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1063,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1055,
											"end": 1067,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1014,
											"end": 1016,
											"name": "tag",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 1014,
											"end": 1016,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1105,
											"end": 1111,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1092,
											"end": 1112,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1130,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 1204,
											"end": 1207,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1196,
											"end": 1202,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1189,
											"end": 1193,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1181,
											"end": 1187,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1177,
											"end": 1194,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1130,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 1130,
											"end": 1208,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1130,
											"end": 1208,
											"name": "tag",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 1130,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1121,
											"end": 1208,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1121,
											"end": 1208,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1004,
											"end": 1214,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1220,
											"end": 1359,
											"name": "tag",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 1220,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1266,
											"end": 1271,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1310,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1291,
											"end": 1311,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1282,
											"end": 1311,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1282,
											"end": 1311,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1320,
											"end": 1353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 1347,
											"end": 1352,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1320,
											"end": 1353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 1320,
											"end": 1353,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1320,
											"end": 1353,
											"name": "tag",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 1320,
											"end": 1353,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1359,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1359,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1359,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1359,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1359,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1365,
											"end": 1627,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 1365,
											"end": 1627,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1424,
											"end": 1430,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1475,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1461,
											"end": 1470,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1452,
											"end": 1459,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1448,
											"end": 1471,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1444,
											"end": 1476,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1441,
											"end": 1443,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1441,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 1441,
											"end": 1443,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1489,
											"end": 1490,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1486,
											"end": 1487,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1479,
											"end": 1491,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1441,
											"end": 1443,
											"name": "tag",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 1441,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1532,
											"end": 1533,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 1602,
											"end": 1609,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1593,
											"end": 1599,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1578,
											"end": 1600,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "tag",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1547,
											"end": 1610,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1547,
											"end": 1610,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1503,
											"end": 1620,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1627,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1627,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1627,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1627,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1627,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1633,
											"end": 2040,
											"name": "tag",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 1633,
											"end": 2040,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1701,
											"end": 1707,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1758,
											"end": 1760,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1746,
											"end": 1755,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1737,
											"end": 1744,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1733,
											"end": 1756,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1729,
											"end": 1761,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1774,
											"end": 1775,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1771,
											"end": 1772,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1764,
											"end": 1776,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "tag",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1817,
											"end": 1818,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1842,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 1887,
											"end": 1894,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1878,
											"end": 1884,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1867,
											"end": 1876,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1863,
											"end": 1885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1842,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 1842,
											"end": 1895,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1842,
											"end": 1895,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 1842,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1832,
											"end": 1895,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1832,
											"end": 1895,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1788,
											"end": 1905,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1946,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1970,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 2015,
											"end": 2022,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2006,
											"end": 2012,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1995,
											"end": 2004,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1991,
											"end": 2013,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1970,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 1970,
											"end": 2023,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1970,
											"end": 2023,
											"name": "tag",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 1970,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2023,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2023,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1915,
											"end": 2033,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1716,
											"end": 2040,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2046,
											"end": 2598,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2046,
											"end": 2598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2123,
											"end": 2129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2131,
											"end": 2137,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2139,
											"end": 2145,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2188,
											"end": 2190,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2176,
											"end": 2185,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2167,
											"end": 2174,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2163,
											"end": 2186,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2159,
											"end": 2191,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2156,
											"end": 2158,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2156,
											"end": 2158,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 2156,
											"end": 2158,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2194,
											"end": 2206,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2156,
											"end": 2158,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 2156,
											"end": 2158,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2247,
											"end": 2248,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "297"
										},
										{
											"begin": 2317,
											"end": 2324,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2308,
											"end": 2314,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2297,
											"end": 2306,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2293,
											"end": 2315,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "tag",
											"source": 12,
											"value": "297"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2262,
											"end": 2325,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2262,
											"end": 2325,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2218,
											"end": 2335,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2374,
											"end": 2376,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2400,
											"end": 2453,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 2445,
											"end": 2452,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2436,
											"end": 2442,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2425,
											"end": 2434,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2421,
											"end": 2443,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2400,
											"end": 2453,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2400,
											"end": 2453,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2400,
											"end": 2453,
											"name": "tag",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 2400,
											"end": 2453,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2390,
											"end": 2453,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2390,
											"end": 2453,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2345,
											"end": 2463,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2502,
											"end": 2504,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2528,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 2573,
											"end": 2580,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2564,
											"end": 2570,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2553,
											"end": 2562,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2549,
											"end": 2571,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2528,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 2528,
											"end": 2581,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2528,
											"end": 2581,
											"name": "tag",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 2528,
											"end": 2581,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2518,
											"end": 2581,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2518,
											"end": 2581,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2473,
											"end": 2591,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2146,
											"end": 2598,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2604,
											"end": 3413,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2604,
											"end": 3413,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2699,
											"end": 2705,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2707,
											"end": 2713,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2715,
											"end": 2721,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2723,
											"end": 2729,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2772,
											"end": 2775,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 2760,
											"end": 2769,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2751,
											"end": 2758,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2747,
											"end": 2770,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2743,
											"end": 2776,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2789,
											"end": 2790,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2786,
											"end": 2787,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2779,
											"end": 2791,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "tag",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2833,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2857,
											"end": 2910,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 2902,
											"end": 2909,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2893,
											"end": 2899,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2882,
											"end": 2891,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 2878,
											"end": 2900,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2857,
											"end": 2910,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2857,
											"end": 2910,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2857,
											"end": 2910,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 2857,
											"end": 2910,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2847,
											"end": 2910,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2847,
											"end": 2910,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2803,
											"end": 2920,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2959,
											"end": 2961,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2985,
											"end": 3038,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 3030,
											"end": 3037,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3021,
											"end": 3027,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3010,
											"end": 3019,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 3006,
											"end": 3028,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2985,
											"end": 3038,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2985,
											"end": 3038,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2985,
											"end": 3038,
											"name": "tag",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 2985,
											"end": 3038,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2975,
											"end": 3038,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2975,
											"end": 3038,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2930,
											"end": 3048,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3087,
											"end": 3089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3113,
											"end": 3166,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 3158,
											"end": 3165,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3149,
											"end": 3155,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3138,
											"end": 3147,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 3134,
											"end": 3156,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3113,
											"end": 3166,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 3113,
											"end": 3166,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3113,
											"end": 3166,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 3113,
											"end": 3166,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3103,
											"end": 3166,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3103,
											"end": 3166,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3058,
											"end": 3176,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3243,
											"end": 3245,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 3232,
											"end": 3241,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3215,
											"end": 3247,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3274,
											"end": 3292,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3266,
											"end": 3272,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3263,
											"end": 3293,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "305"
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3306,
											"end": 3307,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3303,
											"end": 3304,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3296,
											"end": 3308,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "tag",
											"source": 12,
											"value": "305"
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3334,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 3388,
											"end": 3395,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3379,
											"end": 3385,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3368,
											"end": 3377,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 3364,
											"end": 3386,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3334,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 3334,
											"end": 3396,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3334,
											"end": 3396,
											"name": "tag",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 3334,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3324,
											"end": 3396,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3324,
											"end": 3396,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3186,
											"end": 3406,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2730,
											"end": 3413,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3419,
											"end": 3820,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 3419,
											"end": 3820,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3484,
											"end": 3490,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3492,
											"end": 3498,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3541,
											"end": 3543,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3529,
											"end": 3538,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3520,
											"end": 3527,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3516,
											"end": 3539,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3512,
											"end": 3544,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3509,
											"end": 3511,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3509,
											"end": 3511,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 3509,
											"end": 3511,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3557,
											"end": 3558,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3554,
											"end": 3555,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3547,
											"end": 3559,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3509,
											"end": 3511,
											"name": "tag",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 3509,
											"end": 3511,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3600,
											"end": 3601,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3625,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "309"
										},
										{
											"begin": 3670,
											"end": 3677,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3661,
											"end": 3667,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3650,
											"end": 3659,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3646,
											"end": 3668,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3625,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 3625,
											"end": 3678,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3625,
											"end": 3678,
											"name": "tag",
											"source": 12,
											"value": "309"
										},
										{
											"begin": 3625,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3615,
											"end": 3678,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3615,
											"end": 3678,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3571,
											"end": 3688,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3727,
											"end": 3729,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3753,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 3795,
											"end": 3802,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3786,
											"end": 3792,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3775,
											"end": 3784,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3771,
											"end": 3793,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3753,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 3753,
											"end": 3803,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3753,
											"end": 3803,
											"name": "tag",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 3753,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3743,
											"end": 3803,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3743,
											"end": 3803,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3698,
											"end": 3813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3499,
											"end": 3820,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3826,
											"end": 4233,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 3826,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3902,
											"end": 3908,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3951,
											"end": 3953,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3939,
											"end": 3948,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3930,
											"end": 3937,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3926,
											"end": 3949,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3922,
											"end": 3954,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3967,
											"end": 3968,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 3969,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "tag",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4035,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 4080,
											"end": 4087,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4071,
											"end": 4077,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4060,
											"end": 4069,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4056,
											"end": 4078,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4035,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 4035,
											"end": 4088,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4035,
											"end": 4088,
											"name": "tag",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 4035,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4025,
											"end": 4088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4025,
											"end": 4088,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3981,
											"end": 4098,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4137,
											"end": 4139,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4163,
											"end": 4216,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 4208,
											"end": 4215,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4199,
											"end": 4205,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4188,
											"end": 4197,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4184,
											"end": 4206,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4163,
											"end": 4216,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 4163,
											"end": 4216,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4163,
											"end": 4216,
											"name": "tag",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 4163,
											"end": 4216,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4153,
											"end": 4216,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4153,
											"end": 4216,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4108,
											"end": 4226,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3909,
											"end": 4233,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4239,
											"end": 4499,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4239,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4297,
											"end": 4303,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4346,
											"end": 4348,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4334,
											"end": 4343,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4325,
											"end": 4332,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4321,
											"end": 4344,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4317,
											"end": 4349,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4362,
											"end": 4363,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4359,
											"end": 4360,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4352,
											"end": 4364,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "tag",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4405,
											"end": 4406,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4430,
											"end": 4482,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 4474,
											"end": 4481,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4465,
											"end": 4471,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4454,
											"end": 4463,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4450,
											"end": 4472,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4430,
											"end": 4482,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 4430,
											"end": 4482,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4430,
											"end": 4482,
											"name": "tag",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 4430,
											"end": 4482,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4420,
											"end": 4482,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4420,
											"end": 4482,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4376,
											"end": 4492,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4304,
											"end": 4499,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4304,
											"end": 4499,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4304,
											"end": 4499,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4304,
											"end": 4499,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4304,
											"end": 4499,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4505,
											"end": 4787,
											"name": "tag",
											"source": 12,
											"value": "228"
										},
										{
											"begin": 4505,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4574,
											"end": 4580,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4623,
											"end": 4625,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4611,
											"end": 4620,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4602,
											"end": 4609,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4598,
											"end": 4621,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4594,
											"end": 4626,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4639,
											"end": 4640,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4636,
											"end": 4637,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4629,
											"end": 4641,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "tag",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4683,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4707,
											"end": 4770,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "320"
										},
										{
											"begin": 4762,
											"end": 4769,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4753,
											"end": 4759,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4742,
											"end": 4751,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4738,
											"end": 4760,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4707,
											"end": 4770,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 4707,
											"end": 4770,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4707,
											"end": 4770,
											"name": "tag",
											"source": 12,
											"value": "320"
										},
										{
											"begin": 4707,
											"end": 4770,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4697,
											"end": 4770,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4697,
											"end": 4770,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4653,
											"end": 4780,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4581,
											"end": 4787,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4581,
											"end": 4787,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4581,
											"end": 4787,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4581,
											"end": 4787,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4581,
											"end": 4787,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4793,
											"end": 5055,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 4793,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4852,
											"end": 4858,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4901,
											"end": 4903,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4889,
											"end": 4898,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4880,
											"end": 4887,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4876,
											"end": 4899,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4872,
											"end": 4904,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "322"
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4917,
											"end": 4918,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4914,
											"end": 4915,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4907,
											"end": 4919,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "tag",
											"source": 12,
											"value": "322"
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4960,
											"end": 4961,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4985,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 5030,
											"end": 5037,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5021,
											"end": 5027,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5010,
											"end": 5019,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5006,
											"end": 5028,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4985,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 4985,
											"end": 5038,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4985,
											"end": 5038,
											"name": "tag",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 4985,
											"end": 5038,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4975,
											"end": 5038,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4975,
											"end": 5038,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4931,
											"end": 5048,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 5055,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 5055,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 5055,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 5055,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 5055,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5061,
											"end": 5179,
											"name": "tag",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 5061,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5148,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 5166,
											"end": 5171,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5148,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 5148,
											"end": 5172,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5148,
											"end": 5172,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 5148,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5143,
											"end": 5146,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5136,
											"end": 5173,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5126,
											"end": 5179,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5126,
											"end": 5179,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5126,
											"end": 5179,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5185,
											"end": 5294,
											"name": "tag",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 5185,
											"end": 5294,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5266,
											"end": 5287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 5281,
											"end": 5286,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5266,
											"end": 5287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 5266,
											"end": 5287,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5266,
											"end": 5287,
											"name": "tag",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 5266,
											"end": 5287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 5264,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5254,
											"end": 5288,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5244,
											"end": 5294,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5244,
											"end": 5294,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5244,
											"end": 5294,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5300,
											"end": 5660,
											"name": "tag",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 5300,
											"end": 5660,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5386,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5414,
											"end": 5452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 5446,
											"end": 5451,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5414,
											"end": 5452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 5414,
											"end": 5452,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5414,
											"end": 5452,
											"name": "tag",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 5414,
											"end": 5452,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5468,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "336"
										},
										{
											"begin": 5531,
											"end": 5537,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5526,
											"end": 5529,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5468,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 5468,
											"end": 5538,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5468,
											"end": 5538,
											"name": "tag",
											"source": 12,
											"value": "336"
										},
										{
											"begin": 5468,
											"end": 5538,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5461,
											"end": 5538,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5461,
											"end": 5538,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5547,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 5592,
											"end": 5598,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5587,
											"end": 5590,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5580,
											"end": 5584,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5573,
											"end": 5578,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5569,
											"end": 5585,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5547,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 5547,
											"end": 5599,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5547,
											"end": 5599,
											"name": "tag",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 5547,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5624,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 5646,
											"end": 5652,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5624,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 5624,
											"end": 5653,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5624,
											"end": 5653,
											"name": "tag",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 5624,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5619,
											"end": 5622,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5615,
											"end": 5654,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5608,
											"end": 5654,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5608,
											"end": 5654,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5390,
											"end": 5660,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5666,
											"end": 6030,
											"name": "tag",
											"source": 12,
											"value": "342"
										},
										{
											"begin": 5666,
											"end": 6030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5754,
											"end": 5757,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 5815,
											"end": 5820,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "tag",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5837,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5896,
											"end": 5899,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5837,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 5837,
											"end": 5908,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5837,
											"end": 5908,
											"name": "tag",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5837,
											"end": 5908,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5830,
											"end": 5908,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5830,
											"end": 5908,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5917,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 5962,
											"end": 5968,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5957,
											"end": 5960,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5950,
											"end": 5954,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5939,
											"end": 5955,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5917,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 5917,
											"end": 5969,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5917,
											"end": 5969,
											"name": "tag",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 5917,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5994,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 6016,
											"end": 6022,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5994,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 5994,
											"end": 6023,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5994,
											"end": 6023,
											"name": "tag",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 5994,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5989,
											"end": 5992,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5985,
											"end": 6024,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5978,
											"end": 6024,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5978,
											"end": 6024,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 6030,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6036,
											"end": 6413,
											"name": "tag",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 6036,
											"end": 6413,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6142,
											"end": 6145,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6170,
											"end": 6209,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 6203,
											"end": 6208,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6170,
											"end": 6209,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 6170,
											"end": 6209,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6170,
											"end": 6209,
											"name": "tag",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 6170,
											"end": 6209,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6225,
											"end": 6314,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 6307,
											"end": 6313,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6302,
											"end": 6305,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6225,
											"end": 6314,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 6225,
											"end": 6314,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6225,
											"end": 6314,
											"name": "tag",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 6225,
											"end": 6314,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6218,
											"end": 6314,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6218,
											"end": 6314,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6323,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 6368,
											"end": 6374,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6363,
											"end": 6366,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6356,
											"end": 6360,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6349,
											"end": 6354,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6345,
											"end": 6361,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6323,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 6323,
											"end": 6375,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6323,
											"end": 6375,
											"name": "tag",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 6323,
											"end": 6375,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6400,
											"end": 6406,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6395,
											"end": 6398,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6391,
											"end": 6407,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6384,
											"end": 6407,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6384,
											"end": 6407,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6413,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6419,
											"end": 6785,
											"name": "tag",
											"source": 12,
											"value": "356"
										},
										{
											"begin": 6419,
											"end": 6785,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6561,
											"end": 6564,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6582,
											"end": 6649,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "358"
										},
										{
											"begin": 6646,
											"end": 6648,
											"name": "PUSH",
											"source": 12,
											"value": "2D"
										},
										{
											"begin": 6641,
											"end": 6644,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6582,
											"end": 6649,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 6582,
											"end": 6649,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6582,
											"end": 6649,
											"name": "tag",
											"source": 12,
											"value": "358"
										},
										{
											"begin": 6582,
											"end": 6649,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6575,
											"end": 6649,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6575,
											"end": 6649,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6658,
											"end": 6751,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "359"
										},
										{
											"begin": 6747,
											"end": 6750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6658,
											"end": 6751,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "360"
										},
										{
											"begin": 6658,
											"end": 6751,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6658,
											"end": 6751,
											"name": "tag",
											"source": 12,
											"value": "359"
										},
										{
											"begin": 6658,
											"end": 6751,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6776,
											"end": 6778,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6774,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6767,
											"end": 6779,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6760,
											"end": 6779,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6760,
											"end": 6779,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6565,
											"end": 6785,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6565,
											"end": 6785,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6565,
											"end": 6785,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6565,
											"end": 6785,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6791,
											"end": 7157,
											"name": "tag",
											"source": 12,
											"value": "361"
										},
										{
											"begin": 6791,
											"end": 7157,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6933,
											"end": 6936,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6954,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 7018,
											"end": 7020,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7013,
											"end": 7016,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6954,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 6954,
											"end": 7021,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6954,
											"end": 7021,
											"name": "tag",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 6954,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6947,
											"end": 7021,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6947,
											"end": 7021,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7030,
											"end": 7123,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 7119,
											"end": 7122,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7030,
											"end": 7123,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "365"
										},
										{
											"begin": 7030,
											"end": 7123,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7030,
											"end": 7123,
											"name": "tag",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 7030,
											"end": 7123,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7148,
											"end": 7150,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7143,
											"end": 7146,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7139,
											"end": 7151,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7132,
											"end": 7151,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7132,
											"end": 7151,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6937,
											"end": 7157,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6937,
											"end": 7157,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6937,
											"end": 7157,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6937,
											"end": 7157,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7163,
											"end": 7529,
											"name": "tag",
											"source": 12,
											"value": "366"
										},
										{
											"begin": 7163,
											"end": 7529,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7305,
											"end": 7308,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7326,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "368"
										},
										{
											"begin": 7390,
											"end": 7392,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 7385,
											"end": 7388,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7326,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 7326,
											"end": 7393,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7326,
											"end": 7393,
											"name": "tag",
											"source": 12,
											"value": "368"
										},
										{
											"begin": 7326,
											"end": 7393,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7319,
											"end": 7393,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7319,
											"end": 7393,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7402,
											"end": 7495,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 7491,
											"end": 7494,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7402,
											"end": 7495,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "370"
										},
										{
											"begin": 7402,
											"end": 7495,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7402,
											"end": 7495,
											"name": "tag",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 7402,
											"end": 7495,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7520,
											"end": 7522,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7515,
											"end": 7518,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7511,
											"end": 7523,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7309,
											"end": 7529,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7309,
											"end": 7529,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7309,
											"end": 7529,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7309,
											"end": 7529,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7535,
											"end": 7901,
											"name": "tag",
											"source": 12,
											"value": "371"
										},
										{
											"begin": 7535,
											"end": 7901,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7677,
											"end": 7680,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7698,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "373"
										},
										{
											"begin": 7762,
											"end": 7764,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7757,
											"end": 7760,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7698,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 7698,
											"end": 7765,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7698,
											"end": 7765,
											"name": "tag",
											"source": 12,
											"value": "373"
										},
										{
											"begin": 7698,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7691,
											"end": 7765,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7691,
											"end": 7765,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7774,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 7863,
											"end": 7866,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7774,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "375"
										},
										{
											"begin": 7774,
											"end": 7867,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7774,
											"end": 7867,
											"name": "tag",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 7774,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7892,
											"end": 7894,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7887,
											"end": 7890,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7883,
											"end": 7895,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7876,
											"end": 7895,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7876,
											"end": 7895,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7681,
											"end": 7901,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7681,
											"end": 7901,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7681,
											"end": 7901,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7681,
											"end": 7901,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7907,
											"end": 8273,
											"name": "tag",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 7907,
											"end": 8273,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8049,
											"end": 8052,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8070,
											"end": 8137,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "378"
										},
										{
											"begin": 8134,
											"end": 8136,
											"name": "PUSH",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 8129,
											"end": 8132,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8070,
											"end": 8137,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 8070,
											"end": 8137,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8070,
											"end": 8137,
											"name": "tag",
											"source": 12,
											"value": "378"
										},
										{
											"begin": 8070,
											"end": 8137,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8137,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8137,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8146,
											"end": 8239,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 8235,
											"end": 8238,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8146,
											"end": 8239,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "380"
										},
										{
											"begin": 8146,
											"end": 8239,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8146,
											"end": 8239,
											"name": "tag",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 8146,
											"end": 8239,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8264,
											"end": 8266,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8259,
											"end": 8262,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8255,
											"end": 8267,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8248,
											"end": 8267,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8248,
											"end": 8267,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8053,
											"end": 8273,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8053,
											"end": 8273,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8053,
											"end": 8273,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8053,
											"end": 8273,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8279,
											"end": 8645,
											"name": "tag",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 8279,
											"end": 8645,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8421,
											"end": 8424,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8442,
											"end": 8509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 8506,
											"end": 8508,
											"name": "PUSH",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 8501,
											"end": 8504,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8442,
											"end": 8509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 8442,
											"end": 8509,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8442,
											"end": 8509,
											"name": "tag",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 8442,
											"end": 8509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8435,
											"end": 8509,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8435,
											"end": 8509,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8518,
											"end": 8611,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 8607,
											"end": 8610,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8518,
											"end": 8611,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 8518,
											"end": 8611,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8518,
											"end": 8611,
											"name": "tag",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 8518,
											"end": 8611,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8631,
											"end": 8634,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8627,
											"end": 8639,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8620,
											"end": 8639,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8620,
											"end": 8639,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8425,
											"end": 8645,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8425,
											"end": 8645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8425,
											"end": 8645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8425,
											"end": 8645,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8651,
											"end": 9017,
											"name": "tag",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 8651,
											"end": 9017,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8793,
											"end": 8796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8814,
											"end": 8881,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 8878,
											"end": 8880,
											"name": "PUSH",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 8873,
											"end": 8876,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8881,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 8814,
											"end": 8881,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8814,
											"end": 8881,
											"name": "tag",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 8814,
											"end": 8881,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 8881,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 8881,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8890,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 8979,
											"end": 8982,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8890,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "390"
										},
										{
											"begin": 8890,
											"end": 8983,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8890,
											"end": 8983,
											"name": "tag",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 8890,
											"end": 8983,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9003,
											"end": 9006,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8999,
											"end": 9011,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8992,
											"end": 9011,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8992,
											"end": 9011,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8797,
											"end": 9017,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8797,
											"end": 9017,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8797,
											"end": 9017,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8797,
											"end": 9017,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9023,
											"end": 9389,
											"name": "tag",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 9023,
											"end": 9389,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9165,
											"end": 9168,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9186,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 9250,
											"end": 9252,
											"name": "PUSH",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 9245,
											"end": 9248,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9186,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 9186,
											"end": 9253,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9186,
											"end": 9253,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 9186,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9179,
											"end": 9253,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9179,
											"end": 9253,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9262,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 9351,
											"end": 9354,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9262,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 9262,
											"end": 9355,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9262,
											"end": 9355,
											"name": "tag",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 9262,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9380,
											"end": 9382,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9375,
											"end": 9378,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9371,
											"end": 9383,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9364,
											"end": 9383,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9364,
											"end": 9383,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9169,
											"end": 9389,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9169,
											"end": 9389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9169,
											"end": 9389,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9169,
											"end": 9389,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9395,
											"end": 9761,
											"name": "tag",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 9395,
											"end": 9761,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9537,
											"end": 9540,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9558,
											"end": 9625,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 9622,
											"end": 9624,
											"name": "PUSH",
											"source": 12,
											"value": "3D"
										},
										{
											"begin": 9617,
											"end": 9620,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9558,
											"end": 9625,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 9558,
											"end": 9625,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9558,
											"end": 9625,
											"name": "tag",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 9558,
											"end": 9625,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9551,
											"end": 9625,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9551,
											"end": 9625,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9634,
											"end": 9727,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 9723,
											"end": 9726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9634,
											"end": 9727,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 9634,
											"end": 9727,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9634,
											"end": 9727,
											"name": "tag",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 9634,
											"end": 9727,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9752,
											"end": 9754,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9747,
											"end": 9750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9743,
											"end": 9755,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9736,
											"end": 9755,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9736,
											"end": 9755,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9541,
											"end": 9761,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9541,
											"end": 9761,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9541,
											"end": 9761,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9541,
											"end": 9761,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9767,
											"end": 9885,
											"name": "tag",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 9767,
											"end": 9885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9854,
											"end": 9878,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 9872,
											"end": 9877,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9854,
											"end": 9878,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 9854,
											"end": 9878,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9854,
											"end": 9878,
											"name": "tag",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 9854,
											"end": 9878,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9849,
											"end": 9852,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9842,
											"end": 9879,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9832,
											"end": 9885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9832,
											"end": 9885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9832,
											"end": 9885,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9891,
											"end": 10326,
											"name": "tag",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 9891,
											"end": 10326,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10071,
											"end": 10074,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10093,
											"end": 10188,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 10184,
											"end": 10187,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10175,
											"end": 10181,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10093,
											"end": 10188,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 10093,
											"end": 10188,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10093,
											"end": 10188,
											"name": "tag",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 10093,
											"end": 10188,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10086,
											"end": 10188,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10086,
											"end": 10188,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10205,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 10296,
											"end": 10299,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10287,
											"end": 10293,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10205,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 10205,
											"end": 10300,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10205,
											"end": 10300,
											"name": "tag",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 10205,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10198,
											"end": 10300,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10198,
											"end": 10300,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10317,
											"end": 10320,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10310,
											"end": 10320,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10310,
											"end": 10320,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10326,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10332,
											"end": 10554,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 10332,
											"end": 10554,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10425,
											"end": 10429,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10463,
											"end": 10465,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10452,
											"end": 10461,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10448,
											"end": 10466,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10440,
											"end": 10466,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10440,
											"end": 10466,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10476,
											"end": 10547,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 10544,
											"end": 10545,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10533,
											"end": 10542,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10529,
											"end": 10546,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10520,
											"end": 10526,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10476,
											"end": 10547,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 10476,
											"end": 10547,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10476,
											"end": 10547,
											"name": "tag",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 10476,
											"end": 10547,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10430,
											"end": 10554,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10430,
											"end": 10554,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10430,
											"end": 10554,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10430,
											"end": 10554,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10430,
											"end": 10554,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10560,
											"end": 11200,
											"name": "tag",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 10560,
											"end": 11200,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10755,
											"end": 10759,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10793,
											"end": 10796,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 10782,
											"end": 10791,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10778,
											"end": 10797,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10770,
											"end": 10797,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10770,
											"end": 10797,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10807,
											"end": 10878,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 10875,
											"end": 10876,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10864,
											"end": 10873,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10860,
											"end": 10877,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10851,
											"end": 10857,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10807,
											"end": 10878,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 10807,
											"end": 10878,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10807,
											"end": 10878,
											"name": "tag",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 10807,
											"end": 10878,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10888,
											"end": 10960,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 10956,
											"end": 10958,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10945,
											"end": 10954,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10941,
											"end": 10959,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10932,
											"end": 10938,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 10888,
											"end": 10960,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 10888,
											"end": 10960,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10888,
											"end": 10960,
											"name": "tag",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 10888,
											"end": 10960,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10970,
											"end": 11042,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 11038,
											"end": 11040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11027,
											"end": 11036,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11023,
											"end": 11041,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11014,
											"end": 11020,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10970,
											"end": 11042,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 10970,
											"end": 11042,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10970,
											"end": 11042,
											"name": "tag",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 10970,
											"end": 11042,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11089,
											"end": 11098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11083,
											"end": 11087,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11079,
											"end": 11099,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11074,
											"end": 11076,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 11063,
											"end": 11072,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11059,
											"end": 11077,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11052,
											"end": 11100,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11117,
											"end": 11193,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 11188,
											"end": 11192,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11179,
											"end": 11185,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11117,
											"end": 11193,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 11117,
											"end": 11193,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11117,
											"end": 11193,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 11117,
											"end": 11193,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11109,
											"end": 11193,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11109,
											"end": 11193,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10760,
											"end": 11200,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11206,
											"end": 11416,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 11206,
											"end": 11416,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11293,
											"end": 11297,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11331,
											"end": 11333,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11320,
											"end": 11329,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11316,
											"end": 11334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11308,
											"end": 11334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11308,
											"end": 11334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11344,
											"end": 11409,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 11406,
											"end": 11407,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11395,
											"end": 11404,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11391,
											"end": 11408,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11382,
											"end": 11388,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11344,
											"end": 11409,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 11344,
											"end": 11409,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11344,
											"end": 11409,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 11344,
											"end": 11409,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11298,
											"end": 11416,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11298,
											"end": 11416,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11298,
											"end": 11416,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11298,
											"end": 11416,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11298,
											"end": 11416,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11422,
											"end": 11735,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 11422,
											"end": 11735,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11535,
											"end": 11539,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11573,
											"end": 11575,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11562,
											"end": 11571,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11558,
											"end": 11576,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11550,
											"end": 11576,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11550,
											"end": 11576,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11622,
											"end": 11631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11616,
											"end": 11620,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11612,
											"end": 11632,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11608,
											"end": 11609,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11597,
											"end": 11606,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11593,
											"end": 11610,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11633,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11650,
											"end": 11728,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 11723,
											"end": 11727,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11714,
											"end": 11720,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11650,
											"end": 11728,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "342"
										},
										{
											"begin": 11650,
											"end": 11728,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11650,
											"end": 11728,
											"name": "tag",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 11650,
											"end": 11728,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11642,
											"end": 11728,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11642,
											"end": 11728,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11540,
											"end": 11735,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11540,
											"end": 11735,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11540,
											"end": 11735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11540,
											"end": 11735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11540,
											"end": 11735,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11741,
											"end": 12160,
											"name": "tag",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 11741,
											"end": 12160,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11907,
											"end": 11911,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11945,
											"end": 11947,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11934,
											"end": 11943,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11930,
											"end": 11948,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11922,
											"end": 11948,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11922,
											"end": 11948,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11994,
											"end": 12003,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11988,
											"end": 11992,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11984,
											"end": 12004,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11980,
											"end": 11981,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11969,
											"end": 11978,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11965,
											"end": 11982,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11958,
											"end": 12005,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12022,
											"end": 12153,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 12148,
											"end": 12152,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12022,
											"end": 12153,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "356"
										},
										{
											"begin": 12022,
											"end": 12153,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12022,
											"end": 12153,
											"name": "tag",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 12022,
											"end": 12153,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12014,
											"end": 12153,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12014,
											"end": 12153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11912,
											"end": 12160,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11912,
											"end": 12160,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11912,
											"end": 12160,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11912,
											"end": 12160,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 12166,
											"end": 12585,
											"name": "tag",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 12166,
											"end": 12585,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12332,
											"end": 12336,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12370,
											"end": 12372,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 12359,
											"end": 12368,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12355,
											"end": 12373,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12347,
											"end": 12373,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12347,
											"end": 12373,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12419,
											"end": 12428,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12413,
											"end": 12417,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12409,
											"end": 12429,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12405,
											"end": 12406,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12394,
											"end": 12403,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12390,
											"end": 12407,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12383,
											"end": 12430,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12447,
											"end": 12578,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 12573,
											"end": 12577,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12447,
											"end": 12578,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "361"
										},
										{
											"begin": 12447,
											"end": 12578,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12447,
											"end": 12578,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 12447,
											"end": 12578,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12439,
											"end": 12578,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12439,
											"end": 12578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12337,
											"end": 12585,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12337,
											"end": 12585,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12337,
											"end": 12585,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12337,
											"end": 12585,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 12591,
											"end": 13010,
											"name": "tag",
											"source": 12,
											"value": "173"
										},
										{
											"begin": 12591,
											"end": 13010,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12757,
											"end": 12761,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12795,
											"end": 12797,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 12784,
											"end": 12793,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12780,
											"end": 12798,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12772,
											"end": 12798,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12772,
											"end": 12798,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12844,
											"end": 12853,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12838,
											"end": 12842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12830,
											"end": 12831,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12819,
											"end": 12828,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12815,
											"end": 12832,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12808,
											"end": 12855,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12872,
											"end": 13003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 12998,
											"end": 13002,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12872,
											"end": 13003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "366"
										},
										{
											"begin": 12872,
											"end": 13003,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12872,
											"end": 13003,
											"name": "tag",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 12872,
											"end": 13003,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12864,
											"end": 13003,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12864,
											"end": 13003,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12762,
											"end": 13010,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12762,
											"end": 13010,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12762,
											"end": 13010,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12762,
											"end": 13010,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13016,
											"end": 13435,
											"name": "tag",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 13016,
											"end": 13435,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13182,
											"end": 13186,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13220,
											"end": 13222,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13218,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13205,
											"end": 13223,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13197,
											"end": 13223,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13197,
											"end": 13223,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13269,
											"end": 13278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13263,
											"end": 13267,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13259,
											"end": 13279,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13255,
											"end": 13256,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13244,
											"end": 13253,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13240,
											"end": 13257,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13233,
											"end": 13280,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13297,
											"end": 13428,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 13423,
											"end": 13427,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13297,
											"end": 13428,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "371"
										},
										{
											"begin": 13297,
											"end": 13428,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13297,
											"end": 13428,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 13297,
											"end": 13428,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13289,
											"end": 13428,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13289,
											"end": 13428,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13187,
											"end": 13435,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13187,
											"end": 13435,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13187,
											"end": 13435,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13187,
											"end": 13435,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13441,
											"end": 13860,
											"name": "tag",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 13441,
											"end": 13860,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13611,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13645,
											"end": 13647,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13634,
											"end": 13643,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13630,
											"end": 13648,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13622,
											"end": 13648,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13622,
											"end": 13648,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13694,
											"end": 13703,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13688,
											"end": 13692,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13684,
											"end": 13704,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13680,
											"end": 13681,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13669,
											"end": 13678,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13665,
											"end": 13682,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13658,
											"end": 13705,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13722,
											"end": 13853,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 13848,
											"end": 13852,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13722,
											"end": 13853,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 13722,
											"end": 13853,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13722,
											"end": 13853,
											"name": "tag",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 13722,
											"end": 13853,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13714,
											"end": 13853,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13714,
											"end": 13853,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13612,
											"end": 13860,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13612,
											"end": 13860,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13612,
											"end": 13860,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13612,
											"end": 13860,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13866,
											"end": 14285,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 13866,
											"end": 14285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 14036,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14070,
											"end": 14072,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14059,
											"end": 14068,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14055,
											"end": 14073,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14047,
											"end": 14073,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14047,
											"end": 14073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14119,
											"end": 14128,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14113,
											"end": 14117,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14109,
											"end": 14129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14105,
											"end": 14106,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14094,
											"end": 14103,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14090,
											"end": 14107,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14083,
											"end": 14130,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14147,
											"end": 14278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 14273,
											"end": 14277,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14147,
											"end": 14278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 14147,
											"end": 14278,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14147,
											"end": 14278,
											"name": "tag",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 14147,
											"end": 14278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14139,
											"end": 14278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14139,
											"end": 14278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14037,
											"end": 14285,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14037,
											"end": 14285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14037,
											"end": 14285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14037,
											"end": 14285,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14291,
											"end": 14710,
											"name": "tag",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 14291,
											"end": 14710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14457,
											"end": 14461,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14495,
											"end": 14497,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14484,
											"end": 14493,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14480,
											"end": 14498,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14472,
											"end": 14498,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14472,
											"end": 14498,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14544,
											"end": 14553,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14538,
											"end": 14542,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14534,
											"end": 14554,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14530,
											"end": 14531,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14519,
											"end": 14528,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14515,
											"end": 14532,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14508,
											"end": 14555,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14572,
											"end": 14703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 14698,
											"end": 14702,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14572,
											"end": 14703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 14572,
											"end": 14703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14572,
											"end": 14703,
											"name": "tag",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 14572,
											"end": 14703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14564,
											"end": 14703,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14564,
											"end": 14703,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14462,
											"end": 14710,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14462,
											"end": 14710,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14462,
											"end": 14710,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14462,
											"end": 14710,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14716,
											"end": 15135,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 14716,
											"end": 15135,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14882,
											"end": 14886,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14920,
											"end": 14922,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14909,
											"end": 14918,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14905,
											"end": 14923,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14923,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14923,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14969,
											"end": 14978,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14963,
											"end": 14967,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14959,
											"end": 14979,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14955,
											"end": 14956,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14944,
											"end": 14953,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14940,
											"end": 14957,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14933,
											"end": 14980,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14997,
											"end": 15128,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 15123,
											"end": 15127,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14997,
											"end": 15128,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 14997,
											"end": 15128,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14997,
											"end": 15128,
											"name": "tag",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 14997,
											"end": 15128,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14989,
											"end": 15128,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14989,
											"end": 15128,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14887,
											"end": 15135,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14887,
											"end": 15135,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14887,
											"end": 15135,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14887,
											"end": 15135,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15141,
											"end": 15560,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 15141,
											"end": 15560,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15307,
											"end": 15311,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15345,
											"end": 15347,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15334,
											"end": 15343,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15330,
											"end": 15348,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15322,
											"end": 15348,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15322,
											"end": 15348,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15394,
											"end": 15403,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15388,
											"end": 15392,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15384,
											"end": 15404,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15380,
											"end": 15381,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15369,
											"end": 15378,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15365,
											"end": 15382,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15358,
											"end": 15405,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15422,
											"end": 15553,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 15548,
											"end": 15552,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15422,
											"end": 15553,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 15422,
											"end": 15553,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15422,
											"end": 15553,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 15422,
											"end": 15553,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15414,
											"end": 15553,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15414,
											"end": 15553,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15312,
											"end": 15560,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15312,
											"end": 15560,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15312,
											"end": 15560,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15312,
											"end": 15560,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15566,
											"end": 15788,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 15566,
											"end": 15788,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15659,
											"end": 15663,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15697,
											"end": 15699,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15686,
											"end": 15695,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15682,
											"end": 15700,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15674,
											"end": 15700,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15674,
											"end": 15700,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15710,
											"end": 15781,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 15778,
											"end": 15779,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15767,
											"end": 15776,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15763,
											"end": 15780,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15754,
											"end": 15760,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15710,
											"end": 15781,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 15710,
											"end": 15781,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15710,
											"end": 15781,
											"name": "tag",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 15710,
											"end": 15781,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15664,
											"end": 15788,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15664,
											"end": 15788,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15664,
											"end": 15788,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15664,
											"end": 15788,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15664,
											"end": 15788,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15794,
											"end": 15923,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 15794,
											"end": 15923,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15828,
											"end": 15834,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15855,
											"end": 15875,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 15855,
											"end": 15875,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 15855,
											"end": 15875,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15855,
											"end": 15875,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 15855,
											"end": 15875,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15845,
											"end": 15875,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15845,
											"end": 15875,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15884,
											"end": 15917,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 15912,
											"end": 15916,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15904,
											"end": 15910,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15884,
											"end": 15917,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 15884,
											"end": 15917,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15884,
											"end": 15917,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 15884,
											"end": 15917,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15835,
											"end": 15923,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15835,
											"end": 15923,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15835,
											"end": 15923,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15835,
											"end": 15923,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15929,
											"end": 16004,
											"name": "tag",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 15929,
											"end": 16004,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15962,
											"end": 15968,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15995,
											"end": 15997,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15989,
											"end": 15998,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15979,
											"end": 15998,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15979,
											"end": 15998,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15969,
											"end": 16004,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15969,
											"end": 16004,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16010,
											"end": 16317,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 16010,
											"end": 16317,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16071,
											"end": 16075,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16161,
											"end": 16179,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16153,
											"end": 16159,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16150,
											"end": 16180,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 16183,
											"end": 16201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 16183,
											"end": 16201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 16183,
											"end": 16201,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 16183,
											"end": 16201,
											"name": "tag",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 16183,
											"end": 16201,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "tag",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16221,
											"end": 16250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 16243,
											"end": 16249,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16221,
											"end": 16250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 16221,
											"end": 16250,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 16221,
											"end": 16250,
											"name": "tag",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 16221,
											"end": 16250,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16213,
											"end": 16250,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16213,
											"end": 16250,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16305,
											"end": 16309,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16299,
											"end": 16303,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16295,
											"end": 16310,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16287,
											"end": 16310,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16287,
											"end": 16310,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16076,
											"end": 16317,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16076,
											"end": 16317,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16076,
											"end": 16317,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16076,
											"end": 16317,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16323,
											"end": 16421,
											"name": "tag",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 16323,
											"end": 16421,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16374,
											"end": 16380,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16408,
											"end": 16413,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16402,
											"end": 16414,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16392,
											"end": 16414,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16392,
											"end": 16414,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16421,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16421,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16421,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16421,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16427,
											"end": 16526,
											"name": "tag",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 16427,
											"end": 16526,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16479,
											"end": 16485,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16513,
											"end": 16518,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16507,
											"end": 16519,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16497,
											"end": 16519,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16497,
											"end": 16519,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16486,
											"end": 16526,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16486,
											"end": 16526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16486,
											"end": 16526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16486,
											"end": 16526,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16532,
											"end": 16700,
											"name": "tag",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 16532,
											"end": 16700,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16615,
											"end": 16626,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16649,
											"end": 16655,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16644,
											"end": 16647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16637,
											"end": 16656,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16689,
											"end": 16693,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16684,
											"end": 16687,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16680,
											"end": 16694,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16665,
											"end": 16694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16665,
											"end": 16694,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16627,
											"end": 16700,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16627,
											"end": 16700,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16627,
											"end": 16700,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16627,
											"end": 16700,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16627,
											"end": 16700,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16706,
											"end": 16875,
											"name": "tag",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 16706,
											"end": 16875,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16790,
											"end": 16801,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16824,
											"end": 16830,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16819,
											"end": 16822,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16812,
											"end": 16831,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 16868,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16859,
											"end": 16862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16855,
											"end": 16869,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16840,
											"end": 16869,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16840,
											"end": 16869,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16802,
											"end": 16875,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16802,
											"end": 16875,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16802,
											"end": 16875,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16802,
											"end": 16875,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16802,
											"end": 16875,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 16881,
											"end": 17029,
											"name": "tag",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 16881,
											"end": 17029,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16983,
											"end": 16994,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17020,
											"end": 17023,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 17005,
											"end": 17023,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17005,
											"end": 17023,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16995,
											"end": 17029,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16995,
											"end": 17029,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16995,
											"end": 17029,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16995,
											"end": 17029,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16995,
											"end": 17029,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17035,
											"end": 17340,
											"name": "tag",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 17035,
											"end": 17340,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17075,
											"end": 17078,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17094,
											"end": 17114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 17112,
											"end": 17113,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17094,
											"end": 17114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 17094,
											"end": 17114,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17094,
											"end": 17114,
											"name": "tag",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 17094,
											"end": 17114,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17089,
											"end": 17114,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17089,
											"end": 17114,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17128,
											"end": 17148,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 17146,
											"end": 17147,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 17128,
											"end": 17148,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 17128,
											"end": 17148,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17128,
											"end": 17148,
											"name": "tag",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 17128,
											"end": 17148,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17123,
											"end": 17148,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 17123,
											"end": 17148,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17282,
											"end": 17283,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17214,
											"end": 17280,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17210,
											"end": 17284,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 17207,
											"end": 17208,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17204,
											"end": 17285,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 17201,
											"end": 17203,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 17201,
											"end": 17203,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 17201,
											"end": 17203,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 17288,
											"end": 17306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 17288,
											"end": 17306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 17288,
											"end": 17306,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17288,
											"end": 17306,
											"name": "tag",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 17288,
											"end": 17306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17201,
											"end": 17203,
											"name": "tag",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 17201,
											"end": 17203,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17332,
											"end": 17333,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17329,
											"end": 17330,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17325,
											"end": 17334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 17318,
											"end": 17334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17318,
											"end": 17334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17079,
											"end": 17340,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 17079,
											"end": 17340,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17079,
											"end": 17340,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17079,
											"end": 17340,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17079,
											"end": 17340,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17346,
											"end": 17537,
											"name": "tag",
											"source": 12,
											"value": "213"
										},
										{
											"begin": 17346,
											"end": 17537,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17386,
											"end": 17390,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17406,
											"end": 17426,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 17424,
											"end": 17425,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17406,
											"end": 17426,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 17406,
											"end": 17426,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17406,
											"end": 17426,
											"name": "tag",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 17406,
											"end": 17426,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17401,
											"end": 17426,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17401,
											"end": 17426,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17440,
											"end": 17460,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 17458,
											"end": 17459,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 17440,
											"end": 17460,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 17440,
											"end": 17460,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17440,
											"end": 17460,
											"name": "tag",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 17440,
											"end": 17460,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17435,
											"end": 17460,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 17435,
											"end": 17460,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17479,
											"end": 17480,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17476,
											"end": 17477,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17473,
											"end": 17481,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "464"
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 17484,
											"end": 17502,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 17484,
											"end": 17502,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 17484,
											"end": 17502,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17484,
											"end": 17502,
											"name": "tag",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 17484,
											"end": 17502,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "tag",
											"source": 12,
											"value": "464"
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17529,
											"end": 17530,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17526,
											"end": 17527,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17522,
											"end": 17531,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 17514,
											"end": 17531,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17514,
											"end": 17531,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17391,
											"end": 17537,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 17391,
											"end": 17537,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17391,
											"end": 17537,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17391,
											"end": 17537,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17391,
											"end": 17537,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17543,
											"end": 17639,
											"name": "tag",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 17543,
											"end": 17639,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17580,
											"end": 17587,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17609,
											"end": 17633,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 17627,
											"end": 17632,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17609,
											"end": 17633,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 17609,
											"end": 17633,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 17609,
											"end": 17633,
											"name": "tag",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 17609,
											"end": 17633,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17598,
											"end": 17633,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17598,
											"end": 17633,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17588,
											"end": 17639,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17588,
											"end": 17639,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17588,
											"end": 17639,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17588,
											"end": 17639,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17645,
											"end": 17735,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 17645,
											"end": 17735,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17679,
											"end": 17686,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17722,
											"end": 17727,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 17715,
											"end": 17728,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 17708,
											"end": 17729,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 17697,
											"end": 17729,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17697,
											"end": 17729,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17687,
											"end": 17735,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17687,
											"end": 17735,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17687,
											"end": 17735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17687,
											"end": 17735,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17741,
											"end": 17890,
											"name": "tag",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 17741,
											"end": 17890,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17777,
											"end": 17784,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17817,
											"end": 17883,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 17810,
											"end": 17815,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17806,
											"end": 17884,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 17795,
											"end": 17884,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17795,
											"end": 17884,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17785,
											"end": 17890,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17785,
											"end": 17890,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17785,
											"end": 17890,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17785,
											"end": 17890,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 17896,
											"end": 18022,
											"name": "tag",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 17896,
											"end": 18022,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17933,
											"end": 17940,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17973,
											"end": 18015,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17966,
											"end": 17971,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17962,
											"end": 18016,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 17951,
											"end": 18016,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17951,
											"end": 18016,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17941,
											"end": 18022,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17941,
											"end": 18022,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17941,
											"end": 18022,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17941,
											"end": 18022,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18028,
											"end": 18105,
											"name": "tag",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 18028,
											"end": 18105,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18065,
											"end": 18072,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 18094,
											"end": 18099,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18083,
											"end": 18099,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 18083,
											"end": 18099,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18073,
											"end": 18105,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 18073,
											"end": 18105,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 18073,
											"end": 18105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18073,
											"end": 18105,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18111,
											"end": 18265,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 18111,
											"end": 18265,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18195,
											"end": 18201,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18190,
											"end": 18193,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18185,
											"end": 18188,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 18172,
											"end": 18202,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 18257,
											"end": 18258,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 18248,
											"end": 18254,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 18243,
											"end": 18246,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 18239,
											"end": 18255,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 18232,
											"end": 18259,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 18162,
											"end": 18265,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18162,
											"end": 18265,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18162,
											"end": 18265,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18162,
											"end": 18265,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18271,
											"end": 18578,
											"name": "tag",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 18271,
											"end": 18578,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18339,
											"end": 18340,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "tag",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18363,
											"end": 18369,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 18360,
											"end": 18361,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18357,
											"end": 18370,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 18448,
											"end": 18449,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 18443,
											"end": 18446,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18439,
											"end": 18450,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 18433,
											"end": 18451,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 18429,
											"end": 18430,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18424,
											"end": 18427,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 18420,
											"end": 18431,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 18413,
											"end": 18452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 18385,
											"end": 18387,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 18382,
											"end": 18383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18378,
											"end": 18388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 18373,
											"end": 18388,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 18373,
											"end": 18388,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "tag",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 18349,
											"end": 18462,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18480,
											"end": 18486,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 18477,
											"end": 18478,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18474,
											"end": 18487,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 18471,
											"end": 18473,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 18471,
											"end": 18473,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 18471,
											"end": 18473,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 18560,
											"end": 18561,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 18551,
											"end": 18557,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 18546,
											"end": 18549,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 18542,
											"end": 18558,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 18535,
											"end": 18562,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 18471,
											"end": 18473,
											"name": "tag",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 18471,
											"end": 18473,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18320,
											"end": 18578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18320,
											"end": 18578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18320,
											"end": 18578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18320,
											"end": 18578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18320,
											"end": 18578,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18584,
											"end": 18904,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 18584,
											"end": 18904,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18628,
											"end": 18634,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 18665,
											"end": 18666,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 18659,
											"end": 18663,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18655,
											"end": 18667,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 18645,
											"end": 18667,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 18645,
											"end": 18667,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18712,
											"end": 18713,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 18706,
											"end": 18710,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18702,
											"end": 18714,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 18733,
											"end": 18751,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 18723,
											"end": 18725,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "481"
										},
										{
											"begin": 18723,
											"end": 18725,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 18789,
											"end": 18793,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 18781,
											"end": 18787,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18777,
											"end": 18794,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 18767,
											"end": 18794,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 18767,
											"end": 18794,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18723,
											"end": 18725,
											"name": "tag",
											"source": 12,
											"value": "481"
										},
										{
											"begin": 18723,
											"end": 18725,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18851,
											"end": 18853,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 18843,
											"end": 18849,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18840,
											"end": 18854,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 18820,
											"end": 18838,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18817,
											"end": 18855,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 18870,
											"end": 18888,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "483"
										},
										{
											"begin": 18870,
											"end": 18888,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 18870,
											"end": 18888,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 18870,
											"end": 18888,
											"name": "tag",
											"source": 12,
											"value": "483"
										},
										{
											"begin": 18870,
											"end": 18888,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "tag",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18635,
											"end": 18904,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18635,
											"end": 18904,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 18635,
											"end": 18904,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 18635,
											"end": 18904,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18635,
											"end": 18904,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18910,
											"end": 19191,
											"name": "tag",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 18910,
											"end": 19191,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18993,
											"end": 19020,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 19015,
											"end": 19019,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 18993,
											"end": 19020,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 18993,
											"end": 19020,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 18993,
											"end": 19020,
											"name": "tag",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 18993,
											"end": 19020,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 18985,
											"end": 18991,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 18981,
											"end": 19021,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19123,
											"end": 19129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19111,
											"end": 19121,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19108,
											"end": 19130,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 19087,
											"end": 19105,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19075,
											"end": 19085,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19072,
											"end": 19106,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 19069,
											"end": 19131,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 19066,
											"end": 19068,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19066,
											"end": 19068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "487"
										},
										{
											"begin": 19066,
											"end": 19068,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19134,
											"end": 19152,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "488"
										},
										{
											"begin": 19134,
											"end": 19152,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 19134,
											"end": 19152,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 19134,
											"end": 19152,
											"name": "tag",
											"source": 12,
											"value": "488"
										},
										{
											"begin": 19134,
											"end": 19152,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19066,
											"end": 19068,
											"name": "tag",
											"source": 12,
											"value": "487"
										},
										{
											"begin": 19066,
											"end": 19068,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19174,
											"end": 19184,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19170,
											"end": 19172,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19163,
											"end": 19185,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 18953,
											"end": 19191,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18953,
											"end": 19191,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18953,
											"end": 19191,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18953,
											"end": 19191,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 19197,
											"end": 19377,
											"name": "tag",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 19197,
											"end": 19377,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19245,
											"end": 19322,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19242,
											"end": 19243,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19235,
											"end": 19323,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19342,
											"end": 19346,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 19339,
											"end": 19340,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19332,
											"end": 19347,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19366,
											"end": 19370,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 19363,
											"end": 19364,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19356,
											"end": 19371,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19383,
											"end": 19563,
											"name": "tag",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 19383,
											"end": 19563,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19431,
											"end": 19508,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19428,
											"end": 19429,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19421,
											"end": 19509,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19528,
											"end": 19532,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 19525,
											"end": 19526,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19518,
											"end": 19533,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19552,
											"end": 19556,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 19549,
											"end": 19550,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19542,
											"end": 19557,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19569,
											"end": 19749,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 19569,
											"end": 19749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19617,
											"end": 19694,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19614,
											"end": 19615,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19607,
											"end": 19695,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19714,
											"end": 19718,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 19711,
											"end": 19712,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19704,
											"end": 19719,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19738,
											"end": 19742,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 19735,
											"end": 19736,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19728,
											"end": 19743,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19755,
											"end": 19857,
											"name": "tag",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 19755,
											"end": 19857,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19796,
											"end": 19802,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19847,
											"end": 19849,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19843,
											"end": 19850,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 19838,
											"end": 19840,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19831,
											"end": 19836,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 19827,
											"end": 19841,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19823,
											"end": 19851,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19851,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19851,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19803,
											"end": 19857,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19803,
											"end": 19857,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19803,
											"end": 19857,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19803,
											"end": 19857,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 19863,
											"end": 20095,
											"name": "tag",
											"source": 12,
											"value": "360"
										},
										{
											"begin": 19863,
											"end": 20095,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20003,
											"end": 20037,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65"
										},
										{
											"begin": 19999,
											"end": 20000,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19991,
											"end": 19997,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19987,
											"end": 20001,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19980,
											"end": 20038,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20072,
											"end": 20087,
											"name": "PUSH",
											"source": 12,
											"value": "72206F7220617070726F76656400000000000000000000000000000000000000"
										},
										{
											"begin": 20067,
											"end": 20069,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20059,
											"end": 20065,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20055,
											"end": 20070,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20048,
											"end": 20088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19969,
											"end": 20095,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19969,
											"end": 20095,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 20101,
											"end": 20338,
											"name": "tag",
											"source": 12,
											"value": "365"
										},
										{
											"begin": 20101,
											"end": 20338,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20241,
											"end": 20275,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A207472616E7366657220746F206E6F6E204552433732315265"
										},
										{
											"begin": 20237,
											"end": 20238,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20229,
											"end": 20235,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20225,
											"end": 20239,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20218,
											"end": 20276,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20310,
											"end": 20330,
											"name": "PUSH",
											"source": 12,
											"value": "63656976657220696D706C656D656E7465720000000000000000000000000000"
										},
										{
											"begin": 20305,
											"end": 20307,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20297,
											"end": 20303,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20293,
											"end": 20308,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20286,
											"end": 20331,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20207,
											"end": 20338,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20207,
											"end": 20338,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 20344,
											"end": 20568,
											"name": "tag",
											"source": 12,
											"value": "370"
										},
										{
											"begin": 20344,
											"end": 20568,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20484,
											"end": 20518,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A207472616E736665722066726F6D20696E636F727265637420"
										},
										{
											"begin": 20480,
											"end": 20481,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20472,
											"end": 20478,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20468,
											"end": 20482,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20461,
											"end": 20519,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20553,
											"end": 20560,
											"name": "PUSH",
											"source": 12,
											"value": "6F776E6572000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20548,
											"end": 20550,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20540,
											"end": 20546,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20536,
											"end": 20551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20529,
											"end": 20561,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20450,
											"end": 20568,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20450,
											"end": 20568,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 20574,
											"end": 20797,
											"name": "tag",
											"source": 12,
											"value": "375"
										},
										{
											"begin": 20574,
											"end": 20797,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20714,
											"end": 20748,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A207472616E7366657220746F20746865207A65726F20616464"
										},
										{
											"begin": 20710,
											"end": 20711,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20702,
											"end": 20708,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20698,
											"end": 20712,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20691,
											"end": 20749,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20783,
											"end": 20789,
											"name": "PUSH",
											"source": 12,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20778,
											"end": 20780,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20770,
											"end": 20776,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20766,
											"end": 20781,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20759,
											"end": 20790,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20680,
											"end": 20797,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20680,
											"end": 20797,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 20803,
											"end": 20978,
											"name": "tag",
											"source": 12,
											"value": "380"
										},
										{
											"begin": 20803,
											"end": 20978,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20943,
											"end": 20970,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A20617070726F766520746F2063616C6C657200000000000000"
										},
										{
											"begin": 20939,
											"end": 20940,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20931,
											"end": 20937,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 20927,
											"end": 20941,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20920,
											"end": 20971,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20909,
											"end": 20978,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20909,
											"end": 20978,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 20984,
											"end": 21212,
											"name": "tag",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 20984,
											"end": 21212,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21124,
											"end": 21158,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A2061646472657373207A65726F206973206E6F742061207661"
										},
										{
											"begin": 21120,
											"end": 21121,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 21112,
											"end": 21118,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21108,
											"end": 21122,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21101,
											"end": 21159,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21193,
											"end": 21204,
											"name": "PUSH",
											"source": 12,
											"value": "6C6964206F776E65720000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21188,
											"end": 21190,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 21180,
											"end": 21186,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21176,
											"end": 21191,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21169,
											"end": 21205,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21090,
											"end": 21212,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 21090,
											"end": 21212,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 21218,
											"end": 21392,
											"name": "tag",
											"source": 12,
											"value": "390"
										},
										{
											"begin": 21218,
											"end": 21392,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21358,
											"end": 21384,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A20696E76616C696420746F6B656E2049440000000000000000"
										},
										{
											"begin": 21354,
											"end": 21355,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 21346,
											"end": 21352,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21342,
											"end": 21356,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21335,
											"end": 21385,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21324,
											"end": 21392,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 21324,
											"end": 21392,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 21398,
											"end": 21618,
											"name": "tag",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 21398,
											"end": 21618,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21538,
											"end": 21572,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A20617070726F76616C20746F2063757272656E74206F776E65"
										},
										{
											"begin": 21534,
											"end": 21535,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 21526,
											"end": 21532,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21522,
											"end": 21536,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21515,
											"end": 21573,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21607,
											"end": 21610,
											"name": "PUSH",
											"source": 12,
											"value": "7200000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21602,
											"end": 21604,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 21594,
											"end": 21600,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21590,
											"end": 21605,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21583,
											"end": 21611,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21504,
											"end": 21618,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 21504,
											"end": 21618,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 21624,
											"end": 21872,
											"name": "tag",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 21624,
											"end": 21872,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21764,
											"end": 21798,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F"
										},
										{
											"begin": 21760,
											"end": 21761,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 21752,
											"end": 21758,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21748,
											"end": 21762,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21741,
											"end": 21799,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21833,
											"end": 21864,
											"name": "PUSH",
											"source": 12,
											"value": "6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000"
										},
										{
											"begin": 21828,
											"end": 21830,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 21820,
											"end": 21826,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 21816,
											"end": 21831,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 21809,
											"end": 21865,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 21730,
											"end": 21872,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 21730,
											"end": 21872,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 21878,
											"end": 22000,
											"name": "tag",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 21878,
											"end": 22000,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21951,
											"end": 21975,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 21969,
											"end": 21974,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 21951,
											"end": 21975,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 21951,
											"end": 21975,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 21951,
											"end": 21975,
											"name": "tag",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 21951,
											"end": 21975,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21944,
											"end": 21949,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 21941,
											"end": 21976,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 21931,
											"end": 21933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "504"
										},
										{
											"begin": 21931,
											"end": 21933,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 21990,
											"end": 21991,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 21987,
											"end": 21988,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 21980,
											"end": 21992,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 21931,
											"end": 21933,
											"name": "tag",
											"source": 12,
											"value": "504"
										},
										{
											"begin": 21931,
											"end": 21933,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 21921,
											"end": 22000,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 21921,
											"end": 22000,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 22006,
											"end": 22122,
											"name": "tag",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 22006,
											"end": 22122,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22076,
											"end": 22097,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "506"
										},
										{
											"begin": 22091,
											"end": 22096,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22076,
											"end": 22097,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 22076,
											"end": 22097,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 22076,
											"end": 22097,
											"name": "tag",
											"source": 12,
											"value": "506"
										},
										{
											"begin": 22076,
											"end": 22097,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22069,
											"end": 22074,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22066,
											"end": 22098,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 22056,
											"end": 22058,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 22056,
											"end": 22058,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 22112,
											"end": 22113,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 22109,
											"end": 22110,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 22102,
											"end": 22114,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 22056,
											"end": 22058,
											"name": "tag",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 22056,
											"end": 22058,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22046,
											"end": 22122,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 22046,
											"end": 22122,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 22128,
											"end": 22248,
											"name": "tag",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 22128,
											"end": 22248,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22200,
											"end": 22223,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 22217,
											"end": 22222,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22200,
											"end": 22223,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 22200,
											"end": 22223,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 22200,
											"end": 22223,
											"name": "tag",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 22200,
											"end": 22223,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22193,
											"end": 22198,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22190,
											"end": 22224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 22180,
											"end": 22182,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "510"
										},
										{
											"begin": 22180,
											"end": 22182,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 22238,
											"end": 22239,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 22235,
											"end": 22236,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 22228,
											"end": 22240,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 22180,
											"end": 22182,
											"name": "tag",
											"source": 12,
											"value": "510"
										},
										{
											"begin": 22180,
											"end": 22182,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22170,
											"end": 22248,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 22170,
											"end": 22248,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 22254,
											"end": 22376,
											"name": "tag",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 22254,
											"end": 22376,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22327,
											"end": 22351,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 22345,
											"end": 22350,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22327,
											"end": 22351,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 22327,
											"end": 22351,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 22327,
											"end": 22351,
											"name": "tag",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 22327,
											"end": 22351,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22320,
											"end": 22325,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 22317,
											"end": 22352,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 22307,
											"end": 22309,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 22307,
											"end": 22309,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 22366,
											"end": 22367,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 22363,
											"end": 22364,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 22356,
											"end": 22368,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 22307,
											"end": 22309,
											"name": "tag",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 22307,
											"end": 22309,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 22297,
											"end": 22376,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 22297,
											"end": 22376,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ea15ef7c8980240ccd46df13809d163f749bc0a01d8bced1875660d4872da1c\",\"dweb:/ipfs/QmbDfAT9VeCSG4cnPd6tjDMp8ED85dLHbWyMyv7wbmL4CH\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\".deps/npm/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\".deps/npm/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 25,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 31,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_owners",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 35,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 39,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 45,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
				"ERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenByIndex(uint256)": {
								"details": "See {IERC721Enumerable-tokenByIndex}."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "See {IERC721Enumerable-totalSupply}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ea15ef7c8980240ccd46df13809d163f749bc0a01d8bced1875660d4872da1c\",\"dweb:/ipfs/QmbDfAT9VeCSG4cnPd6tjDMp8ED85dLHbWyMyv7wbmL4CH\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63a5e0bb5a7d182e0d0eef87033f78115eab791de3626a929bc98c157087880a\",\"dweb:/ipfs/QmetkXAu2CJKS4qrZtEQPU8okAPwUwa6HL4XYwk8vrYMk8\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\".deps/npm/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\".deps/npm/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 25,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 31,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_owners",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 35,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 39,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 45,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 1093,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_ownedTokens",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							},
							{
								"astId": 1097,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_ownedTokensIndex",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 1100,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_allTokens",
								"offset": 0,
								"slot": "8",
								"type": "t_array(t_uint256)dyn_storage"
							},
							{
								"astId": 1104,
								"contract": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
								"label": "_allTokensIndex",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_uint256,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220633c52c0583631c4fb95e5911e73ae0bc0188bc1985ae4e98e90fe4495b2138464736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220633c52c0583631c4fb95e5911e73ae0bc0188bc1985ae4e98e90fe4495b2138464736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x3C52C058 CALLDATASIZE BALANCE 0xC4 0xFB SWAP6 0xE5 SWAP2 0x1E PUSH20 0xAE0BC0188BC1985AE4E98E90FE4495B213846473 PUSH16 0x6C634300080400330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220633c52c0583631c4fb95e5911e73ae0bc0188bc1985ae4e98e90fe4495b2138464736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x3C52C058 CALLDATASIZE BALANCE 0xC4 0xFB SWAP6 0xE5 SWAP2 0x1E PUSH20 0xAE0BC0188BC1985AE4E98E90FE4495B213846473 PUSH16 0x6C634300080400330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220633c52c0583631c4fb95e5911e73ae0bc0188bc1985ae4e98e90fe4495b2138464736f6c63430008040033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c06030d93a733c4df299b9f7502748482b4c3204724bc1ad491cd7dc7bb0652a64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c06030d93a733c4df299b9f7502748482b4c3204724bc1ad491cd7dc7bb0652a64736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 PUSH1 0x30 0xD9 GASPRICE PUSH20 0x3C4DF299B9F7502748482B4C3204724BC1AD491C 0xD7 0xDC PUSH28 0xB0652A64736F6C634300080400330000000000000000000000000000 ",
							"sourceMap": "188:2065:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c06030d93a733c4df299b9f7502748482b4c3204724bc1ad491cd7dc7bb0652a64736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 PUSH1 0x30 0xD9 GASPRICE PUSH20 0x3C4DF299B9F7502748482B4C3204724BC1AD491C 0xD7 0xDC PUSH28 0xB0652A64736F6C634300080400330000000000000000000000000000 ",
							"sourceMap": "188:2065:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c06030d93a733c4df299b9f7502748482b4c3204724bc1ad491cd7dc7bb0652a64736f6c63430008040033",
									".code": [
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220eb8c0d3a551bf57ef87e779d6d46fbda878aa8aa17213080dca21c272fc5cedb64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eb8c0d3a551bf57ef87e779d6d46fbda878aa8aa17213080dca21c272fc5cedb64736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB DUP13 0xD GASPRICE SSTORE SHL CREATE2 PUSH31 0xF87E779D6D46FBDA878AA8AA17213080DCA21C272FC5CEDB64736F6C634300 ADDMOD DIV STOP CALLER ",
							"sourceMap": "202:12302:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eb8c0d3a551bf57ef87e779d6d46fbda878aa8aa17213080dca21c272fc5cedb64736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB DUP13 0xD GASPRICE SSTORE SHL CREATE2 PUSH31 0xF87E779D6D46FBDA878AA8AA17213080DCA21C272FC5CEDB64736F6C634300 ADDMOD DIV STOP CALLER ",
							"sourceMap": "202:12302:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220eb8c0d3a551bf57ef87e779d6d46fbda878aa8aa17213080dca21c272fc5cedb64736f6c63430008040033",
									".code": [
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> .deps/npm/@openzeppelin/contracts/utils/Address.sol:200:30:\n    |\n200 |     ) internal view returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 7658,
					"file": ".deps/npm/@openzeppelin/contracts/utils/Address.sol",
					"start": 7646
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> .deps/npm/@openzeppelin/contracts/utils/Address.sol:223:30:\n    |\n223 |     ) internal pure returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 8473,
					"file": ".deps/npm/@openzeppelin/contracts/utils/Address.sol",
					"start": 8461
				},
				"type": "Warning"
			}
		],
		"sources": {
			".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol",
					"exportedSymbols": {
						"Address": [
							1820
						],
						"Context": [
							1842
						],
						"ERC165": [
							2041
						],
						"ERC721": [
							944
						],
						"IERC165": [
							2053
						],
						"IERC721": [
							1060
						],
						"IERC721Metadata": [
							1490
						],
						"IERC721Receiver": [
							1078
						],
						"Math": [
							2918
						],
						"Strings": [
							2017
						]
					},
					"id": 945,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:0"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 1061,
							"src": "132:23:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "./IERC721Receiver.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 1079,
							"src": "156:31:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "./extensions/IERC721Metadata.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 1491,
							"src": "188:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 1821,
							"src": "231:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 1843,
							"src": "265:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Strings.sol",
							"file": "../../utils/Strings.sol",
							"id": 7,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 2018,
							"src": "299:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../../utils/introspection/ERC165.sol",
							"id": 8,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 945,
							"sourceUnit": 2042,
							"src": "333:46:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 10,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1842,
										"src": "647:7:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "647:7:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2041,
										"src": "656:6:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "656:6:0"
								},
								{
									"baseName": {
										"id": 14,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1060,
										"src": "664:7:0"
									},
									"id": 15,
									"nodeType": "InheritanceSpecifier",
									"src": "664:7:0"
								},
								{
									"baseName": {
										"id": 16,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1490,
										"src": "673:15:0"
									},
									"id": 17,
									"nodeType": "InheritanceSpecifier",
									"src": "673:15:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 9,
								"nodeType": "StructuredDocumentation",
								"src": "381:246:0",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
							},
							"fullyImplemented": true,
							"id": 944,
							"linearizedBaseContracts": [
								944,
								1490,
								1060,
								2041,
								2053,
								1842
							],
							"name": "ERC721",
							"nameLocation": "637:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 20,
									"libraryName": {
										"id": 18,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1820,
										"src": "701:7:0"
									},
									"nodeType": "UsingForDirective",
									"src": "695:26:0",
									"typeName": {
										"id": 19,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "713:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 23,
									"libraryName": {
										"id": 21,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2017,
										"src": "732:7:0"
									},
									"nodeType": "UsingForDirective",
									"src": "726:26:0",
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "744:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "791:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "776:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "776:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "838:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "823:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "823:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 31,
									"mutability": "mutable",
									"name": "_owners",
									"nameLocation": "934:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "898:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 30,
										"keyType": {
											"id": 28,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "906:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "898:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 29,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "917:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 35,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1028:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "992:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 34,
										"keyType": {
											"id": 32,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1000:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "992:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 33,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1011:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 39,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1129:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "1093:51:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 38,
										"keyType": {
											"id": 36,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1101:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1093:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 37,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1112:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 45,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1252:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 944,
									"src": "1199:71:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 44,
										"keyType": {
											"id": 40,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1207:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1199:44:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 43,
											"keyType": {
												"id": 41,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1226:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1218:24:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 42,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1237:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1446:57:0",
										"statements": [
											{
												"expression": {
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 53,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "1456:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 54,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "1464:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1456:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "1456:13:0"
											},
											{
												"expression": {
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 57,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1479:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 58,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "1489:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1479:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1479:17:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1277:108:0",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 62,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1416:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1402:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 47,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1402:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1437:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1423:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 49,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1423:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1401:44:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1446:0:0"
									},
									"scope": 944,
									"src": "1390:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2040,
										2052
									],
									"body": {
										"id": 92,
										"nodeType": "Block",
										"src": "1678:192:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 73,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1707:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 75,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1060,
																			"src": "1727:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1060_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1060_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 74,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1722:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 76,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1722:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1060",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1722:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1707:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 79,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1763:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 81,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1490,
																			"src": "1783:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1490_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1490_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 80,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1778:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 82,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1778:21:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1490",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 83,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1778:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1763:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "1707:104:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 88,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1851:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 86,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "1827:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721_$944_$",
																	"typeString": "type(contract super ERC721)"
																}
															},
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2040,
															"src": "1827:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 89,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1827:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1707:156:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 72,
												"id": 91,
												"nodeType": "Return",
												"src": "1688:175:0"
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1509:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 93,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1579:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 69,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 67,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2041,
												"src": "1646:6:0"
											},
											{
												"id": 68,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2053,
												"src": "1654:7:0"
											}
										],
										"src": "1637:25:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1604:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "1597:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 64,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1597:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1596:20:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "1672:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 70,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1672:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1671:6:0"
									},
									"scope": 944,
									"src": "1570:300:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										985
									],
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2010:123:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 103,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "2028:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2045:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2037:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 104,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2037:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 107,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2037:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2028:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572",
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2049:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															},
															"value": "ERC721: address zero is not a valid owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															}
														],
														"id": 102,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2020:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2020:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 111,
												"nodeType": "ExpressionStatement",
												"src": "2020:73:0"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 112,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "2110:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 114,
													"indexExpression": {
														"id": 113,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 96,
														"src": "2120:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2110:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 101,
												"id": 115,
												"nodeType": "Return",
												"src": "2103:23:0"
											}
										]
									},
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "1876:48:0",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "1938:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 98,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1983:8:0"
									},
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1956:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "1948:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1947:15:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "2001:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2000:9:0"
									},
									"scope": 944,
									"src": "1929:204:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										993
									],
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "2271:138:0",
										"statements": [
											{
												"assignments": [
													127
												],
												"declarations": [
													{
														"constant": false,
														"id": 127,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "2289:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 144,
														"src": "2281:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 126,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2281:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 131,
												"initialValue": {
													"arguments": [
														{
															"id": 129,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 120,
															"src": "2306:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 128,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "2297:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2297:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2281:33:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 133,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "2332:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2349:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2341:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 134,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2341:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 137,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2341:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2332:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2353:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2324:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2324:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2324:56:0"
											},
											{
												"expression": {
													"id": 142,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 127,
													"src": "2397:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 125,
												"id": 143,
												"nodeType": "Return",
												"src": "2390:12:0"
											}
										]
									},
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2139:46:0",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "2199:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 122,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2244:8:0"
									},
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2215:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "2207:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2207:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2206:17:0"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "2262:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2262:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:9:0"
									},
									"scope": 944,
									"src": "2190:219:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1475
									],
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "2540:29:0",
										"statements": [
											{
												"expression": {
													"id": 152,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "2557:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 151,
												"id": 153,
												"nodeType": "Return",
												"src": "2550:12:0"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "2415:51:0",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2480:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2507:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2484:2:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2525:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 149,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:15:0"
									},
									"scope": 944,
									"src": "2471:98:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1481
									],
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2704:31:0",
										"statements": [
											{
												"expression": {
													"id": 162,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 161,
												"id": 163,
												"nodeType": "Return",
												"src": "2714:14:0"
											}
										]
									},
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "2575:53:0",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2642:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 158,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2671:8:0"
									},
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2648:2:0"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "2689:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2689:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2688:15:0"
									},
									"scope": 944,
									"src": "2633:102:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1489
									],
									"body": {
										"id": 203,
										"nodeType": "Block",
										"src": "2889:188:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 175,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 168,
															"src": "2914:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 174,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "2899:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2899:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "2899:23:0"
											},
											{
												"assignments": [
													179
												],
												"declarations": [
													{
														"constant": false,
														"id": 179,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "2947:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 203,
														"src": "2933:21:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 178,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2933:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 182,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 180,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "2957:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2957:10:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2933:34:0"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 189,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 185,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "2990:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2984:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 183,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2984:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2984:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2984:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3008:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2984:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 200,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3068:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2984:86:0",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 194,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "3036:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 195,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 168,
																				"src": "3045:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1900,
																			"src": "3045:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3045:18:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 192,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3019:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3019:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3019:45:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3012:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 190,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "3012:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 199,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3012:53:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 173,
												"id": 202,
												"nodeType": "Return",
												"src": "2977:93:0"
											}
										]
									},
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "2741:55:0",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 204,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "2810:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 170,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2856:8:0"
									},
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2827:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2819:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2819:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2818:17:0"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2874:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 171,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2874:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2873:15:0"
									},
									"scope": 944,
									"src": "2801:276:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "3385:26:0",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3402:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 209,
												"id": 211,
												"nodeType": "Return",
												"src": "3395:9:0"
											}
										]
									},
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "3083:231:0",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "3328:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3336:2:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "3370:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 207,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3370:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:15:0"
									},
									"scope": 944,
									"src": "3319:92:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1033
									],
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "3538:336:0",
										"statements": [
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3556:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 255,
														"src": "3548:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3548:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 228,
												"initialValue": {
													"arguments": [
														{
															"id": 226,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3579:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 224,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "3564:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 225,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "3564:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3564:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3548:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 230,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 216,
																"src": "3605:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 231,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 223,
																"src": "3611:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3605:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3618:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															},
															"value": "ERC721: approval to current owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															}
														],
														"id": 229,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3597:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3597:57:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "3597:57:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 237,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1832,
																		"src": "3686:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3686:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 239,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "3702:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3686:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 242,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 223,
																		"src": "3728:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 243,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1832,
																			"src": "3735:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 244,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3735:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 241,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 309,
																	"src": "3711:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3711:37:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3686:62:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3762:63:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															},
															"value": "ERC721: approve caller is not token owner or approved for all"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															}
														],
														"id": 236,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3665:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3665:170:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "3665:170:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3855:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 252,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3859:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 250,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "3846:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3846:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "3846:21:0"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "3417:46:0",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3477:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 220,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3529:8:0"
									},
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3493:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "3485:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3485:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3505:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "3497:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3484:29:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3538:0:0"
									},
									"scope": 944,
									"src": "3468:406:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1049
									],
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "4020:82:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "4045:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 265,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "4030:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4030:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 268,
												"nodeType": "ExpressionStatement",
												"src": "4030:23:0"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 269,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 39,
														"src": "4071:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 271,
													"indexExpression": {
														"id": 270,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "4087:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4071:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 264,
												"id": 272,
												"nodeType": "Return",
												"src": "4064:31:0"
											}
										]
									},
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "3880:50:0",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "3944:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 261,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3993:8:0"
									},
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3964:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "3956:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3956:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3955:17:0"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4011:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4011:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4010:9:0"
									},
									"scope": 944,
									"src": "3935:167:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1041
									],
									"body": {
										"id": 290,
										"nodeType": "Block",
										"src": "4253:69:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 284,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1832,
																"src": "4282:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4282:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 286,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 277,
															"src": "4296:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 287,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "4306:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 283,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "4263:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4263:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 289,
												"nodeType": "ExpressionStatement",
												"src": "4263:52:0"
											}
										]
									},
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4108:56:0",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4178:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 281,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4244:8:0"
									},
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4204:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "4196:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4196:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4219:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "4214:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 278,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4214:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4195:33:0"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4253:0:0"
									},
									"scope": 944,
									"src": "4169:153:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1059
									],
									"body": {
										"id": 308,
										"nodeType": "Block",
										"src": "4491:59:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 302,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "4508:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 304,
														"indexExpression": {
															"id": 303,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "4527:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4508:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 306,
													"indexExpression": {
														"id": 305,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "4534:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4508:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 301,
												"id": 307,
												"nodeType": "Return",
												"src": "4501:42:0"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "4328:55:0",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4397:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 298,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4467:8:0"
									},
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4422:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4414:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4414:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4437:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4429:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4429:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4413:33:0"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4485:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 299,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4485:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4484:6:0"
									},
									"scope": 944,
									"src": "4388:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1025
									],
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "4731:207:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 322,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1832,
																		"src": "4820:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4820:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 324,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "4834:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 321,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "4801:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 325,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4801:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4844:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															},
															"value": "ERC721: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															}
														],
														"id": 320,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4793:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4793:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 328,
												"nodeType": "ExpressionStatement",
												"src": "4793:99:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 330,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "4913:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "4919:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 332,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "4923:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 329,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "4903:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4903:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "4903:28:0"
											}
										]
									},
									"documentation": {
										"id": 310,
										"nodeType": "StructuredDocumentation",
										"src": "4556:51:0",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4621:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 318,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4722:8:0"
									},
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4651:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4643:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4643:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4673:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4665:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4693:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4685:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4685:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4633:73:0"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4731:0:0"
									},
									"scope": 944,
									"src": "4612:326:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1015
									],
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "5127:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 348,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5154:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 349,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5160:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 350,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "5164:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5173:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 347,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															355,
															385
														],
														"referencedDeclaration": 385,
														"src": "5137:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "5137:39:0"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "4944:55:0",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5013:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 345,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5118:8:0"
									},
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5047:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5039:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5069:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5061:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5089:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5081:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5029:73:0"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5127:0:0"
									},
									"scope": 944,
									"src": "5004:179:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1005
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "5399:164:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 370,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1832,
																		"src": "5436:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5436:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 372,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "5450:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 369,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "5417:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5417:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5460:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															},
															"value": "ERC721: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															}
														],
														"id": 368,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5409:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5409:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "5409:99:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 378,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "5532:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 379,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "5538:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 380,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "5542:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 381,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "5551:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 377,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "5518:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5518:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "5518:38:0"
											}
										]
									},
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "5189:55:0",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5258:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 366,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5390:8:0"
									},
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5292:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5284:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5284:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5314:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5306:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5306:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5334:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5326:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5326:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5364:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5351:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5351:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5274:100:0"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5399:0:0"
									},
									"scope": 944,
									"src": "5249:314:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 413,
										"nodeType": "Block",
										"src": "6564:165:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 398,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "6584:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 399,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "6590:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 400,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "6594:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 397,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "6574:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6574:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 402,
												"nodeType": "ExpressionStatement",
												"src": "6574:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6643:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 406,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 390,
																	"src": "6649:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 407,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "6653:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 408,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "6662:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 404,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 884,
																"src": "6620:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6620:47:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6669:52:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 403,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6612:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6612:110:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "6612:110:0"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "5569:850:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "6433:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6464:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6456:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6456:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6486:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6478:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6478:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6506:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6498:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6498:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6536:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6523:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 393,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6523:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6446:100:0"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6564:0:0"
									},
									"scope": 944,
									"src": "6424:305:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "6913:40:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 422,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "6930:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 424,
													"indexExpression": {
														"id": 423,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "6938:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6930:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 421,
												"id": 425,
												"nodeType": "Return",
												"src": "6923:23:0"
											}
										]
									},
									"documentation": {
										"id": 415,
										"nodeType": "StructuredDocumentation",
										"src": "6735:98:0",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "6847:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6864:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "6856:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6855:17:0"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "6904:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:9:0"
									},
									"scope": 944,
									"src": "6838:115:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "7327:55:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 436,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "7353:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 435,
															"name": "_ownerOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "7344:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 437,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7344:17:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7373:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7365:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 438,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7365:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7365:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7344:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 434,
												"id": 443,
												"nodeType": "Return",
												"src": "7337:38:0"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "6959:292:0",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "7265:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7281:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7273:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7273:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7272:17:0"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7321:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7321:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7320:6:0"
									},
									"scope": 944,
									"src": "7256:126:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 478,
										"nodeType": "Block",
										"src": "7639:162:0",
										"statements": [
											{
												"assignments": [
													456
												],
												"declarations": [
													{
														"constant": false,
														"id": 456,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7657:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 478,
														"src": "7649:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 455,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7649:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 461,
												"initialValue": {
													"arguments": [
														{
															"id": 459,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 450,
															"src": "7680:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 457,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "7665:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 458,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "7665:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7665:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7649:39:0"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 462,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 448,
																		"src": "7706:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 463,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 456,
																		"src": "7717:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "7706:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 466,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 456,
																			"src": "7743:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 467,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 448,
																			"src": "7750:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 465,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 309,
																		"src": "7726:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7726:32:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "7706:52:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 471,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 450,
																			"src": "7774:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 470,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 274,
																		"src": "7762:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7762:20:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 473,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 448,
																	"src": "7786:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "7762:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7706:87:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 476,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7705:89:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 454,
												"id": 477,
												"nodeType": "Return",
												"src": "7698:96:0"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "7388:147:0",
										"text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
									},
									"id": 479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isApprovedOrOwner",
									"nameLocation": "7549:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7576:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7568:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7568:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7593:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7585:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7585:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7567:34:0"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7633:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 452,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7633:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7632:6:0"
									},
									"scope": 944,
									"src": "7540:261:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 493,
										"nodeType": "Block",
										"src": "8196:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "8216:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "8220:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8229:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 487,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															494,
															523
														],
														"referencedDeclaration": 523,
														"src": "8206:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8206:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "8206:26:0"
											}
										]
									},
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "7807:319:0",
										"text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8140:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8158:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "8150:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8150:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8170:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "8162:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8149:29:0"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8196:0:0"
									},
									"scope": 944,
									"src": "8131:108:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 522,
										"nodeType": "Block",
										"src": "8574:195:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 505,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "8590:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 506,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "8594:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 504,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 600,
														"src": "8584:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8584:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "8584:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 513,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8664:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8656:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 511,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8656:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 514,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8656:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 515,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 497,
																	"src": "8668:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 516,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "8672:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 517,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 501,
																	"src": "8681:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 510,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 884,
																"src": "8633:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8633:53:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8700:52:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 509,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8612:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8612:150:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 521,
												"nodeType": "ExpressionStatement",
												"src": "8612:150:0"
											}
										]
									},
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "8245:210:0",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8469:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8496:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8488:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8488:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8516:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8508:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8508:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8546:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8533:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 500,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8533:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8478:78:0"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8574:0:0"
									},
									"scope": 944,
									"src": "8460:309:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 599,
										"nodeType": "Block",
										"src": "9152:859:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 532,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 526,
																"src": "9170:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9184:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9176:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 533,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9176:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9176:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9170:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9188:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															},
															"value": "ERC721: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															}
														],
														"id": 531,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9162:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9162:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "9162:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9241:17:0",
															"subExpression": {
																"arguments": [
																	{
																		"id": 543,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "9250:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 542,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "9242:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 544,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9242:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9260:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 541,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9233:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9233:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 548,
												"nodeType": "ExpressionStatement",
												"src": "9233:58:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9331:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9323:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 550,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9323:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9323:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 554,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9335:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 555,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9339:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9348:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 549,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "9302:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9302:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 558,
												"nodeType": "ExpressionStatement",
												"src": "9302:48:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9445:17:0",
															"subExpression": {
																"arguments": [
																	{
																		"id": 561,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "9454:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 560,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "9446:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9446:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9464:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 559,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9437:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9437:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 566,
												"nodeType": "ExpressionStatement",
												"src": "9437:58:0"
											},
											{
												"id": 573,
												"nodeType": "UncheckedBlock",
												"src": "9506:360:0",
												"statements": [
													{
														"expression": {
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 567,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "9837:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 569,
																"indexExpression": {
																	"id": 568,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "9847:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9837:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 570,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9854:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "9837:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 572,
														"nodeType": "ExpressionStatement",
														"src": "9837:18:0"
													}
												]
											},
											{
												"expression": {
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 574,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "9876:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 576,
														"indexExpression": {
															"id": 575,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9884:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9876:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 577,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 526,
														"src": "9895:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9876:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "9876:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9930:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9922:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 581,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9922:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9922:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 585,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9934:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 586,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9938:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 580,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 959,
														"src": "9913:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9913:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "EmitStatement",
												"src": "9908:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9985:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 591,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9977:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 590,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9977:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9977:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 594,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9989:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 595,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9993:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10002:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 589,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 943,
														"src": "9957:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9957:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 598,
												"nodeType": "ExpressionStatement",
												"src": "9957:47:0"
											}
										]
									},
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "8775:311:0",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9100:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9114:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "9106:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9106:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9126:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "9118:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9118:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9105:29:0"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9152:0:0"
									},
									"scope": 944,
									"src": "9091:920:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 666,
										"nodeType": "Block",
										"src": "10386:713:0",
										"statements": [
											{
												"assignments": [
													607
												],
												"declarations": [
													{
														"constant": false,
														"id": 607,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "10404:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 666,
														"src": "10396:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 606,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10396:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 612,
												"initialValue": {
													"arguments": [
														{
															"id": 610,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "10427:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 608,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "10412:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "10412:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10412:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10396:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 614,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "10467:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10482:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 616,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10474:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 615,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10474:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10474:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 619,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "10486:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10495:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 613,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "10446:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10446:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 622,
												"nodeType": "ExpressionStatement",
												"src": "10446:51:0"
											},
											{
												"expression": {
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 623,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 607,
														"src": "10599:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 626,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "10622:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 624,
																"name": "ERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "10607:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																	"typeString": "type(contract ERC721)"
																}
															},
															"id": 625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "ownerOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 145,
															"src": "10607:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 627,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10607:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10599:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 629,
												"nodeType": "ExpressionStatement",
												"src": "10599:31:0"
											},
											{
												"expression": {
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "10668:31:0",
													"subExpression": {
														"baseExpression": {
															"id": 630,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "10675:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 632,
														"indexExpression": {
															"id": 631,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "10691:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10675:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 634,
												"nodeType": "ExpressionStatement",
												"src": "10668:31:0"
											},
											{
												"id": 641,
												"nodeType": "UncheckedBlock",
												"src": "10710:237:0",
												"statements": [
													{
														"expression": {
															"id": 639,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 635,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "10915:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 637,
																"indexExpression": {
																	"id": 636,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 607,
																	"src": "10925:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10915:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 638,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10935:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10915:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 640,
														"nodeType": "ExpressionStatement",
														"src": "10915:21:0"
													}
												]
											},
											{
												"expression": {
													"id": 645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "10956:23:0",
													"subExpression": {
														"baseExpression": {
															"id": 642,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "10963:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 644,
														"indexExpression": {
															"id": 643,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "10971:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10963:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 646,
												"nodeType": "ExpressionStatement",
												"src": "10956:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 648,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "11004:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11019:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11011:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 649,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11011:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 652,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11011:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 653,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "11023:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 647,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 959,
														"src": "10995:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10995:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 655,
												"nodeType": "EmitStatement",
												"src": "10990:41:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 657,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "11062:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11077:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 659,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11069:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 658,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11069:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11069:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 662,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "11081:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11090:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 656,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 943,
														"src": "11042:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11042:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "11042:50:0"
											}
										]
									},
									"documentation": {
										"id": 601,
										"nodeType": "StructuredDocumentation",
										"src": "10017:315:0",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "10346:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10360:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "10352:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10352:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10351:17:0"
									},
									"returnParameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10386:0:0"
									},
									"scope": 944,
									"src": "10337:762:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 751,
										"nodeType": "Block",
										"src": "11532:1124:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 680,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 674,
																		"src": "11565:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 678,
																		"name": "ERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "11550:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																			"typeString": "type(contract ERC721)"
																		}
																	},
																	"id": 679,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 145,
																	"src": "11550:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 681,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11550:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 682,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "11577:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11550:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11583:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 677,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11542:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11542:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 686,
												"nodeType": "ExpressionStatement",
												"src": "11542:81:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 688,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "11641:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 691,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11655:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11647:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 689,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11647:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11647:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11641:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11659:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															},
															"value": "ERC721: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															}
														],
														"id": 687,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11633:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11633:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 696,
												"nodeType": "ExpressionStatement",
												"src": "11633:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 698,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "11730:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 699,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "11736:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 700,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "11740:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11749:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 697,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "11709:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11709:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "11709:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 707,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 674,
																		"src": "11866:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 705,
																		"name": "ERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "11851:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																			"typeString": "type(contract ERC721)"
																		}
																	},
																	"id": 706,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 145,
																	"src": "11851:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11851:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 709,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "11878:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11851:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11884:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 704,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11843:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11843:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "11843:81:0"
											},
											{
												"expression": {
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11986:31:0",
													"subExpression": {
														"baseExpression": {
															"id": 714,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "11993:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 716,
														"indexExpression": {
															"id": 715,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "12009:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11993:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "11986:31:0"
											},
											{
												"id": 731,
												"nodeType": "UncheckedBlock",
												"src": "12028:496:0",
												"statements": [
													{
														"expression": {
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 719,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "12461:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 721,
																"indexExpression": {
																	"id": 720,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "12471:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "12461:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 722,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12480:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "12461:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 724,
														"nodeType": "ExpressionStatement",
														"src": "12461:20:0"
													},
													{
														"expression": {
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 725,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "12495:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 727,
																"indexExpression": {
																	"id": 726,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "12505:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "12495:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12512:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "12495:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 730,
														"nodeType": "ExpressionStatement",
														"src": "12495:18:0"
													}
												]
											},
											{
												"expression": {
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 732,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "12533:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 734,
														"indexExpression": {
															"id": 733,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "12541:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12533:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 735,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "12552:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12533:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 737,
												"nodeType": "ExpressionStatement",
												"src": "12533:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 739,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "12579:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 740,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "12585:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "12589:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 738,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 959,
														"src": "12570:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12570:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 743,
												"nodeType": "EmitStatement",
												"src": "12565:32:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 745,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "12628:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 746,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "12634:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 747,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "12638:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12647:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 744,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 943,
														"src": "12608:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12608:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 750,
												"nodeType": "ExpressionStatement",
												"src": "12608:41:0"
											}
										]
									},
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "11105:313:0",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "11432:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11459:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11451:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11451:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11481:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11473:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11473:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11501:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11493:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11493:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11441:73:0"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11532:0:0"
									},
									"scope": 944,
									"src": "11423:1233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "12832:107:0",
										"statements": [
											{
												"expression": {
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 760,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "12842:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 762,
														"indexExpression": {
															"id": 761,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "12858:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12842:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 763,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 755,
														"src": "12869:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12842:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 765,
												"nodeType": "ExpressionStatement",
												"src": "12842:29:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 769,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "12910:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 767,
																	"name": "ERC721",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 944,
																	"src": "12895:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																		"typeString": "type(contract ERC721)"
																	}
																},
																"id": 768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "ownerOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 145,
																"src": "12895:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view returns (address)"
																}
															},
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12895:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 771,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "12920:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 772,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "12924:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 766,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 968,
														"src": "12886:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12886:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 774,
												"nodeType": "EmitStatement",
												"src": "12881:51:0"
											}
										]
									},
									"documentation": {
										"id": 753,
										"nodeType": "StructuredDocumentation",
										"src": "12662:101:0",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "12777:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12794:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "12786:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12786:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12806:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "12798:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12798:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12785:29:0"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12832:0:0"
									},
									"scope": 944,
									"src": "12768:171:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "13198:184:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 787,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 779,
																"src": "13216:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 788,
																"name": "operator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "13225:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13216:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
															"id": 790,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13235:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															},
															"value": "ERC721: approve to caller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															}
														],
														"id": 786,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13208:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13208:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 792,
												"nodeType": "ExpressionStatement",
												"src": "13208:55:0"
											},
											{
												"expression": {
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 793,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "13273:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 796,
															"indexExpression": {
																"id": 794,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 779,
																"src": "13292:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13273:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 797,
														"indexExpression": {
															"id": 795,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "13299:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13273:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 798,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "13311:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "13273:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "ExpressionStatement",
												"src": "13273:46:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 802,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 779,
															"src": "13349:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 803,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "13356:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 804,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "13366:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 801,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "13334:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13334:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 806,
												"nodeType": "EmitStatement",
												"src": "13329:46:0"
											}
										]
									},
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "12945:125:0",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "13084:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "13120:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "13112:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13112:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "13143:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "13135:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13135:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "13166:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "13161:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 782,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13161:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13102:78:0"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13198:0:0"
									},
									"scope": 944,
									"src": "13075:307:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 821,
										"nodeType": "Block",
										"src": "13529:70:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 816,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 811,
																	"src": "13555:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 815,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "13547:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13547:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13565:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 814,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13539:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13539:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "13539:53:0"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "13388:73:0",
										"text": " @dev Reverts if the `tokenId` has not been minted yet."
									},
									"id": 822,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireMinted",
									"nameLocation": "13475:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13498:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "13490:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13490:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13489:17:0"
									},
									"returnParameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13529:0:0"
									},
									"scope": 944,
									"src": "13466:133:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 883,
										"nodeType": "Block",
										"src": "14306:676:0",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 836,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "14320:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 837,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1508,
														"src": "14320:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14320:15:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 881,
													"nodeType": "Block",
													"src": "14940:36:0",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14961:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 835,
															"id": 880,
															"nodeType": "Return",
															"src": "14954:11:0"
														}
													]
												},
												"id": 882,
												"nodeType": "IfStatement",
												"src": "14316:660:0",
												"trueBody": {
													"id": 878,
													"nodeType": "Block",
													"src": "14337:597:0",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 858,
																		"nodeType": "Block",
																		"src": "14451:91:0",
																		"statements": [
																			{
																				"expression": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 856,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 852,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 850,
																						"src": "14476:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 853,
																								"name": "IERC721Receiver",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1078,
																								"src": "14486:15:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1078_$",
																									"typeString": "type(contract IERC721Receiver)"
																								}
																							},
																							"id": 854,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1077,
																							"src": "14486:32:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 855,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "14486:41:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "14476:51:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"functionReturnParameters": 835,
																				"id": 857,
																				"nodeType": "Return",
																				"src": "14469:58:0"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 859,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 851,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 850,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "14443:6:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 859,
																				"src": "14436:13:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 849,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "14436:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "14435:15:0"
																	},
																	"src": "14427:115:0"
																},
																{
																	"block": {
																		"id": 875,
																		"nodeType": "Block",
																		"src": "14571:353:0",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 866,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 863,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 861,
																							"src": "14593:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 864,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "14593:13:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 865,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14610:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "14593:18:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 873,
																					"nodeType": "Block",
																					"src": "14720:190:0",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "14806:86:0",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "14843:2:0",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "14847:6:0"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "14839:3:0"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "14839:15:0"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "14862:6:0"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "14856:5:0"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "14856:13:0"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "14832:6:0"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "14832:38:0"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "14832:38:0"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "istanbul",
																							"externalReferences": [
																								{
																									"declaration": 861,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "14847:6:0",
																									"valueSize": 1
																								},
																								{
																									"declaration": 861,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "14862:6:0",
																									"valueSize": 1
																								}
																							],
																							"id": 872,
																							"nodeType": "InlineAssembly",
																							"src": "14797:95:0"
																						}
																					]
																				},
																				"id": 874,
																				"nodeType": "IfStatement",
																				"src": "14589:321:0",
																				"trueBody": {
																					"id": 871,
																					"nodeType": "Block",
																					"src": "14613:101:0",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
																										"id": 868,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "string",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "14642:52:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										},
																										"value": "ERC721: transfer to non ERC721Receiver implementer"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										}
																									],
																									"id": 867,
																									"name": "revert",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [
																										4294967277,
																										4294967277
																									],
																									"referencedDeclaration": 4294967277,
																									"src": "14635:6:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																										"typeString": "function (string memory) pure"
																									}
																								},
																								"id": 869,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "14635:60:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 870,
																							"nodeType": "ExpressionStatement",
																							"src": "14635:60:0"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 876,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 862,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 861,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "14563:6:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 876,
																				"src": "14550:19:0",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 860,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "14550:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "14549:21:0"
																	},
																	"src": "14543:381:0"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 843,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1832,
																			"src": "14392:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 844,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14392:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 845,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 825,
																		"src": "14406:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 846,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 829,
																		"src": "14412:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 847,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 831,
																		"src": "14421:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 840,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 827,
																				"src": "14371:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 839,
																			"name": "IERC721Receiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1078,
																			"src": "14355:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1078_$",
																				"typeString": "type(contract IERC721Receiver)"
																			}
																		},
																		"id": 841,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14355:19:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721Receiver_$1078",
																			"typeString": "contract IERC721Receiver"
																		}
																	},
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1077,
																	"src": "14355:36:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14355:71:0",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 877,
															"nodeType": "TryStatement",
															"src": "14351:573:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 823,
										"nodeType": "StructuredDocumentation",
										"src": "13605:541:0",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 884,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "14160:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14200:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "14192:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14192:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14222:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "14214:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 826,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14214:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14242:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "14234:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "14272:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "14259:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 830,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14259:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14182:100:0"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "14300:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 833,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14300:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14299:6:0"
									},
									"scope": 944,
									"src": "14151:831:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "15856:238:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 896,
														"name": "batchSize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 893,
														"src": "15870:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15882:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15870:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 928,
												"nodeType": "IfStatement",
												"src": "15866:222:0",
												"trueBody": {
													"id": 927,
													"nodeType": "Block",
													"src": "15885:203:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 904,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 899,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 887,
																	"src": "15903:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 902,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "15919:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 901,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "15911:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 900,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "15911:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15911:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "15903:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 912,
															"nodeType": "IfStatement",
															"src": "15899:85:0",
															"trueBody": {
																"id": 911,
																"nodeType": "Block",
																"src": "15923:61:0",
																"statements": [
																	{
																		"expression": {
																			"id": 909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 905,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 35,
																					"src": "15941:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 907,
																				"indexExpression": {
																					"id": 906,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 887,
																					"src": "15951:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "15941:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"id": 908,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 893,
																				"src": "15960:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "15941:28:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 910,
																		"nodeType": "ExpressionStatement",
																		"src": "15941:28:0"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 913,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 889,
																	"src": "16001:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 916,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "16015:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "16007:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 914,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "16007:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16007:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "16001:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 926,
															"nodeType": "IfStatement",
															"src": "15997:81:0",
															"trueBody": {
																"id": 925,
																"nodeType": "Block",
																"src": "16019:59:0",
																"statements": [
																	{
																		"expression": {
																			"id": 923,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 919,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 35,
																					"src": "16037:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 921,
																				"indexExpression": {
																					"id": 920,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 889,
																					"src": "16047:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "16037:13:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"id": 922,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 893,
																				"src": "16054:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16037:26:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 924,
																		"nodeType": "ExpressionStatement",
																		"src": "16037:26:0"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "14988:705:0",
										"text": " @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "15707:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "15745:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "15737:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15737:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15767:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "15759:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15759:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "15779:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15779:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "15823:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "15815:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15815:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15727:111:0"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15856:0:0"
									},
									"scope": 944,
									"src": "15698:396:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 942,
										"nodeType": "Block",
										"src": "16951:2:0",
										"statements": []
									},
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "16100:695:0",
										"text": " @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "16809:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16846:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "16838:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16838:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16868:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "16860:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "firstTokenId",
												"nameLocation": "16888:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "16880:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16880:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "16918:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "16910:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16910:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16828:105:0"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16951:0:0"
									},
									"scope": 944,
									"src": "16800:153:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 945,
							"src": "628:16327:0",
							"usedErrors": []
						}
					],
					"src": "107:16849:0"
				},
				"id": 0
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							2053
						],
						"IERC721": [
							1060
						]
					},
					"id": 1061,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 946,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 947,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1061,
							"sourceUnit": 2054,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 949,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2053,
										"src": "271:7:1"
									},
									"id": 950,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 948,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1060,
							"linearizedBaseContracts": [
								1060,
								2053
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 959,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 952,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 955,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 968,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 977,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 974,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 985,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 982,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 1060,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 986,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 993,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 1060,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1005,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1844:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1866:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 997,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1886:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1911:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1001,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:1"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:1"
									},
									"scope": 1060,
									"src": "1809:137:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1015,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2679:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2701:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2721:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:1"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:1"
									},
									"scope": 1060,
									"src": "2644:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1016,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "3526:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "3548:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "3568:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:1"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:1"
									},
									"scope": 1060,
									"src": "3495:104:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "4079:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "4091:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:1"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:1"
									},
									"scope": 1060,
									"src": "4062:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "4464:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "4482:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1037,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:1"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:1"
									},
									"scope": 1060,
									"src": "4437:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1042,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1049,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "4678:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:1"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "4718:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:1"
									},
									"scope": 1060,
									"src": "4657:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1050,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1059,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4911:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4926:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:1"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4967:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1056,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:1"
									},
									"scope": 1060,
									"src": "4885:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1061,
							"src": "250:4725:1",
							"usedErrors": []
						}
					],
					"src": "108:4868:1"
				},
				"id": 1
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1078
						]
					},
					"id": 1079,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1062,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1063,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1078,
							"linearizedBaseContracts": [
								1078
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1064,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1077,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "859:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1065,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "885:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "907:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "932:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1071,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:2"
									},
									"returnParameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "976:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1074,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:2"
									},
									"scope": 1078,
									"src": "824:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1079,
							"src": "294:692:2",
							"usedErrors": []
						}
					],
					"src": "116:871:2"
				},
				"id": 2
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
					"exportedSymbols": {
						"Address": [
							1820
						],
						"Context": [
							1842
						],
						"ERC165": [
							2041
						],
						"ERC721": [
							944
						],
						"ERC721Enumerable": [
							1432
						],
						"IERC165": [
							2053
						],
						"IERC721": [
							1060
						],
						"IERC721Enumerable": [
							1463
						],
						"IERC721Metadata": [
							1490
						],
						"IERC721Receiver": [
							1078
						],
						"Math": [
							2918
						],
						"Strings": [
							2017
						]
					},
					"id": 1433,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1080,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "128:23:3"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol",
							"file": "../ERC721.sol",
							"id": 1081,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1433,
							"sourceUnit": 945,
							"src": "153:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "./IERC721Enumerable.sol",
							"id": 1082,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1433,
							"sourceUnit": 1464,
							"src": "177:33:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1084,
										"name": "ERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 944,
										"src": "450:6:3"
									},
									"id": 1085,
									"nodeType": "InheritanceSpecifier",
									"src": "450:6:3"
								},
								{
									"baseName": {
										"id": 1086,
										"name": "IERC721Enumerable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1463,
										"src": "458:17:3"
									},
									"id": 1087,
									"nodeType": "InheritanceSpecifier",
									"src": "458:17:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1083,
								"nodeType": "StructuredDocumentation",
								"src": "212:199:3",
								"text": " @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."
							},
							"fullyImplemented": false,
							"id": 1432,
							"linearizedBaseContracts": [
								1432,
								1463,
								944,
								1490,
								1060,
								2041,
								2053,
								1842
							],
							"name": "ERC721Enumerable",
							"nameLocation": "430:16:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1093,
									"mutability": "mutable",
									"name": "_ownedTokens",
									"nameLocation": "591:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 1432,
									"src": "535:68:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 1092,
										"keyType": {
											"id": 1088,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "543:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "535:47:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueType": {
											"id": 1091,
											"keyType": {
												"id": 1089,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "562:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "554:27:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueType": {
												"id": 1090,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "573:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1097,
									"mutability": "mutable",
									"name": "_ownedTokensIndex",
									"nameLocation": "709:17:3",
									"nodeType": "VariableDeclaration",
									"scope": 1432,
									"src": "673:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1096,
										"keyType": {
											"id": 1094,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "681:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "673:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 1095,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "692:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1100,
									"mutability": "mutable",
									"name": "_allTokens",
									"nameLocation": "805:10:3",
									"nodeType": "VariableDeclaration",
									"scope": 1432,
									"src": "787:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
										"typeString": "uint256[]"
									},
									"typeName": {
										"baseType": {
											"id": 1098,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "787:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1099,
										"nodeType": "ArrayTypeName",
										"src": "787:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1104,
									"mutability": "mutable",
									"name": "_allTokensIndex",
									"nameLocation": "922:15:3",
									"nodeType": "VariableDeclaration",
									"scope": 1432,
									"src": "886:51:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1103,
										"keyType": {
											"id": 1101,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "894:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "886:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 1102,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "905:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										93,
										2052
									],
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "1113:114:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 1120,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1115,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1107,
															"src": "1130:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1117,
																		"name": "IERC721Enumerable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1463,
																		"src": "1150:17:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$1463_$",
																			"typeString": "type(contract IERC721Enumerable)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$1463_$",
																			"typeString": "type(contract IERC721Enumerable)"
																		}
																	],
																	"id": 1116,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "1145:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1118,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1145:23:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Enumerable_$1463",
																	"typeString": "type(contract IERC721Enumerable)"
																}
															},
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "1145:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "1130:50:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 1123,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1107,
																"src": "1208:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 1121,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "1184:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1432_$",
																	"typeString": "type(contract super ERC721Enumerable)"
																}
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 93,
															"src": "1184:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 1124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1184:36:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1130:90:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1114,
												"id": 1126,
												"nodeType": "Return",
												"src": "1123:97:3"
											}
										]
									},
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "944:56:3",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1014:17:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1111,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1109,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2053,
												"src": "1081:7:3"
											},
											{
												"id": 1110,
												"name": "ERC721",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 944,
												"src": "1090:6:3"
											}
										],
										"src": "1072:25:3"
									},
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1039:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "1032:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1106,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1032:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:20:3"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "1107:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1107:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1106:6:3"
									},
									"scope": 1432,
									"src": "1005:222:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1454
									],
									"body": {
										"id": 1155,
										"nodeType": "Block",
										"src": "1412:147:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1140,
																"name": "index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1133,
																"src": "1430:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1143,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1131,
																		"src": "1455:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1141,
																		"name": "ERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "1438:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																			"typeString": "type(contract ERC721)"
																		}
																	},
																	"id": 1142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 117,
																	"src": "1438:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1438:23:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1430:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473",
															"id": 1146,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1463:45:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
																"typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
															},
															"value": "ERC721Enumerable: owner index out of bounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
																"typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
															}
														],
														"id": 1139,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1422:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1422:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1148,
												"nodeType": "ExpressionStatement",
												"src": "1422:87:3"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1149,
															"name": "_ownedTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "1526:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(uint256 => uint256))"
															}
														},
														"id": 1151,
														"indexExpression": {
															"id": 1150,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "1539:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1526:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 1153,
													"indexExpression": {
														"id": 1152,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "1546:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1526:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1138,
												"id": 1154,
												"nodeType": "Return",
												"src": "1519:33:3"
											}
										]
									},
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "1233:68:3",
										"text": " @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."
									},
									"functionSelector": "2f745c59",
									"id": 1156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "1315:19:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1135,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1385:8:3"
									},
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1343:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1335:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1335:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "1358:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1350:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1350:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1334:30:3"
									},
									"returnParameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1403:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1403:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:9:3"
									},
									"scope": 1432,
									"src": "1306:253:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1444
									],
									"body": {
										"id": 1166,
										"nodeType": "Block",
										"src": "1700:41:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1163,
														"name": "_allTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "1717:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
															"typeString": "uint256[] storage ref"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1717:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1162,
												"id": 1165,
												"nodeType": "Return",
												"src": "1710:24:3"
											}
										]
									},
									"documentation": {
										"id": 1157,
										"nodeType": "StructuredDocumentation",
										"src": "1565:60:3",
										"text": " @dev See {IERC721Enumerable-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "1639:11:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1159,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1673:8:3"
									},
									"parameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1650:2:3"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "1691:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1691:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1690:9:3"
									},
									"scope": 1432,
									"src": "1630:111:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1462
									],
									"body": {
										"id": 1189,
										"nodeType": "Block",
										"src": "1897:146:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1177,
																"name": "index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1170,
																"src": "1915:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1178,
																		"name": "ERC721Enumerable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1432,
																		"src": "1923:16:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721Enumerable_$1432_$",
																			"typeString": "type(contract ERC721Enumerable)"
																		}
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalSupply",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1167,
																	"src": "1923:28:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1923:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1915:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473",
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1955:46:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
																"typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
															},
															"value": "ERC721Enumerable: global index out of bounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
																"typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
															}
														],
														"id": 1176,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1907:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1907:95:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1184,
												"nodeType": "ExpressionStatement",
												"src": "1907:95:3"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1185,
														"name": "_allTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "2019:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
															"typeString": "uint256[] storage ref"
														}
													},
													"id": 1187,
													"indexExpression": {
														"id": 1186,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "2030:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2019:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1175,
												"id": 1188,
												"nodeType": "Return",
												"src": "2012:24:3"
											}
										]
									},
									"documentation": {
										"id": 1168,
										"nodeType": "StructuredDocumentation",
										"src": "1747:61:3",
										"text": " @dev See {IERC721Enumerable-tokenByIndex}."
									},
									"functionSelector": "4f6ccce7",
									"id": 1190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "1822:12:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1172,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1870:8:3"
									},
									"parameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "1843:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1835:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1835:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:15:3"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1888:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1888:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:9:3"
									},
									"scope": 1432,
									"src": "1813:230:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										930
									],
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "2273:729:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1206,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "2310:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1207,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1195,
															"src": "2316:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1208,
															"name": "firstTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "2320:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1209,
															"name": "batchSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1199,
															"src": "2334:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1203,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2283:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1432_$",
																"typeString": "type(contract super ERC721Enumerable)"
															}
														},
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 930,
														"src": "2283:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2283:61:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1211,
												"nodeType": "ExpressionStatement",
												"src": "2283:61:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1212,
														"name": "batchSize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "2359:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1213,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2371:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2359:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1220,
												"nodeType": "IfStatement",
												"src": "2355:219:3",
												"trueBody": {
													"id": 1219,
													"nodeType": "Block",
													"src": "2374:200:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "455243373231456e756d657261626c653a20636f6e7365637574697665207472616e7366657273206e6f7420737570706f72746564",
																		"id": 1216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2507:55:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314",
																			"typeString": "literal_string \"ERC721Enumerable: consecutive transfers not supported\""
																		},
																		"value": "ERC721Enumerable: consecutive transfers not supported"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314",
																			"typeString": "literal_string \"ERC721Enumerable: consecutive transfers not supported\""
																		}
																	],
																	"id": 1215,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "2500:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2500:63:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1218,
															"nodeType": "ExpressionStatement",
															"src": "2500:63:3"
														}
													]
												}
											},
											{
												"assignments": [
													1222
												],
												"declarations": [
													{
														"constant": false,
														"id": 1222,
														"mutability": "mutable",
														"name": "tokenId",
														"nameLocation": "2592:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "2584:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1221,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2584:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1224,
												"initialValue": {
													"id": 1223,
													"name": "firstTokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1197,
													"src": "2602:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2584:30:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1225,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1193,
														"src": "2629:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2645:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2637:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1226,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2637:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2637:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2629:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1238,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1236,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "2724:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1237,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1195,
															"src": "2732:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2724:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1245,
													"nodeType": "IfStatement",
													"src": "2720:88:3",
													"trueBody": {
														"id": 1244,
														"nodeType": "Block",
														"src": "2736:72:3",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1240,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1193,
																			"src": "2783:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1241,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1222,
																			"src": "2789:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1239,
																		"name": "_removeTokenFromOwnerEnumeration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1383,
																		"src": "2750:32:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,uint256)"
																		}
																	},
																	"id": 1242,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2750:47:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1243,
																"nodeType": "ExpressionStatement",
																"src": "2750:47:3"
															}
														]
													}
												},
												"id": 1246,
												"nodeType": "IfStatement",
												"src": "2625:183:3",
												"trueBody": {
													"id": 1235,
													"nodeType": "Block",
													"src": "2649:65:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1232,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1222,
																		"src": "2695:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1231,
																	"name": "_addTokenToAllTokensEnumeration",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1320,
																	"src": "2663:31:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 1233,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2663:40:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1234,
															"nodeType": "ExpressionStatement",
															"src": "2663:40:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1247,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "2821:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2835:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2827:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1248,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2827:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1251,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2827:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2821:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1260,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1258,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1195,
															"src": "2919:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1259,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "2925:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2919:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1267,
													"nodeType": "IfStatement",
													"src": "2915:81:3",
													"trueBody": {
														"id": 1266,
														"nodeType": "Block",
														"src": "2931:65:3",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1262,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1195,
																			"src": "2973:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1263,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1222,
																			"src": "2977:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1261,
																		"name": "_addTokenToOwnerEnumeration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "2945:27:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,uint256)"
																		}
																	},
																	"id": 1264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2945:40:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1265,
																"nodeType": "ExpressionStatement",
																"src": "2945:40:3"
															}
														]
													}
												},
												"id": 1268,
												"nodeType": "IfStatement",
												"src": "2817:179:3",
												"trueBody": {
													"id": 1257,
													"nodeType": "Block",
													"src": "2839:70:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1254,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1222,
																		"src": "2890:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1253,
																	"name": "_removeTokenFromAllTokensEnumeration",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "2853:36:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2853:45:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1256,
															"nodeType": "ExpressionStatement",
															"src": "2853:45:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "2049:58:3",
										"text": " @dev See {ERC721-_beforeTokenTransfer}."
									},
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "2121:20:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1201,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2264:8:3"
									},
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2159:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2151:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2151:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2181:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2173:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2173:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "firstTokenId",
												"nameLocation": "2201:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2193:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2193:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "2231:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2223:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2223:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2141:105:3"
									},
									"returnParameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2273:0:3"
									},
									"scope": 1432,
									"src": "2112:890:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "3370:143:3",
										"statements": [
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "3388:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 1299,
														"src": "3380:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3380:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1284,
												"initialValue": {
													"arguments": [
														{
															"id": 1282,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "3414:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1280,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "3397:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 117,
														"src": "3397:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3397:20:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3380:37:3"
											},
											{
												"expression": {
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1285,
																"name": "_ownedTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "3427:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1288,
															"indexExpression": {
																"id": 1286,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1273,
																"src": "3440:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3427:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1289,
														"indexExpression": {
															"id": 1287,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "3444:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3427:24:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1290,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1275,
														"src": "3454:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3427:34:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1292,
												"nodeType": "ExpressionStatement",
												"src": "3427:34:3"
											},
											{
												"expression": {
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1293,
															"name": "_ownedTokensIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1097,
															"src": "3471:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1295,
														"indexExpression": {
															"id": 1294,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "3489:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3471:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1296,
														"name": "length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "3500:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3471:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1298,
												"nodeType": "ExpressionStatement",
												"src": "3471:35:3"
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "3008:283:3",
										"text": " @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"
									},
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_addTokenToOwnerEnumeration",
									"nameLocation": "3305:27:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3341:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "3333:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3333:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3353:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "3345:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3345:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:29:3"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:0:3"
									},
									"scope": 1432,
									"src": "3296:217:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1319,
										"nodeType": "Block",
										"src": "3774:95:3",
										"statements": [
											{
												"expression": {
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1306,
															"name": "_allTokensIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1104,
															"src": "3784:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1308,
														"indexExpression": {
															"id": 1307,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1303,
															"src": "3800:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3784:24:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1309,
															"name": "_allTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "3811:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1310,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3811:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3784:44:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1312,
												"nodeType": "ExpressionStatement",
												"src": "3784:44:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1316,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1303,
															"src": "3854:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1313,
															"name": "_allTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "3838:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "3838:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256)"
														}
													},
													"id": 1317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3838:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1318,
												"nodeType": "ExpressionStatement",
												"src": "3838:24:3"
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "3519:184:3",
										"text": " @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"
									},
									"id": 1320,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_addTokenToAllTokensEnumeration",
									"nameLocation": "3717:31:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3757:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "3749:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3749:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3748:17:3"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3774:0:3"
									},
									"scope": 1432,
									"src": "3708:161:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1382,
										"nodeType": "Block",
										"src": "4567:889:3",
										"statements": [
											{
												"assignments": [
													1329
												],
												"declarations": [
													{
														"constant": false,
														"id": 1329,
														"mutability": "mutable",
														"name": "lastTokenIndex",
														"nameLocation": "4756:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 1382,
														"src": "4748:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1328,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4748:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1336,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1332,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1323,
																"src": "4790:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1330,
																"name": "ERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "4773:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
																	"typeString": "type(contract ERC721)"
																}
															},
															"id": 1331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 117,
															"src": "4773:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 1333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4773:22:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 1334,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4798:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4773:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4748:51:3"
											},
											{
												"assignments": [
													1338
												],
												"declarations": [
													{
														"constant": false,
														"id": 1338,
														"mutability": "mutable",
														"name": "tokenIndex",
														"nameLocation": "4817:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 1382,
														"src": "4809:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1337,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4809:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1342,
												"initialValue": {
													"baseExpression": {
														"id": 1339,
														"name": "_ownedTokensIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "4830:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 1341,
													"indexExpression": {
														"id": 1340,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1325,
														"src": "4848:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4830:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4809:47:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1343,
														"name": "tokenIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1338,
														"src": "4960:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1344,
														"name": "lastTokenIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1329,
														"src": "4974:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4960:28:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "4956:323:3",
												"trueBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "4990:289:3",
													"statements": [
														{
															"assignments": [
																1347
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1347,
																	"mutability": "mutable",
																	"name": "lastTokenId",
																	"nameLocation": "5012:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 1368,
																	"src": "5004:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1346,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5004:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1353,
															"initialValue": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1348,
																		"name": "_ownedTokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1093,
																		"src": "5026:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(uint256 => uint256))"
																		}
																	},
																	"id": 1350,
																	"indexExpression": {
																		"id": 1349,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1323,
																		"src": "5039:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5026:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1352,
																"indexExpression": {
																	"id": 1351,
																	"name": "lastTokenIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1329,
																	"src": "5045:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5026:34:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5004:56:3"
														},
														{
															"expression": {
																"id": 1360,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1354,
																			"name": "_ownedTokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1093,
																			"src": "5075:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(uint256 => uint256))"
																			}
																		},
																		"id": 1357,
																		"indexExpression": {
																			"id": 1355,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1323,
																			"src": "5088:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5075:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1358,
																	"indexExpression": {
																		"id": 1356,
																		"name": "tokenIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1338,
																		"src": "5094:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5075:30:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1359,
																	"name": "lastTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1347,
																	"src": "5108:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5075:44:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1361,
															"nodeType": "ExpressionStatement",
															"src": "5075:44:3"
														},
														{
															"expression": {
																"id": 1366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1362,
																		"name": "_ownedTokensIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1097,
																		"src": "5191:17:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1364,
																	"indexExpression": {
																		"id": 1363,
																		"name": "lastTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1347,
																		"src": "5209:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5191:30:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1365,
																	"name": "tokenIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1338,
																	"src": "5224:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5191:43:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1367,
															"nodeType": "ExpressionStatement",
															"src": "5191:43:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "5365:33:3",
													"subExpression": {
														"baseExpression": {
															"id": 1370,
															"name": "_ownedTokensIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1097,
															"src": "5372:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1372,
														"indexExpression": {
															"id": 1371,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "5390:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5372:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1374,
												"nodeType": "ExpressionStatement",
												"src": "5365:33:3"
											},
											{
												"expression": {
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "5408:41:3",
													"subExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1375,
																"name": "_ownedTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "5415:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1377,
															"indexExpression": {
																"id": 1376,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1323,
																"src": "5428:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5415:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1379,
														"indexExpression": {
															"id": 1378,
															"name": "lastTokenIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "5434:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5415:34:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1381,
												"nodeType": "ExpressionStatement",
												"src": "5408:41:3"
											}
										]
									},
									"documentation": {
										"id": 1321,
										"nodeType": "StructuredDocumentation",
										"src": "3875:606:3",
										"text": " @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"
									},
									"id": 1383,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_removeTokenFromOwnerEnumeration",
									"nameLocation": "4495:32:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4536:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "4528:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4528:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4550:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "4542:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4527:31:3"
									},
									"returnParameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4567:0:3"
									},
									"scope": 1432,
									"src": "4486:970:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1430,
										"nodeType": "Block",
										"src": "5815:990:3",
										"statements": [
											{
												"assignments": [
													1390
												],
												"declarations": [
													{
														"constant": false,
														"id": 1390,
														"mutability": "mutable",
														"name": "lastTokenIndex",
														"nameLocation": "6001:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 1430,
														"src": "5993:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1389,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5993:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1395,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1391,
															"name": "_allTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6018:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6018:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6038:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "6018:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5993:46:3"
											},
											{
												"assignments": [
													1397
												],
												"declarations": [
													{
														"constant": false,
														"id": 1397,
														"mutability": "mutable",
														"name": "tokenIndex",
														"nameLocation": "6057:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 1430,
														"src": "6049:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1396,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6049:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1401,
												"initialValue": {
													"baseExpression": {
														"id": 1398,
														"name": "_allTokensIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1104,
														"src": "6070:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 1400,
													"indexExpression": {
														"id": 1399,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1386,
														"src": "6086:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6070:24:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6049:45:3"
											},
											{
												"assignments": [
													1403
												],
												"declarations": [
													{
														"constant": false,
														"id": 1403,
														"mutability": "mutable",
														"name": "lastTokenId",
														"nameLocation": "6424:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 1430,
														"src": "6416:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1402,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6416:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1407,
												"initialValue": {
													"baseExpression": {
														"id": 1404,
														"name": "_allTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "6438:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
															"typeString": "uint256[] storage ref"
														}
													},
													"id": 1406,
													"indexExpression": {
														"id": 1405,
														"name": "lastTokenIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1390,
														"src": "6449:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6438:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6416:48:3"
											},
											{
												"expression": {
													"id": 1412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1408,
															"name": "_allTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6475:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1410,
														"indexExpression": {
															"id": 1409,
															"name": "tokenIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "6486:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6475:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1411,
														"name": "lastTokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1403,
														"src": "6500:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6475:36:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1413,
												"nodeType": "ExpressionStatement",
												"src": "6475:36:3"
											},
											{
												"expression": {
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1414,
															"name": "_allTokensIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1104,
															"src": "6579:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1416,
														"indexExpression": {
															"id": 1415,
															"name": "lastTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "6595:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6579:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1417,
														"name": "tokenIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1397,
														"src": "6610:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6579:41:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1419,
												"nodeType": "ExpressionStatement",
												"src": "6579:41:3"
											},
											{
												"expression": {
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "6741:31:3",
													"subExpression": {
														"baseExpression": {
															"id": 1420,
															"name": "_allTokensIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1104,
															"src": "6748:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1422,
														"indexExpression": {
															"id": 1421,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1386,
															"src": "6764:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6748:24:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1424,
												"nodeType": "ExpressionStatement",
												"src": "6741:31:3"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1425,
															"name": "_allTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6782:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "pop",
														"nodeType": "MemberAccess",
														"src": "6782:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer)"
														}
													},
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6782:16:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1429,
												"nodeType": "ExpressionStatement",
												"src": "6782:16:3"
											}
										]
									},
									"documentation": {
										"id": 1384,
										"nodeType": "StructuredDocumentation",
										"src": "5462:277:3",
										"text": " @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"
									},
									"id": 1431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_removeTokenFromAllTokensEnumeration",
									"nameLocation": "5753:36:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5798:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "5790:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:17:3"
									},
									"returnParameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5815:0:3"
									},
									"scope": 1432,
									"src": "5744:1061:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1433,
							"src": "412:6395:3",
							"usedErrors": []
						}
					],
					"src": "128:6680:3"
				},
				"id": 3
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							2053
						],
						"IERC721": [
							1060
						],
						"IERC721Enumerable": [
							1463
						]
					},
					"id": 1464,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1434,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:4"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 1435,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1464,
							"sourceUnit": 1061,
							"src": "154:24:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1437,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1060,
										"src": "348:7:4"
									},
									"id": 1438,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1436,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1463,
							"linearizedBaseContracts": [
								1463,
								1060,
								2053
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1439,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:4",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 1444,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:4"
									},
									"returnParameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1444,
												"src": "495:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:4"
									},
									"scope": 1463,
									"src": "449:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1445,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:4",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 1454,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "715:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "730:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:4"
									},
									"returnParameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "768:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:4"
									},
									"scope": 1463,
									"src": "686:91:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1455,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:4",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1462,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "974:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:4"
									},
									"returnParameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "1012:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:4"
									},
									"scope": 1463,
									"src": "952:69:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1464,
							"src": "317:706:4",
							"usedErrors": []
						}
					],
					"src": "129:895:4"
				},
				"id": 4
			},
			".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							2053
						],
						"IERC721": [
							1060
						],
						"IERC721Metadata": [
							1490
						]
					},
					"id": 1491,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1465,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:5"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 1466,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1491,
							"sourceUnit": 1061,
							"src": "137:24:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1468,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1060,
										"src": "326:7:5"
									},
									"id": 1469,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:5"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1467,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1490,
							"linearizedBaseContracts": [
								1490,
								1060,
								2053
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1470,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:5",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:5"
									},
									"returnParameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "442:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1472,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:5"
									},
									"scope": 1490,
									"src": "403:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1476,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:5",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:5"
									},
									"returnParameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "569:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1478,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:5"
									},
									"scope": 1490,
									"src": "528:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1482,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:5",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1489,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "703:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:5"
									},
									"returnParameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "743:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1486,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:5"
									},
									"scope": 1490,
									"src": "685:73:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1491,
							"src": "297:463:5",
							"usedErrors": []
						}
					],
					"src": "112:649:5"
				},
				"id": 5
			},
			".deps/npm/@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1820
						]
					},
					"id": 1821,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1492,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1493,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1820,
							"linearizedBaseContracts": [
								1820
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1507,
										"nodeType": "Block",
										"src": "1241:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1501,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1496,
																"src": "1465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1502,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1503,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1500,
												"id": 1506,
												"nodeType": "Return",
												"src": "1458:30:6"
											}
										]
									},
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "1195:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:6"
									},
									"returnParameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "1235:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1498,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:6"
									},
									"scope": 1820,
									"src": "1175:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1541,
										"nodeType": "Block",
										"src": "2483:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1519,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1820",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1820",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1518,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1517,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1520,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1522,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1513,
																"src": "2526:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1524,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1516,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1526,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:6"
											},
											{
												"assignments": [
													1528,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1528,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1541,
														"src": "2578:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1527,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1535,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1533,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1529,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "2596:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1530,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1532,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1531,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1513,
																"src": "2618:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1537,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1528,
															"src": "2647:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1536,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1540,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:6"
											}
										]
									},
									"documentation": {
										"id": 1509,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "2431:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "2458:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:6"
									},
									"returnParameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:6"
									},
									"scope": 1820,
									"src": "2412:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1559,
										"nodeType": "Block",
										"src": "3555:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1553,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1545,
															"src": "3594:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1554,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1547,
															"src": "3602:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1552,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1600,
															1644
														],
														"referencedDeclaration": 1644,
														"src": "3572:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1551,
												"id": 1558,
												"nodeType": "Return",
												"src": "3565:79:6"
											}
										]
									},
									"documentation": {
										"id": 1543,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1545,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "3504:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1546,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:6"
									},
									"returnParameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "3541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1549,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:6"
									},
									"scope": 1820,
									"src": "3466:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1579,
										"nodeType": "Block",
										"src": "4020:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1573,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1563,
															"src": "4059:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1574,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "4067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1576,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1567,
															"src": "4076:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1572,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1600,
															1644
														],
														"referencedDeclaration": 1644,
														"src": "4037:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1571,
												"id": 1578,
												"nodeType": "Return",
												"src": "4030:59:6"
											}
										]
									},
									"documentation": {
										"id": 1561,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1580,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1563,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "3904:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "3928:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "3955:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1566,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:6"
									},
									"returnParameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "4006:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:6"
									},
									"scope": 1820,
									"src": "3873:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1599,
										"nodeType": "Block",
										"src": "4601:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1593,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1594,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1585,
															"src": "4648:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1595,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1587,
															"src": "4654:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1592,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1600,
															1644
														],
														"referencedDeclaration": 1644,
														"src": "4618:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1591,
												"id": 1598,
												"nodeType": "Return",
												"src": "4611:94:6"
											}
										]
									},
									"documentation": {
										"id": 1581,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "4498:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "4522:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1584,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "4549:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:6"
									},
									"returnParameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "4587:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1589,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:6"
									},
									"scope": 1820,
									"src": "4458:254:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1643,
										"nodeType": "Block",
										"src": "5139:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1617,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1820",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1820",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1616,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1615,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1618,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1619,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1620,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1607,
																"src": "5182:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1614,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1624,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:6"
											},
											{
												"assignments": [
													1626,
													1628
												],
												"declarations": [
													{
														"constant": false,
														"id": 1626,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1643,
														"src": "5241:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1625,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1628,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1643,
														"src": "5255:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1627,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1635,
												"initialValue": {
													"arguments": [
														{
															"id": 1633,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1605,
															"src": "5308:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1629,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1603,
																"src": "5282:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1632,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1631,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1607,
																"src": "5301:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1637,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1603,
															"src": "5357:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1638,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1626,
															"src": "5365:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1639,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1628,
															"src": "5374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1640,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1609,
															"src": "5386:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1636,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1775,
														"src": "5330:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1613,
												"id": 1642,
												"nodeType": "Return",
												"src": "5323:76:6"
											}
										]
									},
									"documentation": {
										"id": 1601,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1644,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1644,
												"src": "5000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1644,
												"src": "5024:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1604,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1644,
												"src": "5051:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1644,
												"src": "5074:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1608,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:6"
									},
									"returnParameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1644,
												"src": "5125:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:6"
									},
									"scope": 1820,
									"src": "4960:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1660,
										"nodeType": "Block",
										"src": "5683:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1655,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "5719:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1656,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1649,
															"src": "5727:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1657,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1654,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1661,
															1690
														],
														"referencedDeclaration": 1690,
														"src": "5700:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1653,
												"id": 1659,
												"nodeType": "Return",
												"src": "5693:80:6"
											}
										]
									},
									"documentation": {
										"id": 1645,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "5611:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1649,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "5627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1648,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:6"
									},
									"returnParameters": {
										"id": 1653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1652,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "5669:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1651,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:6"
									},
									"scope": 1820,
									"src": "5583:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1689,
										"nodeType": "Block",
										"src": "6122:168:6",
										"statements": [
											{
												"assignments": [
													1674,
													1676
												],
												"declarations": [
													{
														"constant": false,
														"id": 1674,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1689,
														"src": "6133:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1673,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1676,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1689,
														"src": "6147:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1675,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1681,
												"initialValue": {
													"arguments": [
														{
															"id": 1679,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "6192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1677,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1664,
															"src": "6174:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1678,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1683,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1664,
															"src": "6241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1684,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1674,
															"src": "6249:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1685,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "6258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1686,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1668,
															"src": "6270:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1682,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1775,
														"src": "6214:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1672,
												"id": 1688,
												"nodeType": "Return",
												"src": "6207:76:6"
											}
										]
									},
									"documentation": {
										"id": 1662,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "6001:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "6025:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1665,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "6052:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1667,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:6"
									},
									"returnParameters": {
										"id": 1672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "6108:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:6"
									},
									"scope": 1820,
									"src": "5964:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1706,
										"nodeType": "Block",
										"src": "6566:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1701,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1693,
															"src": "6604:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1702,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1695,
															"src": "6612:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1700,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1707,
															1736
														],
														"referencedDeclaration": 1736,
														"src": "6583:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1699,
												"id": 1705,
												"nodeType": "Return",
												"src": "6576:84:6"
											}
										]
									},
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "6499:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "6515:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1694,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:6"
									},
									"returnParameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "6552:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1697,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:6"
									},
									"scope": 1820,
									"src": "6469:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1735,
										"nodeType": "Block",
										"src": "7008:170:6",
										"statements": [
											{
												"assignments": [
													1720,
													1722
												],
												"declarations": [
													{
														"constant": false,
														"id": 1720,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1735,
														"src": "7019:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1719,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1722,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1735,
														"src": "7033:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1721,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1727,
												"initialValue": {
													"arguments": [
														{
															"id": 1725,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1712,
															"src": "7080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1723,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1710,
															"src": "7060:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1729,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1710,
															"src": "7129:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1730,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1720,
															"src": "7137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1731,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1722,
															"src": "7146:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1732,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1714,
															"src": "7158:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1728,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1775,
														"src": "7102:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1718,
												"id": 1734,
												"nodeType": "Return",
												"src": "7095:76:6"
											}
										]
									},
									"documentation": {
										"id": 1708,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1736,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "6892:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "6916:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1711,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "6943:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1713,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:6"
									},
									"returnParameters": {
										"id": 1718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "6994:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1716,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:6"
									},
									"scope": 1820,
									"src": "6853:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1774,
										"nodeType": "Block",
										"src": "7660:434:6",
										"statements": [
											{
												"condition": {
													"id": 1750,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1741,
													"src": "7674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1772,
													"nodeType": "Block",
													"src": "8030:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1768,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1743,
																		"src": "8052:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1769,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1745,
																		"src": "8064:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1767,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1819,
																	"src": "8044:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1771,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:6"
														}
													]
												},
												"id": 1773,
												"nodeType": "IfStatement",
												"src": "7670:418:6",
												"trueBody": {
													"id": 1766,
													"nodeType": "Block",
													"src": "7683:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1751,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1743,
																		"src": "7701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1763,
															"nodeType": "IfStatement",
															"src": "7697:286:6",
															"trueBody": {
																"id": 1762,
																"nodeType": "Block",
																"src": "7725:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1757,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1739,
																							"src": "7927:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1756,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1508,
																						"src": "7916:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1758,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1759,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1755,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1761,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1764,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1743,
																"src": "8003:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1749,
															"id": 1765,
															"nodeType": "Return",
															"src": "7996:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1737,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1739,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "7511:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1738,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "7535:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1740,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "7557:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1742,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "7590:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1744,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:6"
									},
									"returnParameters": {
										"id": 1749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1748,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "7646:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1747,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:6"
									},
									"scope": 1820,
									"src": "7466:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1798,
										"nodeType": "Block",
										"src": "8475:135:6",
										"statements": [
											{
												"condition": {
													"id": 1787,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1778,
													"src": "8489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1796,
													"nodeType": "Block",
													"src": "8546:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1792,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1780,
																		"src": "8568:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1793,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1782,
																		"src": "8580:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1791,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1819,
																	"src": "8560:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1795,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:6"
														}
													]
												},
												"id": 1797,
												"nodeType": "IfStatement",
												"src": "8485:119:6",
												"trueBody": {
													"id": 1790,
													"nodeType": "Block",
													"src": "8498:42:6",
													"statements": [
														{
															"expression": {
																"id": 1788,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1780,
																"src": "8519:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1786,
															"id": 1789,
															"nodeType": "Return",
															"src": "8512:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1776,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "8350:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1777,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "8372:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1779,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1782,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "8405:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1781,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:6"
									},
									"returnParameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "8461:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1784,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:6"
									},
									"scope": 1820,
									"src": "8315:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1818,
										"nodeType": "Block",
										"src": "8699:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1806,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1801,
															"src": "8775:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1807,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1808,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1816,
													"nodeType": "Block",
													"src": "9105:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1813,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "9126:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1812,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1815,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:6"
														}
													]
												},
												"id": 1817,
												"nodeType": "IfStatement",
												"src": "8771:379:6",
												"trueBody": {
													"id": 1811,
													"nodeType": "Block",
													"src": "8798:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1801,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 1801,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:6",
																	"valueSize": 1
																}
															],
															"id": 1810,
															"nodeType": "InlineAssembly",
															"src": "8947:142:6"
														}
													]
												}
											}
										]
									},
									"id": 1819,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "8633:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1800,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "8658:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1802,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:6"
									},
									"returnParameters": {
										"id": 1805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:6"
									},
									"scope": 1820,
									"src": "8616:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1821,
							"src": "194:8964:6",
							"usedErrors": []
						}
					],
					"src": "101:9058:6"
				},
				"id": 6
			},
			".deps/npm/@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1842
						]
					},
					"id": 1843,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1822,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1823,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1842,
							"linearizedBaseContracts": [
								1842
							],
							"name": "Context",
							"nameLocation": "626:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1831,
										"nodeType": "Block",
										"src": "702:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1828,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1827,
												"id": 1830,
												"nodeType": "Return",
												"src": "712:17:7"
											}
										]
									},
									"id": 1832,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:7"
									},
									"returnParameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1832,
												"src": "693:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:7"
									},
									"scope": 1842,
									"src": "640:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1840,
										"nodeType": "Block",
										"src": "809:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1837,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1836,
												"id": 1839,
												"nodeType": "Return",
												"src": "819:15:7"
											}
										]
									},
									"id": 1841,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:7"
									},
									"returnParameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "793:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1834,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:7"
									},
									"scope": 1842,
									"src": "742:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1843,
							"src": "608:235:7",
							"usedErrors": []
						}
					],
					"src": "86:758:7"
				},
				"id": 7
			},
			".deps/npm/@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							2918
						],
						"Strings": [
							2017
						]
					},
					"id": 2018,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1844,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:8"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1845,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2018,
							"sourceUnit": 2919,
							"src": "126:25:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1846,
								"nodeType": "StructuredDocumentation",
								"src": "153:34:8",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2017,
							"linearizedBaseContracts": [
								2017
							],
							"name": "Strings",
							"nameLocation": "196:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1849,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "235:8:8",
									"nodeType": "VariableDeclaration",
									"scope": 2017,
									"src": "210:54:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1847,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "210:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1848,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:18:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1852,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "293:15:8",
									"nodeType": "VariableDeclaration",
									"scope": 2017,
									"src": "270:43:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1850,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "270:5:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1851,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:2:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1899,
										"nodeType": "Block",
										"src": "486:625:8",
										"statements": [
											{
												"id": 1898,
												"nodeType": "UncheckedBlock",
												"src": "496:609:8",
												"statements": [
													{
														"assignments": [
															1861
														],
														"declarations": [
															{
																"constant": false,
																"id": 1861,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "528:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1898,
																"src": "520:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1860,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "520:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1868,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1864,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1855,
																		"src": "548:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1862,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2918,
																		"src": "537:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2918_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2755,
																	"src": "537:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "537:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1866,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "557:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "537:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "520:38:8"
													},
													{
														"assignments": [
															1870
														],
														"declarations": [
															{
																"constant": false,
																"id": 1870,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "586:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1898,
																"src": "572:20:8",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1869,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "572:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1875,
														"initialValue": {
															"arguments": [
																{
																	"id": 1873,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1861,
																	"src": "606:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1872,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "595:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1871,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "599:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1874,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "595:18:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "572:41:8"
													},
													{
														"assignments": [
															1877
														],
														"declarations": [
															{
																"constant": false,
																"id": 1877,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "635:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1898,
																"src": "627:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1876,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "627:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1878,
														"nodeType": "VariableDeclarationStatement",
														"src": "627:11:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "708:67:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "726:35:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "749:2:8",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "753:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:15:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "733:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "733:28:8"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "726:3:8"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 1870,
																"isOffset": false,
																"isSlot": false,
																"src": "737:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1861,
																"isOffset": false,
																"isSlot": false,
																"src": "753:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1877,
																"isOffset": false,
																"isSlot": false,
																"src": "726:3:8",
																"valueSize": 1
															}
														],
														"id": 1879,
														"nodeType": "InlineAssembly",
														"src": "699:76:8"
													},
													{
														"body": {
															"id": 1894,
															"nodeType": "Block",
															"src": "801:267:8",
															"statements": [
																{
																	"expression": {
																		"id": 1882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "819:5:8",
																		"subExpression": {
																			"id": 1881,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1877,
																			"src": "819:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1883,
																	"nodeType": "ExpressionStatement",
																	"src": "819:5:8"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "902:84:8",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "932:3:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "946:5:8"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "953:2:8",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "942:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "942:14:8"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "958:8:8"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "937:4:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "937:30:8"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "924:7:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "924:44:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "924:44:8"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "istanbul",
																	"externalReferences": [
																		{
																			"declaration": 1849,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "958:8:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1877,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "932:3:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1855,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "946:5:8",
																			"valueSize": 1
																		}
																	],
																	"id": 1884,
																	"nodeType": "InlineAssembly",
																	"src": "893:93:8"
																},
																{
																	"expression": {
																		"id": 1887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1885,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1855,
																			"src": "1003:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1012:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1003:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1888,
																	"nodeType": "ExpressionStatement",
																	"src": "1003:11:8"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1889,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1855,
																			"src": "1036:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1890,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1045:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1036:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1893,
																	"nodeType": "IfStatement",
																	"src": "1032:21:8",
																	"trueBody": {
																		"id": 1892,
																		"nodeType": "Break",
																		"src": "1048:5:8"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "795:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1895,
														"nodeType": "WhileStatement",
														"src": "788:280:8"
													},
													{
														"expression": {
															"id": 1896,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1870,
															"src": "1088:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1859,
														"id": 1897,
														"nodeType": "Return",
														"src": "1081:13:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1853,
										"nodeType": "StructuredDocumentation",
										"src": "320:90:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1900,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "424:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1855,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "441:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1900,
												"src": "433:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1854,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:15:8"
									},
									"returnParameters": {
										"id": 1859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1900,
												"src": "471:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1857,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "471:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:15:8"
									},
									"scope": 2017,
									"src": "415:696:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1919,
										"nodeType": "Block",
										"src": "1290:100:8",
										"statements": [
											{
												"id": 1918,
												"nodeType": "UncheckedBlock",
												"src": "1300:84:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1909,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1903,
																	"src": "1343:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1912,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1903,
																				"src": "1362:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1910,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2918,
																				"src": "1350:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2918_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1911,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2878,
																			"src": "1350:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1913,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1350:18:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1914,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1371:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1350:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1908,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1920,
																	1996,
																	2016
																],
																"referencedDeclaration": 1996,
																"src": "1331:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1331:42:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1907,
														"id": 1917,
														"nodeType": "Return",
														"src": "1324:49:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1901,
										"nodeType": "StructuredDocumentation",
										"src": "1117:94:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1225:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1245:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "1237:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:15:8"
									},
									"returnParameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "1275:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1905,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1275:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:8"
									},
									"scope": 2017,
									"src": "1216:174:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1995,
										"nodeType": "Block",
										"src": "1603:347:8",
										"statements": [
											{
												"assignments": [
													1931
												],
												"declarations": [
													{
														"constant": false,
														"id": 1931,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1626:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1995,
														"src": "1613:19:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1930,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1613:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1940,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1934,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1645:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1935,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1925,
																	"src": "1649:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1645:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1658:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1645:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1933,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1635:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1932,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1639:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1635:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1613:47:8"
											},
											{
												"expression": {
													"id": 1945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1941,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1931,
															"src": "1670:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1943,
														"indexExpression": {
															"hexValue": "30",
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1677:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1670:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1944,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1682:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1670:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1946,
												"nodeType": "ExpressionStatement",
												"src": "1670:15:8"
											},
											{
												"expression": {
													"id": 1951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1947,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1931,
															"src": "1695:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1949,
														"indexExpression": {
															"hexValue": "31",
															"id": 1948,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1702:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1695:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1950,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1707:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1695:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1952,
												"nodeType": "ExpressionStatement",
												"src": "1695:15:8"
											},
											{
												"body": {
													"id": 1981,
													"nodeType": "Block",
													"src": "1765:83:8",
													"statements": [
														{
															"expression": {
																"id": 1975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1967,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1931,
																		"src": "1779:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1969,
																	"indexExpression": {
																		"id": 1968,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1954,
																		"src": "1786:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1779:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1970,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1849,
																		"src": "1791:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1974,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1973,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1971,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1923,
																			"src": "1800:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1972,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1808:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1800:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1791:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1779:33:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1976,
															"nodeType": "ExpressionStatement",
															"src": "1779:33:8"
														},
														{
															"expression": {
																"id": 1979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1977,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1923,
																	"src": "1826:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1836:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1826:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1980,
															"nodeType": "ExpressionStatement",
															"src": "1826:11:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1961,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1954,
														"src": "1753:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1962,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1753:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1982,
												"initializationExpression": {
													"assignments": [
														1954
													],
													"declarations": [
														{
															"constant": false,
															"id": 1954,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1733:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1982,
															"src": "1725:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1953,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1725:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1960,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1737:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1956,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1925,
																"src": "1741:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1737:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1750:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1737:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1725:26:8"
												},
												"loopExpression": {
													"expression": {
														"id": 1965,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1760:3:8",
														"subExpression": {
															"id": 1964,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1954,
															"src": "1762:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1966,
													"nodeType": "ExpressionStatement",
													"src": "1760:3:8"
												},
												"nodeType": "ForStatement",
												"src": "1720:128:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1984,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1923,
																"src": "1865:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1985,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1874:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1865:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1987,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1877:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1983,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1857:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1857:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1989,
												"nodeType": "ExpressionStatement",
												"src": "1857:55:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1992,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1931,
															"src": "1936:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1991,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1929:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1990,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1929:6:8",
															"typeDescriptions": {}
														}
													},
													"id": 1993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:14:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1929,
												"id": 1994,
												"nodeType": "Return",
												"src": "1922:21:8"
											}
										]
									},
									"documentation": {
										"id": 1921,
										"nodeType": "StructuredDocumentation",
										"src": "1396:112:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1996,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1522:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1542:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "1534:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1557:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "1549:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:31:8"
									},
									"returnParameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "1588:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1927,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1588:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1587:15:8"
									},
									"scope": 2017,
									"src": "1513:437:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2015,
										"nodeType": "Block",
										"src": "2175:76:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2009,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1999,
																			"src": "2220:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2008,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2212:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2007,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2212:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2010,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2212:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2006,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2204:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2005,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2204:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2204:22:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2012,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1852,
															"src": "2228:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2004,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1920,
															1996,
															2016
														],
														"referencedDeclaration": 1996,
														"src": "2192:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2192:52:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2003,
												"id": 2014,
												"nodeType": "Return",
												"src": "2185:59:8"
											}
										]
									},
									"documentation": {
										"id": 1997,
										"nodeType": "StructuredDocumentation",
										"src": "1956:141:8",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 2016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2111:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1999,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2131:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "2123:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2123:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2122:14:8"
									},
									"returnParameters": {
										"id": 2003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2002,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "2160:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2001,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2160:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:15:8"
									},
									"scope": 2017,
									"src": "2102:149:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2018,
							"src": "188:2065:8",
							"usedErrors": []
						}
					],
					"src": "101:2153:8"
				},
				"id": 8
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							2041
						],
						"IERC165": [
							2053
						]
					},
					"id": 2042,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2019,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:9"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 2020,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2042,
							"sourceUnit": 2054,
							"src": "124:23:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2022,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2053,
										"src": "754:7:9"
									},
									"id": 2023,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:9"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2021,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:9",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 2041,
							"linearizedBaseContracts": [
								2041,
								2053
							],
							"name": "ERC165",
							"nameLocation": "744:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2052
									],
									"body": {
										"id": 2039,
										"nodeType": "Block",
										"src": "920:64:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 2037,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2032,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2026,
														"src": "937:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2034,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2053,
																	"src": "957:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$2053_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$2053_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 2033,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2035,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$2053",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 2036,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2031,
												"id": 2038,
												"nodeType": "Return",
												"src": "930:47:9"
											}
										]
									},
									"documentation": {
										"id": 2024,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 2040,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2028,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:9"
									},
									"parameters": {
										"id": 2027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 2040,
												"src": "856:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2025,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:9"
									},
									"returnParameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2040,
												"src": "914:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2029,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:9"
									},
									"scope": 2041,
									"src": "829:155:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2042,
							"src": "726:260:9",
							"usedErrors": []
						}
					],
					"src": "99:888:9"
				},
				"id": 9
			},
			".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							2053
						]
					},
					"id": 2054,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2043,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2044,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:10",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 2053,
							"linearizedBaseContracts": [
								2053
							],
							"name": "IERC165",
							"nameLocation": "415:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2045,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:10",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 2052,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "801:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2046,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:10"
									},
									"returnParameters": {
										"id": 2051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "844:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2049,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:10"
									},
									"scope": 2053,
									"src": "774:76:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2054,
							"src": "405:447:10",
							"usedErrors": []
						}
					],
					"src": "100:753:10"
				},
				"id": 10
			},
			".deps/npm/@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							2918
						]
					},
					"id": 2919,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2055,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2056,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:11",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2918,
							"linearizedBaseContracts": [
								2918
							],
							"name": "Math",
							"nameLocation": "210:4:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 2060,
									"members": [
										{
											"id": 2057,
											"name": "Down",
											"nameLocation": "245:4:11",
											"nodeType": "EnumValue",
											"src": "245:4:11"
										},
										{
											"id": 2058,
											"name": "Up",
											"nameLocation": "287:2:11",
											"nodeType": "EnumValue",
											"src": "287:2:11"
										},
										{
											"id": 2059,
											"name": "Zero",
											"nameLocation": "318:4:11",
											"nodeType": "EnumValue",
											"src": "318:4:11"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:11",
									"nodeType": "EnumDefinition",
									"src": "221:122:11"
								},
								{
									"body": {
										"id": 2077,
										"nodeType": "Block",
										"src": "480:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2072,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2070,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2063,
															"src": "497:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2071,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2065,
															"src": "501:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2074,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2065,
														"src": "509:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:11",
													"trueExpression": {
														"id": 2073,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2063,
														"src": "505:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2069,
												"id": 2076,
												"nodeType": "Return",
												"src": "490:20:11"
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:11",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2078,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2078,
												"src": "426:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2062,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2078,
												"src": "437:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:11"
									},
									"returnParameters": {
										"id": 2069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2068,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2078,
												"src": "471:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2067,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:11"
									},
									"scope": 2918,
									"src": "413:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2095,
										"nodeType": "Block",
										"src": "655:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2090,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2088,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2081,
															"src": "672:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2089,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "676:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2092,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2083,
														"src": "684:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:11",
													"trueExpression": {
														"id": 2091,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2081,
														"src": "680:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2087,
												"id": 2094,
												"nodeType": "Return",
												"src": "665:20:11"
											}
										]
									},
									"documentation": {
										"id": 2079,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:11",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "612:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:11"
									},
									"returnParameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "646:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:11"
									},
									"scope": 2918,
									"src": "588:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2118,
										"nodeType": "Block",
										"src": "876:82:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2106,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2099,
																	"src": "931:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2107,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2101,
																	"src": "935:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2109,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2115,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2110,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2099,
																		"src": "941:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2111,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2101,
																		"src": "945:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2113,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2105,
												"id": 2117,
												"nodeType": "Return",
												"src": "923:28:11"
											}
										]
									},
									"documentation": {
										"id": 2097,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:11",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2119,
												"src": "822:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2119,
												"src": "833:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:11"
									},
									"returnParameters": {
										"id": 2105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2119,
												"src": "867:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:11"
									},
									"scope": 2918,
									"src": "805:153:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2143,
										"nodeType": "Block",
										"src": "1228:123:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2131,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2129,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2122,
															"src": "1316:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2140,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2133,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2122,
																			"src": "1330:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2136,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2137,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2124,
																"src": "1339:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:11",
													"trueExpression": {
														"hexValue": "30",
														"id": 2132,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2128,
												"id": 2142,
												"nodeType": "Return",
												"src": "1309:35:11"
											}
										]
									},
									"documentation": {
										"id": 2120,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:11",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 2144,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2122,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1174:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2124,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1185:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:11"
									},
									"returnParameters": {
										"id": 2128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1219:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:11"
									},
									"scope": 2918,
									"src": "1157:194:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2265,
										"nodeType": "Block",
										"src": "1795:3797:11",
										"statements": [
											{
												"id": 2264,
												"nodeType": "UncheckedBlock",
												"src": "1805:3781:11",
												"statements": [
													{
														"assignments": [
															2157
														],
														"declarations": [
															{
																"constant": false,
																"id": 2157,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2134:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2264,
																"src": "2126:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2156,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2126:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2158,
														"nodeType": "VariableDeclarationStatement",
														"src": "2126:13:11"
													},
													{
														"assignments": [
															2160
														],
														"declarations": [
															{
																"constant": false,
																"id": 2160,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2206:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2264,
																"src": "2198:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2159,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2198:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2161,
														"nodeType": "VariableDeclarationStatement",
														"src": "2198:13:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2278:157:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2296:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2313:1:11"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2316:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2323:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2319:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2319:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2306:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:11"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2300:2:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2343:18:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:11"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2359:1:11"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:9:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2343:5:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2378:43:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2395:2:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2399:5:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2391:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2391:14:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2410:2:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2414:5:11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2407:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:13:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2387:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2387:34:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2378:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "2343:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "2399:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "2414:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2160,
																"isOffset": false,
																"isSlot": false,
																"src": "2378:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2147,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2147,
																"isOffset": false,
																"isSlot": false,
																"src": "2356:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2149,
																"isOffset": false,
																"isSlot": false,
																"src": "2316:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2149,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:1:11",
																"valueSize": 1
															}
														],
														"id": 2162,
														"nodeType": "InlineAssembly",
														"src": "2269:166:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2163,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2160,
																"src": "2516:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2164,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2525:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2516:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2171,
														"nodeType": "IfStatement",
														"src": "2512:75:11",
														"trueBody": {
															"id": 2170,
															"nodeType": "Block",
															"src": "2528:59:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2166,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2157,
																			"src": "2553:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2167,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2151,
																			"src": "2561:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2553:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2155,
																	"id": 2169,
																	"nodeType": "Return",
																	"src": "2546:26:11"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2173,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "2697:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 2174,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2160,
																		"src": "2711:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2697:19:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 2172,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2689:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 2176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2689:28:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2177,
														"nodeType": "ExpressionStatement",
														"src": "2689:28:11"
													},
													{
														"assignments": [
															2179
														],
														"declarations": [
															{
																"constant": false,
																"id": 2179,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "2981:9:11",
																"nodeType": "VariableDeclaration",
																"scope": 2264,
																"src": "2973:17:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2178,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2973:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2180,
														"nodeType": "VariableDeclarationStatement",
														"src": "2973:17:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3013:291:11",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3082:38:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3102:1:11"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3105:1:11"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3108:11:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3095:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3095:25:11"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3082:9:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3202:41:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3215:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3225:9:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3236:5:11"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3222:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3222:20:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3211:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3211:32:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3202:5:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3260:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3273:5:11"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3280:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3269:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3269:21:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3260:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 2151,
																"isOffset": false,
																"isSlot": false,
																"src": "3108:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "3260:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "3273:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2160,
																"isOffset": false,
																"isSlot": false,
																"src": "3202:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2160,
																"isOffset": false,
																"isSlot": false,
																"src": "3215:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2179,
																"isOffset": false,
																"isSlot": false,
																"src": "3082:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2179,
																"isOffset": false,
																"isSlot": false,
																"src": "3225:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2179,
																"isOffset": false,
																"isSlot": false,
																"src": "3280:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2147,
																"isOffset": false,
																"isSlot": false,
																"src": "3102:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2149,
																"isOffset": false,
																"isSlot": false,
																"src": "3105:1:11",
																"valueSize": 1
															}
														],
														"id": 2181,
														"nodeType": "InlineAssembly",
														"src": "3004:300:11"
													},
													{
														"assignments": [
															2183
														],
														"declarations": [
															{
																"constant": false,
																"id": 2183,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3619:4:11",
																"nodeType": "VariableDeclaration",
																"scope": 2264,
																"src": "3611:12:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2182,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3611:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2191,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2190,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2184,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2151,
																"src": "3626:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3641:12:11",
																			"subExpression": {
																				"id": 2185,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2151,
																				"src": "3642:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2187,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3656:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3641:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2189,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3640:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3626:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3611:47:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3681:362:11",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3746:37:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3765:11:11"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3778:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3761:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3761:22:11"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3746:11:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3850:25:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3863:5:11"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3870:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3859:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3859:16:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3850:5:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3990:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4010:1:11",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4013:4:11"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4006:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4006:12:11"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4020:4:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4002:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4002:23:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4027:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3998:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3998:31:11"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "3990:4:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 2151,
																"isOffset": false,
																"isSlot": false,
																"src": "3746:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2151,
																"isOffset": false,
																"isSlot": false,
																"src": "3765:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "3850:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2157,
																"isOffset": false,
																"isSlot": false,
																"src": "3863:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2183,
																"isOffset": false,
																"isSlot": false,
																"src": "3778:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2183,
																"isOffset": false,
																"isSlot": false,
																"src": "3870:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2183,
																"isOffset": false,
																"isSlot": false,
																"src": "3990:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2183,
																"isOffset": false,
																"isSlot": false,
																"src": "4013:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2183,
																"isOffset": false,
																"isSlot": false,
																"src": "4020:4:11",
																"valueSize": 1
															}
														],
														"id": 2192,
														"nodeType": "InlineAssembly",
														"src": "3672:371:11"
													},
													{
														"expression": {
															"id": 2197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2193,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2157,
																"src": "4109:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2194,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2160,
																	"src": "4118:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2195,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2183,
																	"src": "4126:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4118:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4109:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2198,
														"nodeType": "ExpressionStatement",
														"src": "4109:21:11"
													},
													{
														"assignments": [
															2200
														],
														"declarations": [
															{
																"constant": false,
																"id": 2200,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4456:7:11",
																"nodeType": "VariableDeclaration",
																"scope": 2264,
																"src": "4448:15:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2199,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4448:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2207,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2203,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2201,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4467:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2202,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2151,
																			"src": "4471:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4467:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2204,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4466:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4486:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4466:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4448:39:11"
													},
													{
														"expression": {
															"id": 2214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2208,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "4704:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2213,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2209,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4715:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2212,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2210,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "4719:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2211,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "4733:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4719:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4715:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4704:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2215,
														"nodeType": "ExpressionStatement",
														"src": "4704:36:11"
													},
													{
														"expression": {
															"id": 2222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2216,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "4773:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4784:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2220,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2218,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "4788:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2219,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "4802:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4788:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4784:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4773:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2223,
														"nodeType": "ExpressionStatement",
														"src": "4773:36:11"
													},
													{
														"expression": {
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2224,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "4843:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2229,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4854:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2226,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "4858:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2227,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "4872:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4858:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4854:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4843:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2231,
														"nodeType": "ExpressionStatement",
														"src": "4843:36:11"
													},
													{
														"expression": {
															"id": 2238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2232,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "4913:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2233,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4924:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2234,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "4928:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2235,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "4942:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4928:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4924:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4913:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2239,
														"nodeType": "ExpressionStatement",
														"src": "4913:36:11"
													},
													{
														"expression": {
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2240,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "4983:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2241,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4994:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2242,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "4998:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2243,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "5012:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4998:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4994:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4983:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2247,
														"nodeType": "ExpressionStatement",
														"src": "4983:36:11"
													},
													{
														"expression": {
															"id": 2254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2248,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2200,
																"src": "5054:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5065:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2250,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2151,
																		"src": "5069:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2251,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2200,
																		"src": "5083:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5069:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5065:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5054:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2255,
														"nodeType": "ExpressionStatement",
														"src": "5054:36:11"
													},
													{
														"expression": {
															"id": 2260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2256,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2154,
																"src": "5524:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2259,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2257,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2157,
																	"src": "5533:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2258,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2200,
																	"src": "5541:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5533:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5524:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2261,
														"nodeType": "ExpressionStatement",
														"src": "5524:24:11"
													},
													{
														"expression": {
															"id": 2262,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2154,
															"src": "5569:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2155,
														"id": 2263,
														"nodeType": "Return",
														"src": "5562:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2145,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:11",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 2266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1700:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "1692:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1719:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "1711:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1738:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "1730:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:73:11"
									},
									"returnParameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1787:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "1779:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:16:11"
									},
									"scope": 2918,
									"src": "1667:3925:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2309,
										"nodeType": "Block",
										"src": "5872:189:11",
										"statements": [
											{
												"assignments": [
													2282
												],
												"declarations": [
													{
														"constant": false,
														"id": 2282,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5890:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2309,
														"src": "5882:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2281,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5882:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2288,
												"initialValue": {
													"arguments": [
														{
															"id": 2284,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2269,
															"src": "5906:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2285,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2271,
															"src": "5909:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2286,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2273,
															"src": "5912:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2283,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2266,
															2310
														],
														"referencedDeclaration": 2266,
														"src": "5899:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5899:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5882:42:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$2060",
															"typeString": "enum Math.Rounding"
														},
														"id": 2292,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2289,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "5938:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2060",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2290,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "5950:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2060_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 2291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2058,
															"src": "5950:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2060",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "5938:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2294,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2269,
																	"src": "5972:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2295,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2271,
																	"src": "5975:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2296,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2273,
																	"src": "5978:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2293,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5965:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5965:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5993:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5965:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5938:56:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2306,
												"nodeType": "IfStatement",
												"src": "5934:98:11",
												"trueBody": {
													"id": 2305,
													"nodeType": "Block",
													"src": "5996:36:11",
													"statements": [
														{
															"expression": {
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2301,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2282,
																	"src": "6010:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6020:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6010:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2304,
															"nodeType": "ExpressionStatement",
															"src": "6010:11:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2307,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2282,
													"src": "6048:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2280,
												"id": 2308,
												"nodeType": "Return",
												"src": "6041:13:11"
											}
										]
									},
									"documentation": {
										"id": 2267,
										"nodeType": "StructuredDocumentation",
										"src": "5598:121:11",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5733:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5757:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2310,
												"src": "5749:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2271,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5776:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2310,
												"src": "5768:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2273,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5795:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2310,
												"src": "5787:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2276,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5825:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2310,
												"src": "5816:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2060",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2275,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2274,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2060,
														"src": "5816:8:11"
													},
													"referencedDeclaration": 2060,
													"src": "5816:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2060",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5739:100:11"
									},
									"returnParameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2310,
												"src": "5863:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5863:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5862:9:11"
									},
									"scope": 2918,
									"src": "5724:337:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2421,
										"nodeType": "Block",
										"src": "6337:1585:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2318,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2313,
														"src": "6351:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2319,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6356:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6351:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2324,
												"nodeType": "IfStatement",
												"src": "6347:45:11",
												"trueBody": {
													"id": 2323,
													"nodeType": "Block",
													"src": "6359:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2321,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6380:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2317,
															"id": 2322,
															"nodeType": "Return",
															"src": "6373:8:11"
														}
													]
												}
											},
											{
												"assignments": [
													2326
												],
												"declarations": [
													{
														"constant": false,
														"id": 2326,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7079:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2421,
														"src": "7071:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2325,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7071:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2335,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2327,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7088:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2329,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2313,
																			"src": "7099:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2328,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2590,
																			2626
																		],
																		"referencedDeclaration": 2590,
																		"src": "7094:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7094:7:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7105:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7094:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2333,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7093:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7088:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7071:36:11"
											},
											{
												"id": 2420,
												"nodeType": "UncheckedBlock",
												"src": "7508:408:11",
												"statements": [
													{
														"expression": {
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2336,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7532:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2344,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2337,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7542:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2340,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2338,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7551:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2339,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7555:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7551:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7542:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2342,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7541:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7566:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7541:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7532:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2346,
														"nodeType": "ExpressionStatement",
														"src": "7532:35:11"
													},
													{
														"expression": {
															"id": 2356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2347,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7581:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2348,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7591:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2351,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2349,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7600:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2350,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7604:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7600:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7591:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2353,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7590:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7615:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7590:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7581:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2357,
														"nodeType": "ExpressionStatement",
														"src": "7581:35:11"
													},
													{
														"expression": {
															"id": 2367,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2358,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7630:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2363,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2359,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7640:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2362,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2360,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7649:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2361,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7653:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7649:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7640:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2364,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7639:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7664:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7639:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7630:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2368,
														"nodeType": "ExpressionStatement",
														"src": "7630:35:11"
													},
													{
														"expression": {
															"id": 2378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2369,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7679:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2374,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2370,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7689:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2373,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2371,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7698:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2372,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7702:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7698:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7689:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2375,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7688:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7713:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7688:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7679:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2379,
														"nodeType": "ExpressionStatement",
														"src": "7679:35:11"
													},
													{
														"expression": {
															"id": 2389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2380,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7728:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2385,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2381,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7738:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2384,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2382,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7747:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2383,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7751:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7747:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7738:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2386,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7737:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7762:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7737:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7728:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2390,
														"nodeType": "ExpressionStatement",
														"src": "7728:35:11"
													},
													{
														"expression": {
															"id": 2400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2391,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7777:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2392,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7787:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2395,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2393,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7796:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2394,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7800:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7796:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7787:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2397,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7786:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2398,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7811:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7786:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7777:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2401,
														"nodeType": "ExpressionStatement",
														"src": "7777:35:11"
													},
													{
														"expression": {
															"id": 2411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2402,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2326,
																"src": "7826:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2403,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2326,
																				"src": "7836:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2406,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2404,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2313,
																					"src": "7845:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2405,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2326,
																					"src": "7849:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7845:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7836:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2408,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7835:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2409,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7860:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7835:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7826:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2412,
														"nodeType": "ExpressionStatement",
														"src": "7826:35:11"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2414,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2326,
																	"src": "7886:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2415,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2313,
																		"src": "7894:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2416,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2326,
																		"src": "7898:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7894:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2413,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2096,
																"src": "7882:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7882:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2317,
														"id": 2419,
														"nodeType": "Return",
														"src": "7875:30:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2311,
										"nodeType": "StructuredDocumentation",
										"src": "6067:208:11",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6289:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2313,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6302:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "6294:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6294:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6293:11:11"
									},
									"returnParameters": {
										"id": 2317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2316,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "6328:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6327:9:11"
									},
									"scope": 2918,
									"src": "6280:1642:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2457,
										"nodeType": "Block",
										"src": "8098:161:11",
										"statements": [
											{
												"id": 2456,
												"nodeType": "UncheckedBlock",
												"src": "8108:145:11",
												"statements": [
													{
														"assignments": [
															2434
														],
														"declarations": [
															{
																"constant": false,
																"id": 2434,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8140:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2456,
																"src": "8132:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2433,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8132:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2438,
														"initialValue": {
															"arguments": [
																{
																	"id": 2436,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2425,
																	"src": "8154:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2435,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2422,
																	2458
																],
																"referencedDeclaration": 2422,
																"src": "8149:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8149:7:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8132:24:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2439,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2434,
																"src": "8177:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2449,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2060",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2443,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2440,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2428,
																					"src": "8187:8:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2441,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "8199:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2060_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2442,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2058,
																					"src": "8199:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8187:23:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2448,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2446,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2444,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2434,
																						"src": "8214:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2445,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2434,
																						"src": "8223:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8214:15:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2447,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2425,
																					"src": "8232:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8214:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8187:46:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8240:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8187:54:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2450,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8236:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2453,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8186:56:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8177:65:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2432,
														"id": 2455,
														"nodeType": "Return",
														"src": "8170:72:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2423,
										"nodeType": "StructuredDocumentation",
										"src": "7928:89:11",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8031:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2425,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8044:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2458,
												"src": "8036:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8036:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2428,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8056:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2458,
												"src": "8047:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2060",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2427,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2426,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2060,
														"src": "8047:8:11"
													},
													"referencedDeclaration": 2060,
													"src": "8047:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2060",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8035:30:11"
									},
									"returnParameters": {
										"id": 2432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2458,
												"src": "8089:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8088:9:11"
									},
									"scope": 2918,
									"src": "8022:237:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2589,
										"nodeType": "Block",
										"src": "8444:922:11",
										"statements": [
											{
												"assignments": [
													2467
												],
												"declarations": [
													{
														"constant": false,
														"id": 2467,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8462:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2589,
														"src": "8454:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2466,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8454:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2469,
												"initialValue": {
													"hexValue": "30",
													"id": 2468,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8471:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8454:18:11"
											},
											{
												"id": 2586,
												"nodeType": "UncheckedBlock",
												"src": "8482:855:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2470,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "8510:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8519:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8510:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8525:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8510:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2484,
														"nodeType": "IfStatement",
														"src": "8506:99:11",
														"trueBody": {
															"id": 2483,
															"nodeType": "Block",
															"src": "8528:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2477,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2475,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "8546:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2476,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8556:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8546:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2478,
																	"nodeType": "ExpressionStatement",
																	"src": "8546:13:11"
																},
																{
																	"expression": {
																		"id": 2481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2479,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "8577:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8587:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8577:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2482,
																	"nodeType": "ExpressionStatement",
																	"src": "8577:13:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2485,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "8622:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8631:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8622:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2488,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8636:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8622:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2499,
														"nodeType": "IfStatement",
														"src": "8618:96:11",
														"trueBody": {
															"id": 2498,
															"nodeType": "Block",
															"src": "8639:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2492,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2490,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "8657:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2491,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8667:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8657:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2493,
																	"nodeType": "ExpressionStatement",
																	"src": "8657:12:11"
																},
																{
																	"expression": {
																		"id": 2496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2494,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "8687:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2495,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8697:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8687:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2497,
																	"nodeType": "ExpressionStatement",
																	"src": "8687:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2500,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "8731:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2501,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8740:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8731:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2503,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8745:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8731:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2514,
														"nodeType": "IfStatement",
														"src": "8727:96:11",
														"trueBody": {
															"id": 2513,
															"nodeType": "Block",
															"src": "8748:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2507,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2505,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "8766:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2506,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8776:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8766:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2508,
																	"nodeType": "ExpressionStatement",
																	"src": "8766:12:11"
																},
																{
																	"expression": {
																		"id": 2511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2509,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "8796:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2510,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8796:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2512,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2517,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2515,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "8840:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2516,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8849:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8840:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2518,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8854:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8840:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2529,
														"nodeType": "IfStatement",
														"src": "8836:96:11",
														"trueBody": {
															"id": 2528,
															"nodeType": "Block",
															"src": "8857:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2522,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2520,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "8875:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2521,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8885:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8875:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2523,
																	"nodeType": "ExpressionStatement",
																	"src": "8875:12:11"
																},
																{
																	"expression": {
																		"id": 2526,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2524,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "8905:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8915:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8905:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2527,
																	"nodeType": "ExpressionStatement",
																	"src": "8905:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2532,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2530,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "8949:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2531,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8958:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8949:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8962:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8949:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2544,
														"nodeType": "IfStatement",
														"src": "8945:93:11",
														"trueBody": {
															"id": 2543,
															"nodeType": "Block",
															"src": "8965:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2535,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "8983:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2536,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8993:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8983:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2538,
																	"nodeType": "ExpressionStatement",
																	"src": "8983:11:11"
																},
																{
																	"expression": {
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2539,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "9012:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9022:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9012:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2542,
																	"nodeType": "ExpressionStatement",
																	"src": "9012:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2545,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "9055:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9064:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9055:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2548,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9068:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9055:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2559,
														"nodeType": "IfStatement",
														"src": "9051:93:11",
														"trueBody": {
															"id": 2558,
															"nodeType": "Block",
															"src": "9071:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2550,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "9089:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9099:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9089:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2553,
																	"nodeType": "ExpressionStatement",
																	"src": "9089:11:11"
																},
																{
																	"expression": {
																		"id": 2556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2554,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "9118:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2555,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9128:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9118:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2557,
																	"nodeType": "ExpressionStatement",
																	"src": "9118:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2564,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2560,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "9161:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2561,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9170:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9161:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2563,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9174:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9161:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2574,
														"nodeType": "IfStatement",
														"src": "9157:93:11",
														"trueBody": {
															"id": 2573,
															"nodeType": "Block",
															"src": "9177:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2565,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "9195:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9205:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9195:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2568,
																	"nodeType": "ExpressionStatement",
																	"src": "9195:11:11"
																},
																{
																	"expression": {
																		"id": 2571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2569,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "9224:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2570,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9234:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9224:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2572,
																	"nodeType": "ExpressionStatement",
																	"src": "9224:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2575,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2461,
																	"src": "9267:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9276:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9267:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9280:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9267:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2585,
														"nodeType": "IfStatement",
														"src": "9263:64:11",
														"trueBody": {
															"id": 2584,
															"nodeType": "Block",
															"src": "9283:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 2582,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2580,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2467,
																			"src": "9301:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9311:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9301:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2583,
																	"nodeType": "ExpressionStatement",
																	"src": "9301:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2587,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2467,
													"src": "9353:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2465,
												"id": 2588,
												"nodeType": "Return",
												"src": "9346:13:11"
											}
										]
									},
									"documentation": {
										"id": 2459,
										"nodeType": "StructuredDocumentation",
										"src": "8265:113:11",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8392:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8405:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2590,
												"src": "8397:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8397:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8396:15:11"
									},
									"returnParameters": {
										"id": 2465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2464,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2590,
												"src": "8435:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8435:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8434:9:11"
									},
									"scope": 2918,
									"src": "8383:983:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2625,
										"nodeType": "Block",
										"src": "9599:165:11",
										"statements": [
											{
												"id": 2624,
												"nodeType": "UncheckedBlock",
												"src": "9609:149:11",
												"statements": [
													{
														"assignments": [
															2602
														],
														"declarations": [
															{
																"constant": false,
																"id": 2602,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9641:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2624,
																"src": "9633:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2601,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9633:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2606,
														"initialValue": {
															"arguments": [
																{
																	"id": 2604,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2593,
																	"src": "9655:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2603,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2590,
																	2626
																],
																"referencedDeclaration": 2590,
																"src": "9650:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2605,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9650:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9633:28:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2607,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2602,
																"src": "9682:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2617,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2060",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2611,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2608,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2596,
																					"src": "9692:8:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2609,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "9704:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2060_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2610,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2058,
																					"src": "9704:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9692:23:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2616,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2614,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2612,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9719:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2613,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2602,
																						"src": "9724:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9719:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2615,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2593,
																					"src": "9733:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9719:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9692:46:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9745:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9692:54:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2618,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9741:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2621,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9691:56:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9682:65:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2600,
														"id": 2623,
														"nodeType": "Return",
														"src": "9675:72:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2591,
										"nodeType": "StructuredDocumentation",
										"src": "9372:142:11",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9528:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9541:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "9533:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9533:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2596,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9557:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "9548:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2060",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2595,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2594,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2060,
														"src": "9548:8:11"
													},
													"referencedDeclaration": 2060,
													"src": "9548:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2060",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9532:34:11"
									},
									"returnParameters": {
										"id": 2600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2599,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "9590:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9590:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9589:9:11"
									},
									"scope": 2918,
									"src": "9519:245:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2754,
										"nodeType": "Block",
										"src": "9951:828:11",
										"statements": [
											{
												"assignments": [
													2635
												],
												"declarations": [
													{
														"constant": false,
														"id": 2635,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9969:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2754,
														"src": "9961:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2634,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9961:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2637,
												"initialValue": {
													"hexValue": "30",
													"id": 2636,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9978:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9961:18:11"
											},
											{
												"id": 2751,
												"nodeType": "UncheckedBlock",
												"src": "9989:761:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2638,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10017:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2641,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10026:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10030:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10026:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10017:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2654,
														"nodeType": "IfStatement",
														"src": "10013:99:11",
														"trueBody": {
															"id": 2653,
															"nodeType": "Block",
															"src": "10034:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2643,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10052:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2644,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10061:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2645,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10065:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10061:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10052:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2648,
																	"nodeType": "ExpressionStatement",
																	"src": "10052:15:11"
																},
																{
																	"expression": {
																		"id": 2651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2649,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10085:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10095:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10085:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2652,
																	"nodeType": "ExpressionStatement",
																	"src": "10085:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2655,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10129:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2658,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10138:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10142:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10138:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10129:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2671,
														"nodeType": "IfStatement",
														"src": "10125:99:11",
														"trueBody": {
															"id": 2670,
															"nodeType": "Block",
															"src": "10146:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2660,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10164:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2663,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2661,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10173:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2662,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10177:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10173:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10164:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2665,
																	"nodeType": "ExpressionStatement",
																	"src": "10164:15:11"
																},
																{
																	"expression": {
																		"id": 2668,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2666,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10197:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2667,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10207:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10197:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2669,
																	"nodeType": "ExpressionStatement",
																	"src": "10197:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2672,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10241:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10250:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10254:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10250:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10241:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2688,
														"nodeType": "IfStatement",
														"src": "10237:99:11",
														"trueBody": {
															"id": 2687,
															"nodeType": "Block",
															"src": "10258:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2677,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10276:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2678,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10285:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2679,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10289:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10285:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10276:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2682,
																	"nodeType": "ExpressionStatement",
																	"src": "10276:15:11"
																},
																{
																	"expression": {
																		"id": 2685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2683,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10309:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2684,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10319:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10309:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2686,
																	"nodeType": "ExpressionStatement",
																	"src": "10309:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2689,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10353:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10362:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10366:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10362:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10353:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2705,
														"nodeType": "IfStatement",
														"src": "10349:96:11",
														"trueBody": {
															"id": 2704,
															"nodeType": "Block",
															"src": "10369:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2694,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10387:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2695,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10396:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2696,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10400:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10396:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10387:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2699,
																	"nodeType": "ExpressionStatement",
																	"src": "10387:14:11"
																},
																{
																	"expression": {
																		"id": 2702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2700,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10419:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2701,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10429:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10419:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2703,
																	"nodeType": "ExpressionStatement",
																	"src": "10419:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2706,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10462:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10471:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2708,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10475:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10471:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10462:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2722,
														"nodeType": "IfStatement",
														"src": "10458:96:11",
														"trueBody": {
															"id": 2721,
															"nodeType": "Block",
															"src": "10478:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2711,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10496:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2714,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2712,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10505:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2713,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10509:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10505:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10496:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2716,
																	"nodeType": "ExpressionStatement",
																	"src": "10496:14:11"
																},
																{
																	"expression": {
																		"id": 2719,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2717,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10528:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2718,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10538:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10528:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2720,
																	"nodeType": "ExpressionStatement",
																	"src": "10528:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2727,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2723,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10571:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2726,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2724,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10580:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2725,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10584:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10580:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10571:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2739,
														"nodeType": "IfStatement",
														"src": "10567:96:11",
														"trueBody": {
															"id": 2738,
															"nodeType": "Block",
															"src": "10587:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2732,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2728,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2629,
																			"src": "10605:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2729,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10614:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2730,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10618:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10614:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10605:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2733,
																	"nodeType": "ExpressionStatement",
																	"src": "10605:14:11"
																},
																{
																	"expression": {
																		"id": 2736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2734,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10637:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10647:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10637:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2737,
																	"nodeType": "ExpressionStatement",
																	"src": "10637:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2740,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "10680:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2743,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2741,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10689:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10693:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10689:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10680:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2750,
														"nodeType": "IfStatement",
														"src": "10676:64:11",
														"trueBody": {
															"id": 2749,
															"nodeType": "Block",
															"src": "10696:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 2747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2745,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "10714:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2746,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10724:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10714:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2748,
																	"nodeType": "ExpressionStatement",
																	"src": "10714:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2752,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2635,
													"src": "10766:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2633,
												"id": 2753,
												"nodeType": "Return",
												"src": "10759:13:11"
											}
										]
									},
									"documentation": {
										"id": 2627,
										"nodeType": "StructuredDocumentation",
										"src": "9770:114:11",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9898:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9912:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "9904:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9904:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9903:15:11"
									},
									"returnParameters": {
										"id": 2633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "9942:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9941:9:11"
									},
									"scope": 2918,
									"src": "9889:890:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2790,
										"nodeType": "Block",
										"src": "11014:165:11",
										"statements": [
											{
												"id": 2789,
												"nodeType": "UncheckedBlock",
												"src": "11024:149:11",
												"statements": [
													{
														"assignments": [
															2767
														],
														"declarations": [
															{
																"constant": false,
																"id": 2767,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11056:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2789,
																"src": "11048:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2766,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11048:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2771,
														"initialValue": {
															"arguments": [
																{
																	"id": 2769,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2758,
																	"src": "11071:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2768,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2755,
																	2791
																],
																"referencedDeclaration": 2755,
																"src": "11065:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11065:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11048:29:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2787,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2772,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2767,
																"src": "11098:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2782,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2060",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2776,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2773,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2761,
																					"src": "11108:8:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2774,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "11120:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2060_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2775,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2058,
																					"src": "11120:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11108:23:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2781,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2779,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2777,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11135:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2778,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2767,
																						"src": "11139:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11135:10:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2780,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2758,
																					"src": "11148:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11135:18:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11108:45:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11160:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11108:53:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11156:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2786,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11107:55:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11098:64:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2765,
														"id": 2788,
														"nodeType": "Return",
														"src": "11091:71:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2756,
										"nodeType": "StructuredDocumentation",
										"src": "10785:143:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10942:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10956:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "10948:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10948:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2761,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10972:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "10963:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2060",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2759,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2060,
														"src": "10963:8:11"
													},
													"referencedDeclaration": 2060,
													"src": "10963:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2060",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10947:34:11"
									},
									"returnParameters": {
										"id": 2765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "11005:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11005:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11004:9:11"
									},
									"scope": 2918,
									"src": "10933:246:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2877,
										"nodeType": "Block",
										"src": "11493:600:11",
										"statements": [
											{
												"assignments": [
													2800
												],
												"declarations": [
													{
														"constant": false,
														"id": 2800,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11511:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2877,
														"src": "11503:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2799,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11503:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2802,
												"initialValue": {
													"hexValue": "30",
													"id": 2801,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11520:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11503:18:11"
											},
											{
												"id": 2874,
												"nodeType": "UncheckedBlock",
												"src": "11531:533:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2803,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "11559:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2804,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11568:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11559:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11574:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11559:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2817,
														"nodeType": "IfStatement",
														"src": "11555:98:11",
														"trueBody": {
															"id": 2816,
															"nodeType": "Block",
															"src": "11577:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2810,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2808,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2794,
																			"src": "11595:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2809,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11605:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11595:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2811,
																	"nodeType": "ExpressionStatement",
																	"src": "11595:13:11"
																},
																{
																	"expression": {
																		"id": 2814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2812,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11626:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11636:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11626:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2815,
																	"nodeType": "ExpressionStatement",
																	"src": "11626:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2822,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2818,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "11670:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11679:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11670:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2821,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11684:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11670:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2832,
														"nodeType": "IfStatement",
														"src": "11666:95:11",
														"trueBody": {
															"id": 2831,
															"nodeType": "Block",
															"src": "11687:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 2825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2823,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2794,
																			"src": "11705:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2824,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11715:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11705:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2826,
																	"nodeType": "ExpressionStatement",
																	"src": "11705:12:11"
																},
																{
																	"expression": {
																		"id": 2829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2827,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11735:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2828,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11745:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11735:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2830,
																	"nodeType": "ExpressionStatement",
																	"src": "11735:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2837,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2835,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2833,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "11778:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2834,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11787:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11778:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2836,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11792:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11778:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2847,
														"nodeType": "IfStatement",
														"src": "11774:95:11",
														"trueBody": {
															"id": 2846,
															"nodeType": "Block",
															"src": "11795:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 2840,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2838,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2794,
																			"src": "11813:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2839,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11823:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11813:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2841,
																	"nodeType": "ExpressionStatement",
																	"src": "11813:12:11"
																},
																{
																	"expression": {
																		"id": 2844,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2842,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11843:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11853:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11843:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2845,
																	"nodeType": "ExpressionStatement",
																	"src": "11843:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2850,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2848,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "11886:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11895:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11886:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2851,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11900:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11886:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2862,
														"nodeType": "IfStatement",
														"src": "11882:95:11",
														"trueBody": {
															"id": 2861,
															"nodeType": "Block",
															"src": "11903:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 2855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2853,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2794,
																			"src": "11921:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2854,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11931:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11921:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2856,
																	"nodeType": "ExpressionStatement",
																	"src": "11921:12:11"
																},
																{
																	"expression": {
																		"id": 2859,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2857,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11951:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2858,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11961:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11951:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2860,
																	"nodeType": "ExpressionStatement",
																	"src": "11951:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2863,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "11994:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12003:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11994:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2866,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12007:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11994:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2873,
														"nodeType": "IfStatement",
														"src": "11990:64:11",
														"trueBody": {
															"id": 2872,
															"nodeType": "Block",
															"src": "12010:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 2870,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2868,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "12028:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2869,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12038:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12028:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2871,
																	"nodeType": "ExpressionStatement",
																	"src": "12028:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2875,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2800,
													"src": "12080:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2798,
												"id": 2876,
												"nodeType": "Return",
												"src": "12073:13:11"
											}
										]
									},
									"documentation": {
										"id": 2792,
										"nodeType": "StructuredDocumentation",
										"src": "11185:240:11",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2878,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11439:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11454:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "11446:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11446:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11445:15:11"
									},
									"returnParameters": {
										"id": 2798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2797,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "11484:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2796,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11484:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11483:9:11"
									},
									"scope": 2918,
									"src": "11430:663:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2916,
										"nodeType": "Block",
										"src": "12329:173:11",
										"statements": [
											{
												"id": 2915,
												"nodeType": "UncheckedBlock",
												"src": "12339:157:11",
												"statements": [
													{
														"assignments": [
															2890
														],
														"declarations": [
															{
																"constant": false,
																"id": 2890,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12371:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2915,
																"src": "12363:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2889,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12363:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2894,
														"initialValue": {
															"arguments": [
																{
																	"id": 2892,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2881,
																	"src": "12387:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2891,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2878,
																	2917
																],
																"referencedDeclaration": 2878,
																"src": "12380:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12380:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12363:30:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2895,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2890,
																"src": "12414:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2908,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2060",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2899,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2896,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2884,
																					"src": "12424:8:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2897,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "12436:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2060_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2898,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2058,
																					"src": "12436:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2060",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12424:23:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2907,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2905,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2900,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12451:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2903,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2901,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2890,
																									"src": "12457:6:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 2902,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12466:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12457:10:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2904,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12456:12:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12451:17:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2906,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "12471:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12451:25:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12424:52:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12483:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12424:60:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12479:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2912,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12423:62:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12414:71:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2888,
														"id": 2914,
														"nodeType": "Return",
														"src": "12407:78:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2879,
										"nodeType": "StructuredDocumentation",
										"src": "12099:143:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12256:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2881,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12271:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "12263:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12263:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2884,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12287:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "12278:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2060",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2883,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2882,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2060,
														"src": "12278:8:11"
													},
													"referencedDeclaration": 2060,
													"src": "12278:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2060",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12262:34:11"
									},
									"returnParameters": {
										"id": 2888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "12320:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12320:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12319:9:11"
									},
									"scope": 2918,
									"src": "12247:255:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2919,
							"src": "202:12302:11",
							"usedErrors": []
						}
					],
					"src": "103:12402:11"
				},
				"id": 11
			}
		}
	}
}